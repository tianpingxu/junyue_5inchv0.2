/**
  ******************************************************************************
             Copyright(c) 2022 China Core Co. Ltd.
                      All Rights Reserved
  ******************************************************************************
  * @file    ccm4202s_reg.h
  * @author  Product application department
  * @version V1.0
  * @date    2022.10.31
  * @brief   Header file of chip reg
  *
  ******************************************************************************
*/

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __CCM4202S_REG_H
#define __CCM4202S_REG_H

#ifdef __cplusplus
extern "C"
{
#endif

/* Includes ------------------------------------------------------------------*/
#include "iomacros.h"

/*** �궨�� *********************************************************************/
/**
 * @brief  �Ĵ�������ַ����
 */
#define __BASE_ADDR__
#ifdef __BASE_ADDR__

/* M4��ģ��Ĵ�������ַ  */
#define IOCTRL_BASE_ADDR     (0x40000000)           /**< IOCTRL�Ĵ�������ַ */
#define CCM_BASE_ADDR         (0x40001000)          /**< CCM�Ĵ�������ַ */
#define RESET_BASE_ADDR     (0x40002000)        /**< RESET �Ĵ�������ַ */
#define OTP_BASE_ADDR         (0X40003000)          /**< OTP�Ĵ�������ַ */
#define CPM_BASE_ADDR         (0x40004000)          /**< CPM�Ĵ�������ַ */
#define WDT_BASE_ADDR         (0x40005000)          /**< WDT ���Ź��Ĵ�������ַ */
#define TC_BASE_ADDR         (0x40006000)           /**< TC ʱ��������Ĵ�������ַ */
#define PIT1_BASE_ADDR         (0x40007000)         /**< PIT32_0 32bits �ɱ���жϼ������Ĵ�������ַ */
#define PIT2_BASE_ADDR         (0x40008000)         /**< PIT32_1 32bits �ɱ���жϼ������Ĵ�������ַ */
#define USI1_BASE_ADDR         (0x40009000)         /**< USI1 ISO7816 �Ĵ�������ַ */
#define EDMAC1_0_BASE_ADDR     (0X4000A000)         /**< EDMAC1_0�Ĵ�������ַ   */
#define EDMAC1_1_BASE_ADDR     (0X4000A040)         /**< EDMAC1_1�Ĵ�������ַ   */
#define CAN1_BASE_ADDR         (0x4000C000)         /**< CAN1�Ĵ�������ַ */
#define CAN2_BASE_ADDR         (0x4000D000)         /**< CAN2�Ĵ�������ַ */
#define SPI1_BASE_ADDR         (0x40010000)         /**< SPI1 �Ĵ�������ַ   */
#define SPI2_BASE_ADDR         (0x40011000)         /**< SPI2 �Ĵ�������ַ   */
#define SPI3_BASE_ADDR         (0x40012000)         /**< SPI3 �Ĵ�������ַ   */
#define UART1_BASE_ADDR     (0x40013000)        /**< UART1 �Ĵ�������ַ   */
#define UART2_BASE_ADDR     (0x40014000)        /**< UART2 �Ĵ�������ַ   */
#define USI2_BASE_ADDR      (0x40015000)        /**< USI2 ISO7816 �Ĵ�������ַ */
#define I2C1_BASE_ADDR         (0x40017000)         /**< I2C1�Ĵ�������ַ   */
#define PWM_BASE_ADDR         (0x40018000)          /**< PWM �Ĵ�������ַ */
#define EPORT0_BASE_ADDR     (0x40019000)           /**< EPORT�Ĵ�������ַ */
#define EPORT1_BASE_ADDR     (0x4001A000)           /**< EPORT1�Ĵ�������ַ */
#define I2C2_BASE_ADDR         (0x4001B000)         /**< I2C2�Ĵ�������ַ   */
#define UART3_BASE_ADDR     (0x4001D000)        /**< UART3 �Ĵ�������ַ   */
#define UART4_BASE_ADDR     (0x4001E000)        /**< UART4 �Ĵ�������ַ   */
#define ADC_BASE_ADDR       (0x40020000)        /**< ADC�Ĵ�������ַ */
#define EPORT2_BASE_ADDR    (0x40024000)        /**< EPORT2�Ĵ�������ַ */
#define EPORT3_BASE_ADDR    (0x40025000)        /**< EPORT3�Ĵ�������ַ */
#define EPORT4_BASE_ADDR    (0x40026000)        /**< EPORT4�Ĵ�������ַ */
#define EPORT5_BASE_ADDR    (0x40027000)        /**< EPORT5�Ĵ�������ַ */
#define EPORT6_BASE_ADDR    (0x40028000)        /**< EPORT6�Ĵ�������ַ */
#define EPORT7_BASE_ADDR    (0x40029000)        /**< EPORT7�Ĵ�������ַ */
#define UART5_BASE_ADDR     (0x4002B000)        /**< UART5 �Ĵ�������ַ   */
#define UART6_BASE_ADDR     (0x4002C000)        /**< UART6 �Ĵ�������ַ   */
#define PWMT1_BASE_ADDR     (0x4002d000)        /**< PWMT1 �Ĵ�������ַ */
#define PWMT2_BASE_ADDR     (0x4002e000)        /**< PWMT2 �Ĵ�������ַ */
#define PWMT3_BASE_ADDR     (0x4002f000)        /**< PWMT3 �Ĵ�������ַ */
#define SECDET_BASE_ADDR    (0X40033000)        /**< SECDET ��ȫ���Ĵ�������ַ */
#define PCI_BASE_ADDR       (0x40034000)        /**< PCI ����Ĵ�������ַ */
#define SHA_BASE_ADDR       (0x40038000)        /**< SHA �Ĵ�������ַ   */
#define EDMAC0_0_BASE_ADDR  (0X40039000)        /**< EDMAC0_0�Ĵ�������ַ   */
#define EDMAC0_1_BASE_ADDR  (0X40039040)        /**< EDMAC0_1�Ĵ�������ַ   */
#define TRNG_BASE_ADDR      (0x4003b000)        /**< TRNG ������Ĵ�������ַ */

#define CRC1_BASE_ADDR      (0x40044000)        /**< CRC1�Ĵ�������ַ   */
#define CRC2_BASE_ADDR      (0x40045000)        /**< CRC2�Ĵ�������ַ   */
#define DMAC1_BASE_ADDR     (0x40046000)        /**< DMA1�Ĵ�������ַ   */
#define DMAC2_BASE_ADDR     (0x40047000)        /**< DMA2�Ĵ�������ַ  */
#define USBC_BASE_ADDR      (0x4004C000)        /**< USB �Ĵ�������ַ */

#define CACHE_BASE_ADDR     (0x40051000)        /**< CACHE�Ĵ�������ַ */
#define PXLP1_BASE_ADDR     (0x40052000)        /**< PXLP1�Ĵ�������ַ */
#define PXLP2_BASE_ADDR     (0x40053000)        /**< PXLP2�Ĵ�������ַ */
#define CACHE2_BASE_ADDR    (0x40055000)        /**< CACHE2�Ĵ�������ַ */
#define I2S1_BASE_ADDR      (0x40056000)        /**< I2S1�Ĵ�������ַ   */
#define I2S2_BASE_ADDR      (0x40057000)        /**< I2S2�Ĵ�������ַ   */
#define SD_BASE_ADDR        (0xE0000000)        /**< SD �Ĵ�������ַ   */
#define SDIO_BASE_ADDR      (0xE0000000)        /**< SDIO �Ĵ�������ַ   */
#define SPIM1_BASE_ADDR     (0x13000000)        /**< SSI1 ����SPI�Ĵ�������ַ   */
#define SPIM2_BASE_ADDR     (0x17000000)        /**< SSI2 ����SPI�Ĵ�������ַ   */
#define SPIM3_BASE_ADDR     (0x1B000000)        /**< SSI2 ����SPI�Ĵ�������ַ   */


#define M4SYS_BASE_ADDR     (0xE0000000)        /**< M4 �˼Ĵ�������ַ   */

#endif
/**
 * @brief  �����Ĵ�����ʼ��ַ����
 */
#define OTHER_ADDR
#ifdef OTHER_ADDR

#define USBC_INDEXED_ADDR (USBC_BASE_ADDR + 0x10)
#define USBC_FIFOCFG_ADDR (USBC_BASE_ADDR + 0x60)
#define USBC_FIFOREG_ADDR (USBC_BASE_ADDR + 0x20)
#define USBC_DMACCFG_ADDR (USBC_BASE_ADDR + 0x200)
#define USBC_PHYREG_ADDR  (USBC_BASE_ADDR + 0x800)
#endif

/**
 * @brief  ģ�鶨��
 */
#define __MODULE___
#ifdef __MODULE___
#define ADC ((ADC_TypeDef *)ADC_BASE_ADDR)
#define ICACHE ((reg_cache_t *)(CACHE_BASE_ADDR))
#define DCACHE ((reg_cache_t *)(CACHE2_BASE_ADDR))
#define CAN1 ((CAN_TypeDef *)CAN1_BASE_ADDR)
#define CAN2 ((CAN_TypeDef *)CAN2_BASE_ADDR)
#define CCM ((reg_ccm_t *)CCM_BASE_ADDR)
#define CRC1 ((CRC_TypeDef *)CRC1_BASE_ADDR)
#define CRC2 ((CRC_TypeDef *)CRC2_BASE_ADDR)
#define CPM ((reg_cpm_t *)CPM_BASE_ADDR)
#define DMAC1 ((DMAC_TypeDef *)DMAC1_BASE_ADDR)
#define DMAC2 ((DMAC_TypeDef *)DMAC2_BASE_ADDR)
#define EDMAC0_0 ((EDMAC_TypeDef *)EDMAC0_0_BASE_ADDR)
#define EDMAC0_1 ((EDMAC_TypeDef *)EDMAC0_1_BASE_ADDR)
#define EDMAC1_0 ((EDMAC_TypeDef *)EDMAC1_0_BASE_ADDR)
#define EDMAC1_1 ((EDMAC_TypeDef *)EDMAC1_1_BASE_ADDR)
#define EFM ((EFLASH_TypeDef *)EFLASH_BASE_ADDR)
#define OTP ((OTP_TypeDef *)OTP_BASE_ADDR)
#define EPORT0 ((EPORT_TypeDef *)EPORT0_BASE_ADDR)
#define EPORT1 ((EPORT_TypeDef *)EPORT1_BASE_ADDR)
#define EPORT2 ((EPORT_TypeDef *)EPORT2_BASE_ADDR)
#define EPORT3 ((EPORT_TypeDef *)EPORT3_BASE_ADDR)
#define EPORT4 ((EPORT_TypeDef *)EPORT4_BASE_ADDR)
#define EPORT5 ((EPORT_TypeDef *)EPORT5_BASE_ADDR)
#define EPORT6 ((EPORT_TypeDef *)EPORT6_BASE_ADDR)
#define EPORT7 ((EPORT_TypeDef *)EPORT7_BASE_ADDR)
#define I2C1 ((I2C_TypeDef *)I2C1_BASE_ADDR)
#define I2C2 ((I2C_TypeDef *)I2C2_BASE_ADDR)
#define I2S1 ((reg_i2s_typeDef *)I2S1_BASE_ADDR)
#define I2S2 ((reg_i2s_typeDef *)I2S2_BASE_ADDR)
#define IOCTRL ((reg_ioctrl_t *)IOCTRL_BASE_ADDR)
#define PIT1 ((PIT32_TypeDef *)PIT1_BASE_ADDR)
#define PIT2 ((PIT32_TypeDef *)PIT2_BASE_ADDR)
#define RST ((reg_reset_t *)(RESET_BASE_ADDR))
#define SECDET ((SECDET_TypeDef *)(SECDET_BASE_ADDR))
#define SPI1 ((SPI_TypeDef *)(SPI1_BASE_ADDR))
#define SPI2 ((SPI_TypeDef *)(SPI2_BASE_ADDR))
#define SPI3 ((SPI_TypeDef *)(SPI3_BASE_ADDR))
#define SSI1 ((reg_ssi_t *)SPIM1_BASE_ADDR)
#define SSI2 ((reg_ssi_t *)SPIM2_BASE_ADDR)
#define SSI3 ((reg_ssi_t *)SPIM3_BASE_ADDR)
#define TC ((TC_TypeDef *)(TC_BASE_ADDR))
#define TRNG ((reg_trng_t *)TRNG_BASE_ADDR)
#define UART1 ((uart_typedef_t *)UART1_BASE_ADDR)
#define UART2 ((uart_typedef_t *)UART2_BASE_ADDR)
#define UART3 ((uart_typedef_t *)UART3_BASE_ADDR)
#define UART4 ((uart_typedef_t *)UART4_BASE_ADDR)
#define UART5 ((uart_typedef_t *)UART5_BASE_ADDR)
#define UART6 ((uart_typedef_t *)UART6_BASE_ADDR)
#define USI1 ((USI_TypeDef *)USI1_BASE_ADDR)
#define USI2 ((USI_TypeDef *)USI2_BASE_ADDR)
#define WDT ((WDT_TypeDef *)WDT_BASE_ADDR)
#define PWM ((PWM_TypeDef *)(PWM_BASE_ADDR))
#define PWMT1 ((PWMT_TypeDef *)(PWMT1_BASE_ADDR))
#define PWMT2 ((PWMT_TypeDef *)(PWMT2_BASE_ADDR))
#define PWMT3 ((PWMT_TypeDef *)(PWMT3_BASE_ADDR))

#define gUSBC_CommonReg ((usbccommon_t *)(USBC_BASE_ADDR))
#define gUSBC_IndexReg ((usbcindexed_t *)USBC_INDEXED_ADDR)
#define gUSBC_ControlReg ((usbcfifocfg_t *)USBC_FIFOCFG_ADDR)
#define gUSBC_FIFOReg ((reg_usbcfifo_t *)USBC_FIFOREG_ADDR)
#define gUSBC_DMAReg ((usbcdmacfg_t *)USBC_DMACCFG_ADDR)
#define gUSBC_PHYReg ((reg_usbcphy_t *)USBC_PHYREG_ADDR)
#endif

/**
 * @brief  ģ��λ����
 */
#define __MODULE_BIT__
#ifdef __MODULE_BIT__

#define __EPT__
#ifdef __EPT__
/*** EPT **********************************************/
/*** CSR ************/
//#define EPT_CSR_CNTEN                                  ((uint32_t)1<<0)
//#define EPT_CSR_INTEN                                  ((uint32_t)1<<1)
//#define EPT_CSR_CLKSRC                                 ((uint32_t)1<<2)
//#define EPT_CSR_CNTFLAG                                ((uint32_t)1<<16)

#endif /* end __EPT__ */

#define __EIC__
#ifdef __EIC__
/*** EIC **********************************************/
/*** IER Interrupt Enable Register ************/
//#define IER_SPI23INT_MASK            (0x00000008)
//#define IER_DMACINT_MASK            (0x00000010)
//#define IER_SPI14INT_MASK            (0x00004000)
//#define IER_EDMAC0INT_MASK            (0x00010000)
//#define IER_EDMAC1SCI2INT_MASK        (0x00100000)
//#define IER_I2CINT_MASK                (0x00200000)

#endif /* end __EIC__ */

#define __ADC__
#ifdef __ADC__
/*** ADC **********************************************/
/*ADC interrupt and status register:ADC_ISR*/
#define ADC_ANALOG_WD_FLAG (((uint32_t)1 << 7))
#define ADC_FIFO_EMPTY_STATUS (((uint32_t)1 << 6))
#define ADC_FIFO_FULL_STATUS (((uint32_t)1 << 5))
#define ADC_OVER_RUN_FLAG (((uint32_t)1 << 4))
#define ADC_END_SEQUENCE_FLAG (((uint32_t)1 << 3))
#define ADC_END_CONVERSION_FLAG (((uint32_t)1 << 2))
#define ADC_END_SAMPLING_FLAG (((uint32_t)1 << 1))
#define ADC_READY_FLAG (((uint32_t)1 << 0))

/*ADC interrupt enable register:ADC_IER*/
#define ADC_ANALOG_WD_INT_EN (((uint32_t)1 << 7))
#define ADC_OVER_RUN_INT_EN (((uint32_t)1 << 4))
#define ADC_END_SEQUENCE_INT_EN (((uint32_t)1 << 3))
#define ADC_END_CONVERSION_INT_EN (((uint32_t)1 << 2))
#define ADC_END_SAMPLING_INT_EN (((uint32_t)1 << 1))
#define ADC_READY_INT_EN (((uint32_t)1 << 0))

/*ADC control register:ADC_CR*/
#define ADC_STOP_CONVERSION_CMD_EN (((uint32_t)1 << 3))
#define ADC_START_CONVERSION_CMD_EN (((uint32_t)1 << 2))
#define ADC_DISABLE_CMD_EN (((uint32_t)1 << 1))
#define ADC_ENABLE_CMD_EN (((uint32_t)1 << 0))

/*ADC configuration register 1:ADC_CFGR1*/
#define ADC_ANALOG_INPUT_DIFF_MASK (((uint32_t)1 << 31))
#define ADC_OVERRUN_MODE_MASK (((uint32_t)1 << 30))
#define ADC_QADC_CLK_DISABLE_MASK (((uint32_t)1 << 29))
#define ADC_SAMPLE_OUTPUT_BUFFER_EN (((uint32_t)1 << 28))
#define ADC_DISCONTINUOUS_EN (((uint32_t)1 << 23))
#define ADC_AUTO_OFF_MODE_EN (((uint32_t)1 << 22))
#define ADC_WAIT_CONVERSION_MODE_MASK (((uint32_t)1 << 21))
#define ADC_CONTINUOUS_CONVERSION_MASK (((uint32_t)1 << 20))
#define ADC_EXTERNAL_VREF_MASK (((uint32_t)1 << 15))
#define ADC_CFGR1_ALIGN_LEFT_ALIGNMENT (((uint32_t)1 << 10))
#define ADC_CFGR1_ALIGN_RIGHT_ALIGNMENT ((uint32_t)(0 << 10))
#define ADC_LEFT_ALIGNMENT_MASK (((uint32_t)1 << 10))
#define ADC_CFGR1_RES_10BIT (((uint32_t)1 << 8))
#define ADC_CFGR1_DMATH_2 ((uint32_t)(2 << 4))
#define ADC_DMA_ACCESS_EN (((uint32_t)1 << 0))
#define ADC_CFGR1_SEQ_LEN_SHIFT ((uint32_t)(24))

/*ADC configuration register 2:ADC_CFGR2*/
#define ADC_ANALOG_INPUT_BYPASS_EN (((uint32_t)1 << 15))
#define ADC_CFGR2_QPR_0 ((uint32_t)(0 << 8))
#define ADC_CFGR2_QPR_1 (((uint32_t)1 << 8))
#define ADC_CFGR2_QPR_F ((uint32_t)(0x0f << 8))
#define ADC_CFGR2_SCTNT_10H ((uint32_t)(0x10))
#define ADC_CFGR2_SCTNT_20H ((uint32_t)(0x20))

/*ADC sampling time register:ADC_SMPR*/
#define ADC_SMPR_SMP_6 ((uint32_t)(6))
#define ADC_SMPR_SMP_8 ((uint32_t)(8))
/*ADC watch dog register:ADC_WDG*/
#define ADC_ANALOG_WATCHDOG_EN (((uint32_t)1 << 7))
#define ADC_WATCHDOG_CHANNEL_MASK (((uint32_t)1 << 6))

/*ADC watch dog threshold register:ADC_TR*/
#define ADC_NOTE_FOR_HT_MASK (((uint32_t)1 << 28))
#define ADC_NOTE_FOR_LT_MASK (((uint32_t)1 << 12))

/*ADC channel selection register 1:ADC_CHSELR1*/
/*ADC channel selection register 2:ADC_CHSELR2*/
#define ADC_CHSELR_MASK ((uint8_t)(0x1F))
/*ADC FIFO access register:ADC_FIFO*/
/*ADC interrupt and status register 2:ADC_ISR2*/
#define ADC_FIFO_TIMEOUT_FLAG (((uint32_t)1 << 31))
#define ADC_DATA_BUFFER_TIMEOUT_FLAG (((uint32_t)1 << 15))
#define ADC_DATA_BUFFER_READY_FLAG (((uint32_t)1 << 12))

/*ADC data gather register:ADC_DGATR*/
#define ADC_DATA_BUFFER_TIMEOUT_INT_EN (((uint32_t)1 << 15))
#define ADC_DATA_BUFFER_TIMEOUT_EN (((uint32_t)1 << 14))
#define ADC_DATA_BUFFER_READY_INT_EN (((uint32_t)1 << 12))
#define ADC_DATA_GATHER_FUNCTION_EN (((uint32_t)1 << 0))

/*ADC data buffer register:ADC_DBUFR*/
/*ADC FIFO timeout register:ADC_FIFOTOR*/
#define ADC_FIFO_TIMEOUT_INT_EN (((uint32_t)1 << 15))
#define ADC_FIFO_TIMEOUT_EN (((uint32_t)1 << 14))

/*ADC data for test 3:ADC_DFT3*/
/*ADC data for test 2:ADC_DFT2*/
/*ADC data for test 1:ADC_DFT1*/
/*ADC data for test 0:ADC_DFT0*/
/*ADC data for test 7:ADC_DFT7*/
/*ADC data for test 6:ADC_DFT6*/
/*ADC data for test 5:ADC_DFT5*/
/*ADC data for test 4:ADC_DFT4*/
/*ADC data for test 8:ADC_DFT8*/
/*ADC channel selection register 3:ADC_CHSELR3*/

#endif /* end __ADC__ */

#define __CAN__
#ifdef __CAN__
/*** CAN **********************************************/
/*** MCR ************/
#define CAN_MCR_MAXMB (0x0000003f)         /* CAN MCR MABMB area mask */
#define CAN_MCR_MDIS (((uint32_t)1 << 31)) /* CAN MCR MDIS bit mask */
#define CAN_MCR_FRZ (((uint32_t)1 << 30))  /* CAN MCR FRZ bit mask */
#define CAN_MCR_WRN_EN (0x00200000)        /* CAN MCR WRN_EN bit mask */
#define CAN_MCR_SOFT_RST (0x02000000)      /* CAN MCR SOFT_RST bit mask */
#define CAN_MCR_FEN (0x20000000)           /* CAN MCR FEN bit mask */
#define CAN_MCR_HALT (0x10000000)          /* CAN MCR HALT bit mask */
#define CAN_MCR_NOT_RDY (0x08000000)       /* CAN MCR NOT_RDY bit mask */
#define CAN_MCR_FRZ_ACK ( (uint32_t)1000000)       /* CAN MCR FRZ_ACK bit mask */
#define CAN_MCR_SLF_WAK (0x00400000)       /* CAN MCR SLF_WAK bit mask */
#define CAN_MCR_LPM_ACK (0x00100000)       /* CAN MCR LPM_ACK bit mask */
#define CAN_MCR_LPRIO_EN (0x00002000)      /* CAN MCR LPRIO_EN bit mask */
#define CAN_MCR_SRX_DIS (0X00020000)       /* CAN MCR SRX_DIS bit mask */
#define CAN_MCR_BCC (0x00010000)           /* CAN MCR BCC bit mask */
#define CAN_MCR_AEN (0x00001000)           /* CAN MCR AEN bit mask */
#define CAN_MCR_IDAM_A (0x00000000)        /* CAN MCR IDAM format A mask */
#define CAN_MCR_IDAM_B (0x00000100)        /* CAN MCR IDAM format B mask */
#define CAN_MCR_IDAM_C (0x00000200)        /* CAN MCR IDAM format C mask */

/*** CR ************/
#define CAN_TIMING_MASK (0x00C0FFF8) /* CAN CR PRESDIV&PSEG1&PSEG2&PROPSEG area mask */
#define CAN_CR_RJW_2 (0x00800000)    /* CAN CR RJW 2 mask */
#define CAN_CR_BOFF_MSK (0x00008000) /* CAN CR BOFF_MSK mask */
#define CAN_CR_ERR_MSK (0x00004000)  /* CAN CR ERR_MSK mask */
#define CAN_CR_CLK_SRC (0x00002000)  /* CAN CR This bit selects the clock source */
#define CAN_CR_LPB (0x00001000)      /* CAN CR LPB bit mask */
#define CAN_CR_TWRN_MSK (0x00000800) /* CAN CR TWRN_MSK mask */
#define CAN_CR_RWRN_MSK (0x00000400) /* CAN CR RWRN_MSK mask */
#define CAN_CR_BUFF_REC (0x00000040) /* CAN CR BUFF_REC bit mask */
#define CAN_CR_TSYN (0x00000020)     /* CAN CR TSYN bit mask */
#define CAN_CR_LBUF (0x00000010)     /* CAN CR LBUF bit mask */
#define CAN_CR_LOM (0x00000008)      /* CAN CR LOM bit mask */

/*** SR ************/
#define CAN_ESR_TWRN_INT (0x00020000)    //CAN ESR TWRN_INT bit mask
#define CAN_ESR_RWRN_INT (0x00010000)    //CAN ESR RWRN_INT bit mask
#define CAN_ESR_BIT0_ERROR (0x1 << 14)   //CAN ESR BIT0_ERROR bit mask
#define CAN_ESR_Error_Passive (0x1 << 4) //CAN ESR Error Passive
#define CAN_ESR_BOFF_INT (0x00000004)    //CAN ESR BOFF_INT bit mask
#define CAN_ESR_ERR_INT (0x00000002)     //CAN ESR ERR_INT bit mask

/*** IM1R ************/
#define CAN_IM1R_RX_FIFO_INT_MASK (0xffffff1f) //CAN IF1R RX_FIFO_INT bit mask
#define CAN_IM1R_RX_FIFO_INT (0xe0)            //CAN IF1R RX_FIFO_INT bit mask

/*** IF1R ************/
#define CAN_IF1R_RX_FIFO_OVERRUN_FLAG (0x1 << 7)        //CAN Rx fifo overrun interrupt flag
#define CAN_IF1R_RX_FIFO_ALMOST_OVERRUN_FLAG (0x1 << 6) //CAN Rx fifo almost overrun interrupt flag
#define CAN_IF1R_RX_FIFO_FLAG (0x1 << 5)                //CAN Rx fifo interrupt flag

/*** MB ************/
#define CAN_RXCODE_INACT (0x00000000)  //CAN rx code for INACTIVE
#define CAN_RXCODE_EMPTY (0x04000000)  //CAN rx code for EMPTY
#define CAN_TXCODE_INACT (0x08000000)  //CAN tx code for INACTIVE
#define CAN_TXCODE_ABORT (0x09000000)  //CAN rx code for ABORT
#define CAN_TXCODE_ONCE (0x0c000000)   //CAN rx code for TRANSMIT UNCONDITIONALLY ONCE
#define CAN_TXCODE_REMOTE (0x0a000000) //CAN rx code for TRANSMIT BY REMOTE REQUEST
#define CAN_MBS_RTR (0x00100000)       //CAN MB RTR bit mask
#define CAN_MBS_IDE (0x00200000)       //CAN MB IDE bit mask
#define CAN_MBS_SRR (0x00400000)       //CAN MB SRR bit mask
#define CAN_FIFO_EXT_MSK (0x40000000)  //CAN ID table EXT bit mask
#define CAN_DLC_8BYTE (0x00080000)

#endif /* end __CAN__ */

#define __CACHE__
#ifdef __CACHE__
/*** CACHE **********************************************/
/*** CCR ************/
#define CACHE_CCR_ENCACHE ((uint32_t)1 << 0) /**< ���û��� */
#define CACHE_CCR_INVW0 ((uint32_t)1 << 24)  /**< ʹWAY 0��Ч */
#define CACHE_CCR_PUSHW0 ((uint32_t)1 << 25) /**< ����WAY 0 */
#define CACHE_CCR_INVW1 ((uint32_t)1 << 26)  /**< ʹWAY 1��Ч */
#define CACHE_CCR_PUSHW1 ((uint32_t)1 << 27) /**< ����WAY 1 */
#define CACHE_CCR_GO ((uint32_t)1 << 31)     /**< ����CACHE���� */

#define IPCCCR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x0)
#define IPCCLCR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x4)
#define IPCCSAR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x8)
#define IPCCCVR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0xc)
#define IPCCSRR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x10)

#define IPCCRGS *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x20)
#define IPCCRGS_H *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x24)

#define IR2HIGHADDR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x80)

#define IPCRINVPAGEADDR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x180)
#define IPCRINVPAGESIZE *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x184)

#define IPSCCR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x800)
#define IPSCLCR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x804)
#define IPSCSAR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x808)
#define IPSCCVR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x80c)
#define IPSCSRR *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x810)

#define IPSCRGS *(volatile uint32_t *)(CACHE_BASE_ADDR + 0x820)

#define DPCCCR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x0)
#define DPCCLCR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x4)
#define DPCCSAR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x8)
#define DPCCCVR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0xc)
#define DPCCSRR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x10)

#define DPCCRGS *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x20)
#define DPCCRGS_H *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x24)

#define DR2HIGHADDR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x80)

#define DPCRINVPAGEADDR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x180)
#define DPCRINVPAGESIZE *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x184)

#define DPSCCR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x800)
#define DPSCLCR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x804)
#define DPSCSA *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x808)
#define DPSCCVR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x80c)
#define DPSCSRR *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x810)

#define DPSCRGS *(volatile uint32_t *)(CACHE2_BASE_ADDR + 0x820)

#endif /* end __CACHE__ */

#define __CCM__
#ifdef __CCM__
///*** CCM **********************************************/
///*** FDCR 0x00************/
#define CCM_FDCR_LFDCR ((uint16_t)0xff << 0)
#define CCM_FDCR_HFDCR ((uint16_t)0xff << 8)

///*** CCR 0x02************/
#define CCM_CCR_BMT ((uint16_t)3 << 0)
#define CCM_CCR_BMD ((uint16_t)1 << 2)
#define CCM_CCR_BME ((uint16_t)1 << 3)
#define CCM_CCR_SHINT ((uint16_t)1 << 4)
#define CCM_CCR_PERIPH_BRIDGE_RAE ((uint16_t)1 << 5)
#define CCM_CCR_PERIPH_BRIDGE_PAE ((uint16_t)1 << 6)
#define CCM_CCR_MODE ((uint16_t)7 << 8)
#define CCM_CCR_CLKMODE_PDE ((uint16_t)1 << 11)
#define CCM_CCR_JTAGDIS ((uint16_t)1 << 12)
#define CCM_CCR_BTLDDIS ((uint16_t)1 << 13)
#define CCM_CCR_TESTDIS ((uint16_t)1 << 14)
#define CCM_CCR_SWAPDIS ((uint16_t)1 << 15)

///*** PHYPA 0x06************/
#define CCM_PHYPA_USBPHY_PLL_EN ((uint16_t)1 << 0)
#define CCM_PHYPA_USBPHY_REG_EN ((uint16_t)1 << 1)
#define CCM_PHYPA_USBPHY_SUSPENDM ((uint16_t)1 << 2)
#define CCM_PHYPA_USBPHY_TERMSEL_DIR ((uint16_t)1 << 3)
#define CCM_PHYPA_USBPHY_TERMSEL ((uint16_t)1 << 4)
#define CCM_PHYPA_USBPHY_DIR ((uint16_t)1 << 5)
#define CCM_PHYPA_USBPHY_12M_EN_SEL ((uint16_t)1 << 6)
#define CCM_PHYPA_USBPHY_REG_EN_SEL ((uint16_t)1 << 7)

#define CCM_PHYPA_PHY_SESSENDVALID ((uint16_t)1 << 8)
#define CCM_PHYPA_PHY_AVALID ((uint16_t)1 << 9)
#define CCM_PHYPA_PHY_VBUSVALID ((uint16_t)1 << 10)
#define CCM_PHYPA_PHY_VALID_DIR ((uint16_t)1 << 11)
#define CCM_PHYPA_PHY_ID_DIR ((uint16_t)1 << 12)
#define CCM_PHYPA_PHY_ID_PULLUP ((uint16_t)1 << 13)
#define CCM_PHYPA_PHY_RESUME_SEL ((uint16_t)1 << 14)
#define CCM_PHYPA_USB_REG_ENDIAN ((uint16_t)1 << 15)

///*** PDCR 0x0c************/
//#define CCM_PDCR_RSTOUTSWPEPORT2_EN                    ((uint32_t)1<<25)
//#define CCM_PDCR_CLKOUTSWPEPORT2_EN                    ((uint32_t)1<<29)

///*** PCFG3 0x14************/
#define CCM_PCFG3_PWM1_EN ((uint32_t)1 << 0)
#define CCM_PCFG3_PWM2_EN ((uint32_t)1 << 1)
#define CCM_PCFG3_PWM3_EN ((uint32_t)1 << 2)
#define CCM_PCFG3_CLKOUT_PUE ((uint32_t)1 << 8)
#define CCM_PCFG3_RSTOUT_PUE ((uint32_t)1 << 9)
#define CCM_PCFG3_TDO_PUE ((uint32_t)1 << 10)
#define CCM_PCFG3_SS2_SWAP ((uint32_t)1 << 13)
#define CCM_PCFG3_GINT37_PS ((uint32_t)1 << 14)
#define CCM_PCFG3_GINT7_IE ((uint32_t)1 << 24)
#define CCM_PCFG3_GINT6_IE ((uint32_t)1 << 25)
#define CCM_PCFG3_GINT5_IE ((uint32_t)1 << 26)
#define CCM_PCFG3_GINT4_IE ((uint32_t)1 << 27)
#define CCM_PCFG3_GINT3_IE ((uint32_t)1 << 28)
#define CCM_PCFG3_GINT2_IE ((uint32_t)1 << 29)
#define CCM_PCFG3_GINT1_IE ((uint32_t)1 << 30)
#define CCM_PCFG3_GINT0_IE ((uint32_t)1 << 31)

///*** RTCCFG12 0x18************/
#define CCM_RTCCFG12_RTC_EN_INTERFACE ((uint32_t)1 << 15)
#define CCM_RTCCFG12_DAY_INT_EN ((uint32_t)1 << 16)
#define CCM_RTCCFG12_HOUR_INT_EN ((uint32_t)1 << 17)
#define CCM_RTCCFG12_MINUTE_INT_EN ((uint32_t)1 << 18)
#define CCM_RTCCFG12_SECOND_INT_EN ((uint32_t)1 << 19)
#define CCM_RTCCFG12_DAY_PULSE_INV ((uint32_t)1 << 20)
#define CCM_RTCCFG12_HOUR_PULSE_INV ((uint32_t)1 << 21)
#define CCM_RTCCFG12_MINUTE_PULSE_INV ((uint32_t)1 << 22)
#define CCM_RTCCFG12_SECOND_PULSE_INV ((uint32_t)1 << 23)

///*** RSTCLKCFG 0x1c************/
#define CCM_RSTCLKCFG_RTC_TESTMODE_EN ((uint32_t)1 << 17)

///*** PMCSR 0x20************/
#define CCM_PMCSR_OSC_2K_CLK_SRC ((uint32_t)1 << 24)
#define CCM_PMCSR_OSC_128K_CLK_SRC ((uint32_t)1 << 25)
#define CCM_PMCSR_LVDT1P8V_SRC ((uint32_t)1 << 26)
#define CCM_PMCSR_LVDT3P3V_SRC ((uint32_t)1 << 27)

#endif /* end __CCM__ */

#define __CPM__
#ifdef __CPM__
/*** CPM **********************************************/

/*sleep config register:SLPCFGR 0x0000 ~ 0x0003*/
#if 1
#define CPM_SLPCFGR_LOW_POWER_MODE ((uint32_t)(0 << 30))
#define CPM_SLPCFGR_RETENTION_MODE (((uint32_t)1 << 30))
#define CPM_SLPCFGR_DEEP_SLEEP_MODE (((uint32_t)1 << 30))
#define CPM_SLPCFGR_HIBERNATION_MODE (((uint32_t)1 << 31))
#define CPM_SLPCFGR_EPORT4_MODULE_CLOCK_SLEEP_EN (((uint32_t)1 << 28)) /**< eport4 module clock enable when stop*/
#define CPM_SLPCFGR_EPORT3_MODULE_CLOCK_SLEEP_EN (((uint32_t)1 << 27)) /**< eport3 module clock enable when stop*/
#define CPM_SLPCFGR_EPORT2_MODULE_CLOCK_SLEEP_EN (((uint32_t)1 << 26)) /**< eport2 module clock enable when stop*/
#define CPM_SLPCFGR_EPORT1_MODULE_CLOCK_SLEEP_EN (((uint32_t)1 << 22)) /**< eport1 module clock enable when stop*/
#define CPM_SLPCFGR_EPORT0_MODULE_CLOCK_SLEEP_EN (((uint32_t)1 << 21)) /**< eport0 module clock enable when stop*/
#define CPM_SLPCFGR_OSCEXT_SLEEP_EN (((uint32_t)1 << 20))              /**< OSCEXT enable when stop*/
#define CPM_SLPCFGR_PMU128K_SLEEP_EN (((uint32_t)1 << 19))             /**< PMU128K enable when stop*/
#define CPM_SLPCFGR_RTC32K_SLEEP_EN (((uint32_t)1 << 16))              /**< RTC32K enable when stop*/
#define CPM_SLPCFGR_VDD33_LDO_ENTER_LOWPOWER_EN (((uint32_t)1 << 18))  /**< VDD LDO enter lowpower when stop*/
#define CPM_SLPCFGR_FLASH_LDO_ENTER_LOWPOWER_EN (((uint32_t)1 << 17))  /**< FLASH LDO enter lowpower when stop*/
#define CPM_SLPCFGR_CARD0_LDO_POWEROFF (((uint32_t)1 << 11))           /**< Card0 LDO poweroff*/
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_1V8 ((uint32_t)(0 << 8))
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_3V0 (((uint32_t)1 << 8))
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_3V3 ((uint32_t)(3 << 8))
//#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_5V0               ((uint32_t)(3<<8))
#define CPM_SLPCFGR_FLASH_LDO_ENTER_LOWPOWER_POWEROFF (((uint32_t)1 << 7)) /**< FLASH LDO poweroff when stop*/
#define CPM_SLPCFGR_FLASH_IP_ENTER_LOWPOWER_EN (((uint32_t)1 << 4))        /**< FLASH IP enter lowpower when stop*/

/*sleep control register:SLPCR 0x0004 ~ 0x0007*/
#define CPM_SLPCR_SLEEP_CONF_MODE (((uint32_t)1 << 29))

#else
#define CPM_SLPCFGR_SLEEP_MODE_POS (30U)          /*!< CPM SLPCFGR: SLEEP MODE Position */
#define CPM_SLPCFGR_SLEEP_MODE_MASK (0xC0000000U) /*!< CPM SLPCFGR: SLEEP MODE Mask */
#define CPM_SLPCFGR_LOW_POWER_MODE (0U << 31)
#define CPM_SLPCFGR_HIBERNATION_MODE (1U << 31)
#define CPM_SLPCFGR_LP_DIS_EN_POS (29U)                              /*!< CPM SLPCFGR: Lowpower Disable Position */
#define CPM_SLPCFGR_LP_DIS_EN_MASK (1U << CPM_SLPCFGR_LP_DIS_EN_POS) /*!< CPM SLPCFGR: Lowpower Disable Mask */
#define CPM_SLPCFGR_EXTFLASH_IPSLP_POS (26U)                         /*!< CPM SLPCFGR: Lowpower Disable Position */
#define CPM_SLPCFGR_EXTFLASH_IPSLP_MASK (0x1C000000U)                /*!< CPM SLPCFGR: Lowpower Disable Mask */
#define CPM_SLPCFGR_EXTFLASH_IPSLP_SSI4_MASK (1U << CPM_SLPCFGR_EXTFLASH_IPSLP_POS)
#define CPM_SLPCFGR_EXTFLASH_IPSLP_SSI5_MASK (1U << 27U)
#define CPM_SLPCFGR_EXTFLASH_IPSLP_SSI6_MASK (1U << 28U)
#define CPM_SLPCFGR_MCC_SLPEN_POS (23U)                                                /*!< CPM SLPCFGR: MCC Sleep Enable Position */
#define CPM_SLPCFGR_MCC_SLPEN_MASK (1U << CPM_SLPCFGR_MCC_SLPEN_POS)                   /*!< CPM SLPCFGR: MCC Sleep Enable Mask */
#define CPM_SLPCFGR_HP_READY_WKPWAIT_POS (22U)                                         /*!< CPM SLPCFGR: Wait HPLDO READY Position */
#define CPM_SLPCFGR_HP_READY_WKPWAIT_MASK (1U << CPM_SLPCFGR_HP_READY_WKPWAIT_POS)     /*!< CPM SLPCFGR: Wait HPLDO READY Mask */
#define CPM_SLPCFGR_WAKEUP_NM_SLPWAIT_POS (21U)                                        /*!< CPM SLPCFGR: Wait WAKEUP NM Position */
#define CPM_SLPCFGR_WAKEUP_NM_SLPWAIT_MASK (1U << CPM_SLPCFGR_WAKEUP_NM_SLPWAIT_POS)   /*!< CPM SLPCFGR: Wait WAKEUP NM Mask */
#define CPM_SLPCFGR_OSCEXT_SLEEP_EN_POS (20U)                                          /*!< CPM SLPCFGR: OSCEXT SLEEP Enable Position */
#define CPM_SLPCFGR_OSCEXT_SLEEP_EN (1U << CPM_SLPCFGR_OSCEXT_SLEEP_EN_POS)            /*!< CPM SLPCFGR: OSCEXT SLEEP Enable Mask */
#define CPM_SLPCFGR_PMU128K_SLEEP_EN_POS (19U)                                         /*!< CPM SLPCFGR: PMU128K SLEEP Enable Position */
#define CPM_SLPCFGR_PMU128K_SLEEP_EN_MASK (1U << CPM_SLPCFGR_PMU128K_SLEEP_EN_POS)     /*!< CPM SLPCFGR: PMU128K SLEEP Enable Mask */
#define CPM_SLPCFGR_RTC32K__SLEEP_EN_POS (16U)                                         /*!< CPM SLPCFGR: RTC32K SLEEP Enable Position */
#define CPM_SLPCFGR_RTC32K_SLEEP_EN_MASK (1U << CPM_SLPCFGR_RTC32K__SLEEP_EN_POS)      /*!< CPM SLPCFGR: RTC32K SLEEP Enable Mask */
#define CPM_SLPCFGR_CARD0_LDO_POWEROFF_POS (11)                                        /*!< CPM SLPCFGR: CARD0 LDO POWEROFF Position */
#define CPM_SLPCFGR_CARD0_LDO_POWEROFF_MASK (1U << CPM_SLPCFGR_CARD0_LDO_POWEROFF_POS) /*!< CPM SLPCFGR: CARD0 LDO POWEROFF Mask */
#define CPM_SLPCFGR_CARD0_LDO_POWER_POS (8)                                            /*!< CPM SLPCFGR: CARD0 LDO POWER Position */
#define CPM_SLPCFGR_CARD0_LDO_POWER_MASK (0x00000300U)                                 /*!< CPM SLPCFGR: CARD0 LDO POWER Mask */
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_1V8 (0U << CPM_SLPCFGR_CARD0_LDO_POWER_POS)
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_3V0 (1U << CPM_SLPCFGR_CARD0_LDO_POWER_POS)
#define CPM_SLPCFGR_CARD0_LDO_VOTAGE_OUT_3V3 (3U << CPM_SLPCFGR_CARD0_LDO_POWER_POS)
#define CPM_SLPCFGR_OTP_IPSLP_POS (4U)                                             /*!< CPM SLPCFGR: OPT IP SLEEP Position */
#define CPM_SLPCFGR_OTP_IPSLP_MASK (1U << CPM_SLPCFGR_OTP_IPSLP_POS)               /*!< CPM SLPCFGR: OPT IP SLEEP Mask */
#define CPM_SLPCFGR_SSI_IDLE_WKPWAIT_POS (1U)                                      /*!< CPM SLPCFGR: WAKEUP WAIT SSI IDLE Position */
#define CPM_SLPCFGR_SSI_IDLE_WKPWAIT_MASK (1U << CPM_SLPCFGR_SSI_IDLE_WKPWAIT_POS) /*!< CPM SLPCFGR: WAKEUP WAIT SSI IDLE Mask */
#define CPM_SLPCFGR_SSI_IDLE_SLPWAIT_POS (0U)                                      /*!< CPM SLPCFGR: SLEEP WAIT SSI IDLE Position */
#define CPM_SLPCFGR_SSI_IDLE_SLPWAIT_MASK (1U << CPM_SLPCFGR_SSI_IDLE_SLPWAIT_POS) /*!< CPM SLPCFGR: SLEEP WAIT SSI IDLE Mask */

/*sleep control register:SLPCR 0x0004 ~ 0x0007*/
#define CPM_SLPCR_SLP_CFG_KEY_POS (30U)                                            /*!< CPM SLPCR: SLEEP CONFIG KEY Position */
#define CPM_SLPCR_SLP_CFG_KEY_MASK (0xC0000000U)                                   /*!< CPM SLPCR: SLEEP CONFIG KEY Mask */
#define CPM_SLPCR_SLP_CFG_MODE_POS (29U)                                           /*!< CPM SLPCR: SLEEP CONFIG MODE Position */
#define CPM_SLPCR_SLP_CFG_MODE_MASK (1U << CPM_SLPCR_SLP_CFG_MODE_POS)             /*!< CPM SLPCR: SLEEP CONFIG MODE Mask */
#endif

/*system clock divider register:SCDIVR 0x0008 ~ 0x000B*/
#define CPM_SCDIVR_CLKOUT_DIV_MASK ((uint32_t)(0xFF00FFFF)) /**< */
#define CPM_SCDIVR_CLKOUT_DIV_SHIFT_MASK (((uint32_t)16))   
#define CPM_SCDIVR_TRACE_DIV_MASK ((uint32_t)(0xFFFF00FF))  /**< */
#define CPM_SCDIVR_TRACE_DIV_SHIFT_MASK ((uint32_t)(8))     
#define CPM_SCDIVR_SYS_DIV_MASK ((uint32_t)(0xFFFFFF00))    /**< */
#define CPM_SCDIVR_SYS_DIV_SHIFT_MASK ((uint32_t)(0))       /**< */

/*periphal clock divider register 1:PCDIVR1 0x000C ~ 0x000F*/
#define CPM_PCDIVR_ARITH_DIV_MASK ((uint32_t)(0xFFFF0FFF)) /**< */
#define CPM_PCDIVR_ARITH_DIV_SHIFT_MASK (((uint32_t)12))   /**< */
#define CPM_PCDIVR_AHB3_DIV_MASK ((uint32_t)(0xFFFFF0FF))  /**< */
#define CPM_PCDIVR_AHB3_DIV_SHIFT_MASK ((uint32_t)(8))     /**< */
#define CPM_PCDIVR_IPS_DIV_MASK ((uint32_t)(0xFFFFFFF0))   /**< */
#define CPM_PCDIVR_IPS_DIV_SHIFT_MASK ((uint32_t)(0))      /**< */

/*periphal clock divider register 2:PCDIVR2 0x0010 ~ 0x0013*/
#define CPM_PCDIVR_TC_DIV_MASK ((uint32_t)(0x0FFFFFFF))      /**< */
#define CPM_PCDIVR_TC_DIV_SHIFT_MASK ((uint32_t)(28))        
#define CPM_PCDIVR_MESH_DIV_MASK ((uint32_t)(0xF0FFFFFF))    /**< */
#define CPM_PCDIVR_MESH_DIV_SHIFT_MASK ((uint32_t)(24))      
#define CPM_PCDIVR_ADC_DIV_MASK ((uint32_t)(0xFFFF0FFF))     /**< */
#define CPM_PCDIVR_ADC_DIV_SHIFT_MASK (((uint32_t)12))       /**< */
#define CPM_PCDIVR_MCC_ADR_DIV_MASK ((uint32_t)(0xFFFFF1FF)) /**< */
#define CPM_PCDIVR_MCC_ADR_DIV_SHIFT_MASK ((uint32_t)(9))    /**< */
#define CPM_PCDIVR_MCC_DIV_MASK ((uint32_t)(0xFFFFFE00))     /**< */
#define CPM_PCDIVR_MCC_DIV_SHIFT_MASK ((uint32_t)(0))        /**< */

/*periphal clock divider register 3:PCDIVR3 0x0010 ~ 0x0013*/
/*clock divider update register��CDIVUPDR 0x0018 ~ 0x001B*/
#define CPM_CDIVUPDR_SYS_DIV_UPDATE (((uint32_t)1 << 1))        /**< sys clk update*/
#define CPM_CDIVUPDR_PERIPHERAL_DIV_UPDATE (((uint32_t)1 << 0)) /**< peripheral clk update*/

/*clock divider enable register��CDIVENR 0x001C ~ 0x001F*/
#define CPM_CDIVENR_I2S_S_DIVEN (((uint32_t)1 << 23))
#define CPM_CDIVENR_I2S_M_DIVEN (((uint32_t)1 << 22))
#define CPM_CDIVENR_CLKOUT_CLK_DIV_EN (((uint32_t)1 << 15))
#define CPM_CDIVENR_TRACE_CLK_DIV_EN (((uint32_t)1 << 14))
#define CPM_CDIVENR_TC_CLK_DIV_EN (((uint32_t)1 << 13))
#define CPM_CDIVENR_MESH_CLK_DIV_EN (((uint32_t)1 << 12))
#define CPM_CDIVENR_ADC_CLK_DIV_EN (((uint32_t)1 << 10))
#define CPM_CDIVENR_MCC_CLK_DIV_EN (((uint32_t)1 << 8))
#define CPM_CDIVENR_ARITH_CLK_DIV_EN (((uint32_t)1 << 3))
#define CPM_CDIVENR_AHB3_CLK_DIV_EN (((uint32_t)1 << 2))
#define CPM_CDIVENR_IPS_CLK_DIV_EN (((uint32_t)1 << 0))

/*oscillator control and status register��OCSR 0x0020 ~ 0x0023*/
#define CPM_OCSR_TRNG_OSCEN ((uint32_t)(0xF << 24))      /**< */
#define CPM_OCSR_PLLNFC_STABLE (((uint32_t)1 << 15))     /**< */
#define CPM_OCSR_PMU2K_STABLE (((uint32_t)1 << 14))      /**< */
#define CPM_OCSR_RTC32K_STABLE (((uint32_t)1 << 13))     /**< */
#define CPM_OCSR_OSCEXT_STABLE (((uint32_t)1 << 12))     /**< */
#define CPM_OCSR_OSC400M_STABLE (((uint32_t)1 << 11))    /**< */
#define CPM_OCSR_USBPHY240M_STABLE (((uint32_t)1 << 10)) /**< */
#define CPM_OCSR_PMU128K_STABLE (((uint32_t)1 << 9))     /**< */
#define CPM_OCSR_OSC8M_STABLE (((uint32_t)1 << 8))       /**< */
#define CPM_OCSR_PLLNFC_EN (((uint32_t)1 << 7))
#define CPM_OCSR_PMU2K_CLK_EN (((uint32_t)1 << 6))
#define CPM_OCSR_RTC32K_CLK_EN (((uint32_t)1 << 5))
#define CPM_OCSR_OSCEXT_CLK_EN (((uint32_t)1 << 4))
#define CPM_OCSR_OSC400M_CLK_EN (((uint32_t)1 << 3))
#define CPM_OCSR_USBPHY240M_CLK_EN (((uint32_t)1 << 2))
#define CPM_OCSR_PMU128K_CLK_EN (((uint32_t)1 << 1))
#define CPM_OCSR_OSC8M_CLK_EN (((uint32_t)1 << 0))

/*clock switch config register: CSWCFGR 0x0024 ~ 0x0027*/
#define CPM_CSWCFGR_OSC8M_SELECT (((uint32_t)1 << 8))            /**< */
#define CPM_CSWCFGR_OSC400M_SELECT (((uint32_t)1 << 9))          /**< */
#define CPM_CSWCFGR_USBPHY240M_SELECT (((uint32_t)1 << 10))      /**< */
#define CPM_CSWCFGR_OSCEXT_SELECT (((uint32_t)1 << 11))          /**< */
#define CPM_CSWCFGR_SOC_CLK_SOURCE_MASK ((uint32_t)(0xFFFFFFFC)) /**< */
#define CPM_CSWCFGR_CLKOUT_SOURCE_SYS ((uint32_t)(0 << 24))      /**< */
#define CPM_CSWCFGR_CLKOUT_SOURCE_ARITH (((uint32_t)1 << 24))    /**< */
#define CPM_CSWCFGR_CLKOUT_SOURCE_PLLNFC ((uint32_t)(2 << 24))   /**< */
#define CPM_CSWCFGR_CLKOUT_SOURCE_OSCL ((uint32_t)(3 << 24))     /**< */

/*core tick timer register:CTICKR 0x0028 ~ 0x002B*/
#define CPM_CTICKR_REFERENCE_CLK_SELECT_MASK (((uint32_t)1 << 25)) /**< */
#define CPM_CTICKR_SKEW_EN (((uint32_t)1 << 24))                   /**< */

/*chip config register:CHIPCFGR:CHIPCFGR 0x002C ~ 0x002F*/
#define CPM_CHIPCFGR_USBPHY_OSC_MODE_AUTO ((uint32_t)(0 << 30))          /**< auto dection oscillator*/
#define CPM_CHIPCFGR_USBPHY_OSC_MODE_AUTO_FOR_SIMU (((uint32_t)1 << 30)) /**< auto dection oscillator for fast simulation*/
#define CPM_CHIPCFGR_USBPHY_OSC_MODE_INTER ((uint32_t)(2 << 30))         /**< select internal oscillator*/
#define CPM_CHIPCFGR_USBPHY_OSC_MODE_EXTER ((uint32_t)(3 << 30))         /**< select external oscillator*/
#define CPM_CHIPCFGR_USBPHY_CONF_SOFTWARE_MASK (((uint32_t)1 << 29))
#define CPM_CHIPCFGR_USBPHY_PLL_SOFTWARE_MASK (((uint32_t)1 << 28))
#define CPM_CHIPCFGR_USBPHY_RESET_SIGNAL_MASK (((uint32_t)1 << 25))
#define CPM_CHIPCFGR_USBPHY_POWER_SWITCH_EN (((uint32_t)1 << 24))
#define CPM_CHIPCFGR_USBPHY_IP_SOFTWARE_MASK (((uint32_t)1 << 23))
#define CPM_CHIPCFGR_PCI_H2L_ISOLATION_SEL_MASK (((uint32_t)1 << 17))
#define CPM_CHIPCFGR_PCI_H2L_ISOLATION_EN (((uint32_t)1 << 16))
#define CPM_CHIPCFGR_RTC1S_CLK_GATE_EN (((uint32_t)1 << 14))
#define CPM_CHIPCFGR_RTC1K_CLK_GATE_EN (((uint32_t)1 << 13))
#define CPM_CHIPCFGR_RTC32K_CLK_GATE_EN (((uint32_t)1 << 12))
#define CPM_CHIPCFGR_RTC32K_ISOLATION_EN (((uint32_t)1 << 11))
#define CPM_CHIPCFGR_RIM_ARST_MASK (((uint32_t)1 << 10))
#define CPM_CHIPCFGR_RIM_RST_MASK (((uint32_t)1 << 9))
#define CPM_CHIPCFGR_RIM_SOFTRST_MASK (((uint32_t)1 << 8))
#define CPM_CHIPCFGR_USBPHY_12M_EN_MASK (((uint32_t)1 << 3))
#define CPM_CHIPCFGR_OSCEXT_PAD_TE (((uint32_t)1 << 2))
#define CPM_CHIPCFGR_OSCEXT_PAD_SF ((uint32_t)(3 << 0))

/*power control register:PWRCR 0x0030 ~ 0x0033*/
#define CPM_PWRCR_VCC_IO_LATCH_CLR_MASK ((uint32_t)1 << 31)
#define CPM_PWRCR_VCC_IO_LATCH_SET_MASK ((uint32_t)1 << 30)
#define CPM_PWRCR_VCC_3V3_LV_DETECT_RESET_EN (((uint32_t)1 << 29))
#define CPM_PWRCR_VCARD0_INTERFACE_ISOLATION_EN (((uint32_t)1 << 25))
#define CPM_PWRCR_VCC_3V3_LVD_POWERDOWN_MASK (((uint32_t)1 << 23))
#define CPM_PWRCR_CARD0_LV_DETECT_RESET_EN (((uint32_t)1 << 9))
#define CPM_PWRCR_VCC_3V3_LV_DETECT_INT_EN (((uint32_t)1 << 15))
#define CPM_PWRCR_CARD0_LV_DETECT_INT_EN (((uint32_t)1 << 13))
#define CPM_PWRCR_CARD0_IE_EN_FAIL (((uint32_t)1 << 11))
#define CPM_PWRCR_CARD0_RE_LVD (((uint32_t)1 << 9))
#define CPM_PWRCR_VCC_OE_LVDT33 (((uint32_t)1 << 7))
#define CPM_PWRCR_CARD0_OE_LVD (((uint32_t)1 << 5))
#define CPM_PWRCR_VCC_3V3_LV_DETECT_EN (((uint32_t)1 << 3))
#define CPM_PWRCR_CARD0_LV_DETECT_EN (((uint32_t)1 << 1))

/*sleep counter register:SLPCNTR 0x0034~ 0x0037*/

/*wake up counter register:WKPCNTR 0x0038~ 0x003B*/

/*multiple clock gate control register:MULTICGTCR ��0x003C ~ 0x003F*/
/*system clock gate control register:SYSCGTCR 0x0040 ~ 0x0043*/
/*ahb3 clock gate control register:AHB3CGTCR 0x0044 ~ 0x0047*/
/*arith clock gate control register:ARITHCGTCR 0x0048 ~ 0x004B*/
/*ips clock gate control register:IPSCGTCR 0x004C ~ 0x004F*/

/*vcc general trim register:VCCGTRIMR 0x0050 ~ 0x0053*/
#define CPM_VCCGTRIMR_DISCHARGE_EN (((uint32_t)1 << 30)) /**< when this bit is set,discharge vd33 when chip switch to poff2 mode*/
#define CPM_VCCGTRIMR_2KHZ_CLK_GATE_EN (((uint32_t)1 << 23))
#define CPM_VCCGTRIMR_CORE_VOLTAGE_MASK (((uint32_t)1 << 15)) /**< when this bit is set, the core voltage is 0.9V*/
#define CPM_VCCGTRIMR_VCC_LATCH_AUTO_SET_MASK (((uint32_t)1 << 13))
#define CPM_VCCGTRIMR_VCC_LATCH_AUTO_CLR_MASK (((uint32_t)1 << 12))
#define CPM_VCCGTRIMR_VCC_LATCH_AUTO_PORCLR (((uint32_t)1 << 11))
#define CPM_VCCGTRIMR_TEST_BIAS_CURRENT_EN (((uint32_t)1 << 7)) /**< test the bias current enable signal*/

/*vcc lv detect trim register:VCCLTRIMR 0x0054 ~ 0x0057*/
#define CPM_VCCLTRIMR_OTP_LVDT_MASK (((uint32_t)1 << 25))
#define CPM_VCCLTRIMR_COARSE_LVD_MODULE_EN (((uint32_t)1 << 24))

/*vcc vref trim register:VCCVTRIMR 0x0058 ~ 0x005B*/
#define CPM_VCCVTRIMR_SLEEP_CONF_REG_PROTECT_EN (((uint32_t)1 << 31))
#define CPM_VCCVTRIMR_POFF2_WAKEUP_SOURCE_USBDET           (((uint32_t)1<<16))
#define CPM_VCCVTRIMR_VREF_STABLE_MASK (((uint32_t)1 << 11))
#define CPM_VCCVTRIMR_VREF_TRIM_EN (((uint32_t)1 << 10))
#define CPM_VCCVTRIMR_VREF_TRIM_VALUE_LOAD_BIT (((uint32_t)1 << 9))
#define CPM_VCCVTRIMR_STORE_VREF_VOLTAGE_VALUE_EN (((uint32_t)1 << 8))

/*vcc core test mode register:VCCCTMR 0x005C ~ 0x005F*/
#define CPM_VCCCTMR_OVERWRITE_CSWCFGR_TRIM_EN (((uint32_t)1 << 29))
#define CPM_VCCCTMR_OVERWRITE_RTCTRIMR_TRIM_EN (((uint32_t)1 << 28))
#define CPM_VCCCTMR_OVERWRITE_RTCSTIMER_TRIM_EN (((uint32_t)1 << 26))
#define CPM_VCCCTMR_OVERWRITE_CARDTRIMR_TRIM_EN (((uint32_t)1 << 24))
#define CPM_VCCCTMR_OVERWRITE_VCCGTRIMR_TRIM_EN (((uint32_t)1 << 23))
#define CPM_VCCCTMR_OVERWRITE_VCCLTRIMR_TRIM_EN (((uint32_t)1 << 22))
#define CPM_VCCCTMR_OVERWRITE_VCCVTRIMR_TRIM_EN (((uint32_t)1 << 21))
#define CPM_VCCCTMR_OVERWRITE_O8MTRIMR_TRIM_EN (((uint32_t)1 << 20))
#define CPM_VCCCTMR_OVERWRITE_O320MTRIMR_TRIM_EN (((uint32_t)1 << 19))
#define CPM_VCCCTMR_OVERWRITE_OSCLSTIMER_TRIM_EN (((uint32_t)1 << 18))
#define CPM_VCCCTMR_OVERWRITE_OSCHSTIMER_TRIM_EN (((uint32_t)1 << 17))
#define CPM_VCCCTMR_OVERWRITE_OSCESTIMER_TRIM_EN (((uint32_t)1 << 16))
#define CPM_VCCCTMR_OVERWRITE_ARITHCGTCR_TRIM_EN (((uint32_t)1 << 13))
#define CPM_VCCCTMR_OVERWRITE_SCDIVR_TRIM_EN (((uint32_t)1 << 11))
#define CPM_VCCCTMR_OVERWRITE_PCDIVR_TRIM_EN (((uint32_t)1 << 10))
#define CPM_VCCCTMR_OVERWRITE_OCSR_TRIM_EN (((uint32_t)1 << 9))
#define CPM_VCCCTMR_CPU_CORE_TEST_MODE_EN (((uint32_t)1 << 7))
#define CPM_VCCCTMR_SOFT_POR (((uint32_t)1 << 3))
#define CPM_VCCCTMR_OFF_MODE2 (((uint32_t)1 << 2))
#define CPM_VCCCTMR_EN_LP (((uint32_t)1 << 0))

/*osc8mhz trim register:O8MTRIMR 0x0060 ~ 0x0063*/


/*card ldo trim trgister:CARDTRIMR 0x006C ~ 0x006F*/
#define CPM_CARDTRIMR_WAKEUP_FILTER_EN (((uint32_t)1 << 30))
#define CPM_CARDTRIMR_WAKEUP_FILTER_BYPASS_EN (((uint32_t)1 << 29))
#define CPM_CARDTRIMR_WAKEUP_FILTER_CLK_GATE_EN (((uint32_t)1 << 28))
#define CPM_CARDTRIMR_WAKEUP_VDD33_PSWEN (((uint32_t)1 << 24))
#define CPM_CARDTRIMR_WAKEUP_ANALOG_FILTER_BYPASS_EN (((uint32_t)1 << 15))
#define CPM_CARDTRIMR_CARD0_REDUCE (((uint32_t)1 << 13))

/*oscl stable time register:OSCLSTIMER 0x0070 ~ 0x0073*/
/*osch stable time register:OSCHSTIMER 0x0074 ~ 0x0077*/
/*osce stable time register:OSCESTIMER 0x0078 ~ 0x007B*/

/*power status register:PWRSR 0x007C ~ 0x007F*/
#define CPM_PWRSR_VCARD_ISOLATION_FLAG (((uint32_t)1 << 26))
#define CPM_PWRSR_VCC3V3_LVD_FLAG (((uint32_t)1 << 23))
#define CPM_PWRSR_CARD0_LVD_FLAG (((uint32_t)1 << 21))
#define CPM_PWRSR_VCC3V3_LVD_REAL_TIME_FLAG (((uint32_t)1 << 19))
#define CPM_PWRSR_CARD0_LVD_REAL_TIME_FLAG (((uint32_t)1 << 17))
#define CPM_PWRSR_CARD0_LVD_FAIL_FLAG (((uint32_t)1 << 15))
#define CPM_PWRSR_VCC_HIGH_POWER_READY_FLAG (((uint32_t)1 << 3))
#define CPM_PWRSR_CARD0_READY_FLAG (((uint32_t)1 << 2))

/*eport sleep control register:EPORTSLPCFGR 0x0080 ~ 0x0083*/
/*eport clock gate control register:EPORTCGTR 0x0084 ~ 0x0087*/
/*eport reset control register:EPORTRSTCR 0x0088 ~ 0x008B*/

/*rtc trim register:RTCTRIMR 0x008C~ 0x008F*/
#define CPM_RTCTRIMR_RTC_TRIM_EN (((uint32_t)1 << 31))
#define CPM_RTCTRIMR_RTC_TRIM_LOAD_EN (((uint32_t)1 << 30))

/*pad wakeup interrupt control register:PADWKINTCR 0x0090~ 0x0093*/
#define CPM_PADWKINTCR_RIM_ARST_RT (((uint32_t)1 << 31))
#define CPM_PADWKINTCR_DBG_PWRUP_RT (((uint32_t)1 << 30))
#define CPM_PADWKINTCR_ISORST_RT (((uint32_t)1 << 29))
#define CPM_PADWKINTCR_TCRST_RT (((uint32_t)1 << 28))
#define CPM_PADWKINTCR_PCI_ATIMER_WAKEUP_SRC_STATUS (((uint32_t)1 << 27))
#define CPM_PADWKINTCR_PCI_DET_WAKEUP_SRC_STATUS (((uint32_t)1 << 26))
#define CPM_PADWKINTCR_WAKE_WAKEUP_SRC_STATUS (((uint32_t)1 << 25))
#define CPM_PADWKINTCR_USB_DET_WAKEUP_SRC_STATUS (((uint32_t)1 << 24))
#define CPM_PADWKINTCR_RIM_ARST_EN (((uint32_t)1 << 23))
#define CPM_PADWKINTCR_DBG_PWRUP_EN (((uint32_t)1 << 22))
#define CPM_PADWKINTCR_ISORST_EN (((uint32_t)1 << 21))
#define CPM_PADWKINTCR_TCRST_EN                            (((uint32_t)1<<20)
#define CPM_PADWKINTCR_PCI_ATIMER_WAKEUP_SRC_EN (((uint32_t)1 << 19))
#define CPM_PADWKINTCR_PCI_DET_WAKEUP_SRC_EN (((uint32_t)1 << 18))
#define CPM_PADWKINTCR_WAKE_WAKEUP_SRC_EN (((uint32_t)1 << 17))
#define CPM_PADWKINTCR_USB_DET_WAKEUP_SRC_EN (((uint32_t)1 << 16))
#define CPM_PADWKINTCR_RIM_ARST_INTM (((uint32_t)1 << 15))
#define CPM_PADWKINTCR_DBG_PWRUP_INTM (((uint32_t)1 << 14))
#define CPM_PADWKINTCR_ISORST_INTM (((uint32_t)1 << 13))
#define CPM_PADWKINTCR_TCRST_INTM (((uint32_t)1 << 12))
#define CPM_PADWKINTCR_PCI_ATIMER_WAKEUP_SRC_INT_EN (((uint32_t)1 << 11))
#define CPM_PADWKINTCR_PCI_DET_WAKEUP_SRC_INT_EN (((uint32_t)1 << 10))
#define CPM_PADWKINTCR_WAKE_WAKEUP_SRC_INT_EN (((uint32_t)1 << 9))
#define CPM_PADWKINTCR_USB_DET_WAKEUP_SRC_INT_EN (((uint32_t)1 << 8))
#define CPM_PADWKINTCR_RIM_ARST_STAT (((uint32_t)1 << 7))
#define CPM_PADWKINTCR_DBG_PWRUP_STAT (((uint32_t)1 << 6))
#define CPM_PADWKINTCR_ISORST_STAT (((uint32_t)1 << 5))
#define CPM_PADWKINTCR_TCRST_STAT (((uint32_t)1 << 4))
#define CPM_PADWKINTCR_PCI_ATIMER_WAKEUP_SRC_INT_FLAG (((uint32_t)1 << 3))
#define CPM_PADWKINTCR_PCI_DET_WAKEUP_SRC_INT_FLAG (((uint32_t)1 << 2))
#define CPM_PADWKINTCR_WAKE_WAKEUP_SRC_INT_FLAG (((uint32_t)1 << 1))
#define CPM_PADWKINTCR_USB_DET_WAKEUP_SRC_INT_FLAG (((uint32_t)1 << 0))

/*wakeup filter counter register:FILTCNTR 0x0094~ 0x0097*/
/*card power on counter register:CARDPOCR 0x0098~ 0x009B*/
/*rtc 32k stable time register:RTCSTIMER 0x009C~ 0x009F*/
/*mem power down sleep control register:MPDSLPCR 0x00A0 ~ 0x00A3*/
/*multiple reset control register:MULTIRSTCR 0x00AC ~ 0x00AF*/
/*system reset control register:SYSRSTCR 0x00B0~ 0x00B3*/
/*ahb3 reset control register:AHB3RSTCR 0x00B4~ 0x00B7*/
/*arith reset control register:ARITHRSTTCR 0x00B8 ~ 0x00BB*/
/*ips reset control register:IPRSTCR 0x00BC ~ 0x00BF*/

/*sleep config register 2:SLPCFGR2 0x00C0 ~ 0x00C3*/
#define CPM_SLPCFGR2_RIM_ARST_INTM_SGL (((uint32_t)1 << 23))
#define CPM_SLPCFGR2_DBG_PWRUP_INTM_SGL (((uint32_t)1 << 22))
#define CPM_SLPCFGR2_ISORST_INTM_SGL (((uint32_t)1 << 21))
#define CPM_SLPCFGR2_TCRST_INTM_SGL (((uint32_t)1 << 20))
#define CPM_SLPCFGR2_PCI_ATIMER_WAKEUP_SRC_SGL_INT_EN (((uint32_t)1 << 19))
#define CPM_SLPCFGR2_PCI_DET_WAKEUP_SRC_SGL_INT_EN (((uint32_t)1 << 18))
#define CPM_SLPCFGR2_WAKE_WAKEUP_SRC_SGL_INT_EN (((uint32_t)1 << 17))
#define CPM_SLPCFGR2_USB_DET_WAKEUP_SRC_SGL_INT_EN (((uint32_t)1 << 16))
#define CPM_SLPCFGR2_TRNG_SLPEN (((uint32_t)1 << 15))
#define CPM_SLPCFGR2_OTP_IDLE_WKPWAIT (((uint32_t)1 << 14))
#define CPM_SLPCFGR2_OTP_IDLE_SLPWAIT (((uint32_t)1 << 13))
#define CPM_SLPCFGR2_CACHE_IDLE_SLPWAIT (((uint32_t)1 << 12))
#define CPM_SLPCFGR2_CORE_F_CLK_SLEEP_EN (((uint32_t)1 << 11))
#define CPM_SLPCFGR2_CLKOUT_CLK_SLEEP_EN (((uint32_t)1 << 10))
#define CPM_SLPCFGR2_CPM_IPS_CLK_SLEEP_EN (((uint32_t)1 << 9))
#define CPM_SLPCFGR2_TC_CLK_SLEEP_EN (((uint32_t)1 << 8))
#define CPM_SLPCFGR2_PMURTC_SLPEN (((uint32_t)1 << 7))
#define CPM_SLPCFGR2_CAN_IDLE_SLPWAIT (((uint32_t)1 << 6))

/*power down counter register:PDNCNTR 0x00D0 ~ 0x00D3*/

/*power down counter register:PONCNTR 0x00D4 ~ 0x00D7*/

/*periphal clock divider register 4:PCDIVR4 0x00D8 ~ 0x00DB*/

/*pll nfc config register 4:PLLNFCCFGR 0x00E0 ~ 0x00E3*/
#define CPM_PLLNFCCFGR_TEST_PORT_EN (((uint32_t)1 << 26))
#define CPM_PLLNFCCFGR_TEST_EN (((uint32_t)1 << 25))
#define CPM_PLLNFCCFGR_EN_XTAL (((uint32_t)1 << 24))

/*pll nfc time stable register 4:PLLNFCCFGR 0x00E4 ~ 0x00E7*/

#endif /* end __CPM__ */

#define __CRC__
#ifdef __CRC__
/*** CRC **********************************************/
#define CRC_MODE_CRC_32                 ((uint32_t)4)                  /**< CRCģʽ32   */
#define CRC_MODE_CRC_16                 ((uint32_t)2)                  /**< CRCģʽ16   */
#define CRC_MODE_CRC_8                  ((uint32_t)1)                  /**< CRCģʽ8   */
#define CRC_MODE_MASK                     ((uint32_t)0x1FFFFFFF)         /**< CRCģʽ���� */
#define CRC_MODE_UPDATA                 (((uint32_t)1 << 28))          /**< CRC���³�ʼ���� */
#define CRC_MODE_SOURCE_SEL_DMAC_WRITE     (((uint32_t)1 << 27))            /**< CRC����ͨ��DMAC���� */
#define CRC_MODE_BIG_ENDING             (((uint32_t)1 << 26))          /**< CRC���ģʽ */
#define CRC_MODE_BYTE_SWAP                 (((uint32_t)1 << 25))          /**< CRC�ַ��л�*/
#define CRC_EDMAC_SEL                     (((uint32_t)1 << 24))          /**< CRC���ݲ���EDMAC����*/
#define CRC_EDMAC_UPDATA                 (((uint32_t)1 << 20))          /**< CRC EDMACģʽ�����ݸ���*/
#define CRC_EDMAC_CRCLAT                 (((uint32_t)1 << 19))          /**< CRC EDMACģʽ������CRC_OK״̬*/
#define CRC_DECODE                         (((uint32_t)1 << 18))          /**< CRC ����ģʽ*/
#define CRC_SEND_CRC_CODE_EN             (((uint32_t)1 << 17))          /**< CRC ����CRC����*/
#define CRC_WRITE_CRC_CODE_EN             (((uint32_t)1 << 16))          /**< CRC ����CRC����*/
#define CRC_EDMAC_SEND_CODE_BS             (((uint32_t)1 << 9))           /**< CRC ����CRC�ֽڽ�������*/
#define CRC_EDMAC_DEC_CODE_BS             (((uint32_t)1 << 8))           /**< CRC ����CRC�ֽڽ�������*/
#define CRC_CRCLAT_ERR                     (((uint32_t)1 << 1))           /**< CRC �������*/
#define CRC_OK                             (((uint32_t)1 << 0))           /**< CRC ��ȷ���� */

#endif /* end __CRC__ */

#define __DMAC__
#ifdef __DMAC__
/*** DMAC **********************************************/
/*DMAC_CTRLn*/
#define DMAC_INT_MIN (((uint32_t)1 << 31))
#define DMAC_LLP_SRC_EN (((uint32_t)1 << 28))             
#define DMAC_LLP_DST_EN (((uint32_t)1 << 27))             
#define DMAC_TT_FC_MASK ((uint32_t)(0x00700000))          /**< */
#define DMAC_TT_FC_SHIFT_MASK ((uint32_t)(20))            /**<   */
#define DMAC_TT_FC_BITS_MASK ((uint32_t)(0xFF8FFFFF))     /**< */
#define DMAC_SRC_MSIZE_MASK ((uint32_t)(0x0001C000))      /**< */
#define DMAC_SRC_MSIZE_SHIFT_MASK (((uint32_t)14))        /**< */
#define DMAC_SRC_MSIZE_BITS_MASK ((uint32_t)(0xFFFE3FFF)) /**< */

#define DMAC_DEST_MSIZE_MASK ((uint32_t)(0x00003800))      /**< */
#define DMAC_DEST_MSIZE_SHIFT_MASK (((uint32_t)11))        /**<   */
#define DMAC_DEST_MSIZE_BITS_MASK ((uint32_t)(0xFFFC7FFF)) /**< */

#define DMAC_SINC_INC (((uint32_t)1 << 0))
#define DMAC_SINC_DEC                                      (((uint32_t)1<<9)
#define DMAC_SINC_NO_CHANGE (((uint32_t)1 << 10))
#define DMAC_SINC_INC_MASK ((uint32_t)(0x00000600))      /**< */
#define DMAC_SINC_INC_SHIFT_MASK ((uint32_t)(9))         /**<   */
#define DMAC_SINC_INC_BITS_MASK ((uint32_t)(0xFFFFF9FF)) /**< */

#define DMAC_DINC_INC (((uint32_t)1 << 0))
#define DMAC_DINC_DEC                                      (((uint32_t)1<<7)
#define DMAC_DINC_NO_CHANGE (((uint32_t)1 << 8))
#define DMAC_DINC_INC_MASK ((uint32_t)(0x00000180))      /**< */
#define DMAC_DINC_INC_SHIFT_MASK ((uint32_t)(7))         
#define DMAC_DINC_INC_BITS_MASK ((uint32_t)(0xFFFFFE7F)) /**< */

#define DMAC_SRC_TR_WIDTH_MASK ((uint32_t)(0x00000070))      /**< */
#define DMAC_SRC_TR_WIDTH_SHIFT_MASK ((uint32_t)(4))         
#define DMAC_SRC_TR_WIDTH_BITS_MASK ((uint32_t)(0xFFFFFF1F)) /**< */
#define DMAC_DST_TR_WIDTH_MASK ((uint32_t)(0x00000007))      /**< */
#define DMAC_DST_TR_WIDTH_SHIFT_MASK (((uint32_t)1))         
#define DMAC_DST_TR_WIDTH_BITS_MASK ((uint32_t)(0xFFFFFFF1)) /**< */
#define DMAC_INT_EN (((uint32_t)1 << 0))
/*DMA_CFGn*/
#define DMAC_MAX_ABRS_MASK ((uint32_t)(0x3FF00000))
#define DMAC_MAX_ABRS_SHIFT_MASK ((uint32_t)(20)) /* */
#define DMAC_MAX_ABRS_BITS_MASK ((uint32_t)(0xC00FFFFF))
#define DMAC_HS_SEL_SRC (((uint32_t)1 << 11))
#define DMAC_HS_SEL_DST (((uint32_t)1 << 10))
#define DMAC_FIFO_EMPTY (((uint32_t)1 << 9))
#define DMAC_CH_SUSP (((uint32_t)1 << 8))

#define DMAC_CH_PRIOR_MASK ((uint32_t)(0x000000E0))
#define DMAC_CH_PRIOR_SHIFT_MASK ((uint32_t)(5)) /* */
#define DMAC_CH_PRIOR_BITS_MASK ((uint32_t)(0xFFFFFF1F))

/*DMA_CFG_HIGHn*/
#define DMAC_DST_PER_MASK ((uint32_t)(0x00007800))
#define DMAC_DST_PER_SHIFT_MASK (((uint32_t)11)) /* */
#define DMAC_DST_PER_BITS_MASK ((uint32_t)(0xFFFF87FF))

#define DMAC_SRC_PER_MASK ((uint32_t)(0x00000780))
#define DMAC_SRC_PER_SHIFT_MASK ((uint32_t)(7)) /* */
#define DMAC_SRC_PER_BITS_MASK ((uint32_t)(0xFFFFF87F))

#define DMAC_FC_MODE (((uint32_t)1 << 0))

/**/
#define DMAC_CH_WE_EN_SHIFT_MASK ((uint32_t)(8)) /* */
#define DMAC_CH_EN_MASK ((uint32_t)(0x0000000F))
#define DMAC_EN ((uint8_t)(1 << 0))
/**/

#endif /* end __DMAC__ */

#define __EDMAC__
#ifdef __EDMAC__
/*** EDMAC **********************************************/
/*EDMACCR*/
#define EDMAC_PIPELINE_EN (((uint32_t)1 << 31))  /**< */
#define EDMAC_SPI_HW (((uint32_t)1 << 30))       /**< */
#define EDMAC_PRIOR_CHG_EN (((uint32_t)1 << 29)) /**< */
#define EDMAC_PRIOR (((uint32_t)1 << 28))        /**< */
#define EDMAC_SPI_WROPT_EN (((uint32_t)1 << 27)) /**< */
#define EDMAC_INFINITY_EN (((uint32_t)1 << 26))  /**< */
#define EDMAC_SPI_FIFO_PRE_LOAD_3 (((uint32_t)1 << 25))

#define EDMAC_MAJ_DONE_IT_EN (((uint32_t)1 << 24))                      /**<                                            */
#define EDMAC_MAJ_DONE_IT_DIS ((uint32_t) ~(1 << EDMAC_MAJ_DONE_IT_EN)) /**<                                            */

#define EDMAC_MAJ_CRC_SEL_MAJOR (((uint32_t)1 << 23))                        /**< operation takes place when major loop ends */
#define EDMAC_MAJ_CRC_SEL_MINOR ((uint32_t) ~(1 << EDMAC_MAJ_CRC_SEL_MAJOR)) /**< operation takes place when minor loop ends */

#define EDMAC_CRC_CHANNEL_EN (((uint32_t)1 << 22))                                  /**<                                            */
#define EDMAC_CRC_CHANNEL_DIS ((uint32_t) ~(1 << EDMAC_CRC_CHANNEL_EN))             /**<                                            */
#define EDMAC_SEND_CRC_CHANNEL_EN (((uint32_t)1 << 21))                             /**<                                            */
#define EDMAC_SEND_CRC_CHANNEL_DIS ((uint32_t) ~(1 << EDMAC_SEND_CRC_CHANNEL_EN))   /**<                                            */
#define EDMAC_WRITE_CRC_CHANNEL_EN (((uint32_t)1 << 20))                            /**<                                            */
#define EDMAC_WRITE_CRC_CHANNEL_DIS ((uint32_t) ~(1 << EDMAC_WRITE_CRC_CHANNEL_EN)) /**<                                            */
#define EDMAC_LINK_SRC_SEL_MASK ((uint32_t)(0xFFF9FFFF))                            /**<                                            */
#define EDMAC_LINK_SRC_SEL_SHIFT_MASK ((uint8_t)(1 << 17))
/**<                                                         */
#define EDMAC_LINK_SRC_EDMAC0_CH0_DONE ((uint8_t)(0x00 << EDMAC_LINK_SRC_SEL_MASK)) /**<                                            */
#define EDMAC_LINK_SRC_EDMAC0_CH1_DONE ((uint8_t)( (uint32_t)1 << EDMAC_LINK_SRC_SEL_MASK)) /**<                                            */
#define EDMAC_LINK_SRC_EDMAC1_CH0_DONE ((uint8_t)(0x02 << EDMAC_LINK_SRC_SEL_MASK)) /**<                                            */
#define EDMAC_LINK_SRC_EDMAC1_CH1_DONE ((uint8_t)(0x03 << EDMAC_LINK_SRC_SEL_MASK)) /**<                                            */

#define EDMAC_LINK_EN (((uint32_t)1 << 16))                                                  /**<                                            */
#define EDMAC_LINK_DIS ((uint32_t)(EDMAC_LINK_EN))                                           /**<                                            */
#define EDMAC_COMPARE_EN (((uint32_t)1 << 15))                                               /**< ���ݱȽ�ʹ��                               */
#define EDMAC_COMPARE_DIS ((uint32_t)(EDMAC_COMPARE_EN))                                     /**< ���ݱȽϽ�ֹ                               */
#define EDMAC_COMPARE_SKIP_EN (((uint32_t)1 << 14))                                          /**< �������ݱȽ�ʹ��                           */
#define EDMAC_COMPARE_SKIP_DIS ((uint32_t)(EDMAC_COMPARE_SKIP_EN))                           /**< �������ݱȽ�ʹ��                           */
#define EDMAC_PRELOAD_DIS (((uint32_t)1 << 13))                                              /**< Ԥ�������ݽ�ֹ                             */
#define EDMAC_PRELOAD_EN ((uint32_t)(~EDMAC_PRELOAD_DIS))                                    /**< Ԥ��������ʹ��                             */
#define EDMAC_MEM_TRANS_CRC_EN (((uint32_t)1 << 12))                                         /**<                                            */
#define EDMAC_MEM_TRANS_CRC_DIS ((uint32_t)(~EDMAC_MEM_TRANS_CRC_EN))                        /**<                                            */
#define EDMAC_PERIPHERAL_NUMBER_MASK ((uint32_t)(0xFFFFF0FF))                                /**<                                            */
#define EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK ((uint8_t)(1 << 8))                               /**<                                            */
#define EDMAC_PERIPHERAL_TYPE_SPI1 ((uint8_t)(0x00 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:edmac1                           */
#define EDMAC_PERIPHERAL_TYPE_SPI2 ((uint8_t)( (uint32_t)1 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:edmac2                           */
#define EDMAC_PERIPHERAL_TYPE_USI1 ((uint8_t)(0x02 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:USI1                             */
#define EDMAC_PERIPHERAL_TYPE_USI3 ((uint8_t)(0x04 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:USI3                             */
#define EDMAC_PERIPHERAL_TYPE_USI2 ((uint8_t)(0x03 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:USI2                             */
#define EDMAC_PERIPHERAL_TYPE_AES ((uint8_t)(0x05 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))    /**< EDAMC�豸:AES                              */
#define EDMAC_PERIPHERAL_TYPE_DES ((uint8_t)(0x06 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))    /**< EDAMC�豸:DES                              */
#define EDMAC_PERIPHERAL_TYPE_SM1 ((uint8_t)(0x07 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))    /**< EDAMC�豸:SM1                              */
#define EDMAC_PERIPHERAL_TYPE_SCI1 ((uint8_t)(0x08 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:SCI1                             */
#define EDMAC_PERIPHERAL_TYPE_SMS4 ((uint8_t)(0x09 << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:SM4                              */
#define EDMAC_PERIPHERAL_TYPE_SHA ((uint8_t)(0x0A << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))    /**< EDAMC�豸:SHA                              */
#define EDMAC_PERIPHERAL_TYPE_SSF33 ((uint8_t)(0x0B << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))  /**< EDAMC�豸:SSF33                            */
#define EDMAC_PERIPHERAL_TYPE_CRYPTO ((uint8_t)(0x0C << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK)) /**< EDAMC�豸:CRYPTO                           */
#define EDMAC_PERIPHERAL_TYPE_SCI2 ((uint8_t)(0x0D << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:SCI2                             */
#define EDMAC_PERIPHERAL_TYPE_SPI3 ((uint8_t)(0x0E << EDMAC_PERIPHERAL_NUMBER_SHIFT_MASK))   /**< EDAMC�豸:SPI3                             */

#define EDMAC_CHANNEL_PERIPHERAL_SPI1 ((uint8_t)(0x00))                                       /**< EDAMC�豸:edmac1                       */
#define EDMAC_CHANNEL_PERIPHERAL_SPI2 ((uint8_t)( (uint32_t)1))                                       /**< EDAMC�豸:edmac2                       */
#define EDMAC_CHANNEL_PERIPHERAL_USI1 ((uint8_t)(0x02))                                       /**< EDAMC�豸:USI1                         */
#define EDMAC_CHANNEL_PERIPHERAL_USI2 ((uint8_t)(0x03))                                       /**< EDAMC�豸:USI2                         */
#define EDMAC_CHANNEL_PERIPHERAL_AES ((uint8_t)(0x05))                                        /**< EDAMC�豸:AES                          */
#define EDMAC_CHANNEL_PERIPHERAL_DES ((uint8_t)(0x06))                                        /**< EDAMC�豸:DES                          */
#define EDMAC_CHANNEL_PERIPHERAL_SM1 ((uint8_t)(0x07))                                        /**< EDAMC�豸:SM1                          */
#define EDMAC_CHANNEL_PERIPHERAL_UART1 ((uint8_t)(0x08))                                      /**< EDAMC�豸:SCI1                         */
#define EDMAC_CHANNEL_PERIPHERAL_SMS4 ((uint8_t)(0x09))                                       /**< EDAMC�豸:SM4                          */
#define EDMAC_CHANNEL_PERIPHERAL_SHA ((uint8_t)(0x0A))                                        /**< EDAMC�豸:SHA                          */
#define EDMAC_CHANNEL_PERIPHERAL_UART3 ((uint8_t)(0x0B))                                      /**< EDAMC�豸:SSF33                        */
#define EDMAC_CHANNEL_PERIPHERAL_CRYPTO ((uint8_t)(0x0C))                                     /**< EDAMC�豸:CRYPTO                       */
#define EDMAC_CHANNEL_PERIPHERAL_UART2 ((uint8_t)(0x0D))                                      /**< EDAMC�豸:SCI2                         */
#define EDMAC_CHANNEL_PERIPHERAL_SPI3 ((uint8_t)(0x0E))                                       /**< EDAMC�豸:SPI3                         */
#define EDMAC_CHANNEL_PERIPHERAL_ZUC ((uint8_t)(0x0F))                                        /**< EDAMC�豸:SPI3                         */
#define EDMAC_START_IT_EN (((uint32_t)1 << 7))                                                /**< EDMAC�����ж�:ʹ��                     */
#define EDMAC_START_IT_DIS ((uint32_t)(~(1 << EDMAC_START_IT_EN)))                            /**< EDMAC����ж� ʹ��                     */
#define EDMAC_DIR_MASK ((uint32_t)(0xFFFFFF9F))                                               /**< */
#define EDMAC_DIR_SHIFT_MASK ((uint8_t)(1 << 5))                                              /**< */
#define EDMAC_TTYPE_SRAM_TO_SRAM ((uint8_t)(0x00 << EDMAC_DIR_SHIFT_MASK))                    /**< EDMAC��������:��RAM��RAM               */
#define EDMAC_TTYPE_PERIPHERAL_TO_SRAM ((uint8_t)( (uint32_t)1 << EDMAC_DIR_SHIFT_MASK))              /**< EDMAC��������:���豸��RAM              */
#define EDMAC_TTYPE_SRAM_TO_PERIPHERAL ((uint8_t)(0x02 << EDMAC_DIR_SHIFT_MASK))              /**< EDMAC��������:��RAM���豸              */
#define EDMAC_TTYPE_BOTH ((uint8_t)(0x03 << EDMAC_DIR_SHIFT_MASK))                            /**< EDMAC��������:��RAM���豸�����豸��RAM */
#define EDMAC_DIR_SRAM_TO_SRAM ((uint8_t)(1 << 0x00))                                         /**< EDMAC��������:��RAM��RAM               */
#define EDMAC_DIR_PERIPHERAL_TO_SRAM ((uint8_t)(1 << 0x01))                                   /**< EDMAC��������:���豸��RAM              */
#define EDMAC_DIR_SRAM_TO_PERIPHERAL ((uint8_t)(1 << 0x02))                                   /**< EDMAC��������:��RAM���豸              */
#define EDMAC_DIR_BOTH ((uint8_t)(1 << 0x03))                                                 /**< EDMAC��������:��RAM���豸�����豸��RAM */
#define EDMAC_SPI_FIFO_PRELOAD_MASK ((uint32_t)(0xFFFFFFF3))                                  /**<                                        */
#define EDMAC_SPI_FIFO_PRELOAD_SHIFT_MASK ((uint8_t)(1 << 2))                                 /**<                                        */
#define EDMAC_SPI_FIFO_PRELOAD_NOT ((uint32_t)(0x00 << EDMAC_SPI_FIFO_PRELOAD_SHIFT_MASK))    /**<                                        */
#define EDMAC_SPI_FIFO_PRELOAD_2BYTES ((uint32_t)( (uint32_t)1 << EDMAC_SPI_FIFO_PRELOAD_SHIFT_MASK)) /**<                                        */
#define EDMAC_SPI_FIFO_PRELOAD_4BYTES ((uint32_t)(0x02 << EDMAC_SPI_FIFO_PRELOAD_SHIFT_MASK)) /**<                                        */
#define EDMAC_SPI_FIFO_PRELOAD_8BYTES ((uint32_t)(0x03 << EDMAC_SPI_FIFO_PRELOAD_SHIFT_MASK)) /**<                                        */

#define EDMAC_VALID_FLAG (((uint32_t)1 << 1))                             /**< EDAMC VALID��־                        */
#define EDMAC_UNVALID_FLAG ((uint32_t)(~(1 << EDMAC_VALID_FLAG)))         /**< EDMAC UNVALID��־                      */
#define EDMAC_MIN_DONE_IT_EN (((uint32_t)1 << 0))                         /**<                                        */
#define EDMAC_MIN_DONE_IT_DIS ((uint32_t) ~((1 << EDMAC_MIN_DONE_IT_EN))) /**<                                        */

/*EDMACCSR*/
#define EDMAC_SSF_SPI1_FLAG (((uint32_t)1 << 31)) /**< EDAMC SPI SS λ                        */
#define EDMAC_SSF_SPI2_FLAG (((uint32_t)1 << 30)) /**< EDAMC SPI SS λ                        */
#define EDMAC_SSF_SPI3_FLAG (((uint32_t)1 << 29)) /**< EDAMC SPI SS λ                        */
#define EDMAC_SSF_SPI4_FLAG (((uint32_t)1 << 28)) /**< EDAMC SPI SS λ                        */

#define EDMAC_EN (((uint32_t)1 << 16))           /**< EDAMC ����ʹ��                         */
#define EDMAC_DIS ((uint32_t)(~(1 << EDMAC_EN))) /**< EDAMC ���ܽ�ֹ                         */
#define EDMAC_FLAG_FAIL (((uint32_t)1 << 15))    /**< EDAMC                                  */
#define EDMAC_FLAG_SCHNUM (((uint32_t)1 << 7))   /**< EDAMC ����ͨ��λ                       */
#define EDMAC_FLAG_DCHNUM (((uint32_t)1 << 6))   /**< EDAMC ���ͨ��λ                       */
#define EDMAC_FLAG_MAJ_DONE (((uint32_t)1 << 3)) /**< EDMAC                                  */
#define EDMAC_FLAG_START (((uint32_t)1 << 2))    /**< EDMAC                                  */
#define EDMAC_FLAG_MIN_DONE (((uint32_t)1 << 1)) /**< EDMAC                                  */
#define EDMAC_FLAG_BUSY (((uint32_t)1 << 0))     /**< EDMAC                                  */
/*EDMACRBAR*/
#define EDMAC_READ_BUFFER_INC_EN (((uint32_t)1 << 31))                           /**< �������ַ����ʹ��                     */
#define EDMAC_READ_BUFFER_INC_DIS ((uint32_t)(~(1 << EDMAC_READ_BUFFER_INC_EN))) /**< �������ַ������ֹ                     */
#define EDMAC_READ_BUFFER_DEC_EN (((uint32_t)1 << 30))                           /**< д�����ַ�Լ�ʹ��                     */
#define EDMAC_READ_BUFFER_DEC_DIS ((uint32_t)(~(1 << EDMAC_READ_BUFFER_DEC_EN))) /**< д�����ַ�Լ���ֹ                     */
#define EDMAC_READ_BUFFER_BASE_ADD_MASK ((uint32_t)(0xFFF00000))                 /**<                                        */
#define EDMAC_READ_BUFFER_BASE_ADD_SHIFTMASK ((uint8_t)(1 << 0))                 /**<                                        */
/*EDMACWBAR*/
#define EDMAC_WRITE_BUFFER_INC_EN (((uint32_t)1 << 31))                            /**< д�����ַ����ʹ��                     */
#define EDMAC_WRITE_BUFFER_INC_DIS ((uint32_t)(~(1 << EDMAC_WRITE_BUFFER_INC_EN))) /**< д�����ַ������ֹ                     */
#define EDMAC_WRITE_BUFFER_DEC_EN (((uint32_t)1 << 30))                            /**< д�����ַ�Լ�ʹ��                     */
#define EDMAC_WRITE_BUFFER_DEC_DIS ((uint32_t)(~(1 << EDMAC_WRITE_BUFFER_DEC_EN))) /**< д�����ַ�Լ���ֹ                     */
#define EDMAC_WRITE_BUFFER_BASE_ADD_MASK ((uint32_t)(0xFFF00000))                  /**<                                        */
#define EDMAC_WRITE_BUFFER_BASE_ADD_SHIFTMASK ((uint8_t)(1 << 0))

#define EDMAC_MINOR_TRANSFER_DATA_SUM_MASK ((uint32_t)(0xFFF00000))   /**<                                        */
#define EDMAC_MINOR_TRANSFER_DATA_SUM_SHIFT_MASK (((uint32_t)1 << 0)) /**<                                        */
#define EDMAC_MINOR_TRANSFER_DATA_CNT_MASK ((uint32_t)(0xFFF00000))   /**<                                        */
#define EDMAC_MINOR_TRANSFER_DATA_CNT_SHIFT_MASK (((uint32_t)1 << 0)) /**<                                        */
#define EDMAC_MAJOR_TRANSFER_DATA_SUM_MASK ((uint32_t)(0xFFF00000))   /**<                                        */
#define EDMAC_MAJOR_TRANSFER_DATA_SUM_SHIFT_MASK (((uint32_t)1 << 0)) /**<                                        */
#define EDMAC_MAJOR_TRANSFER_DATA_CNT_MASK ((uint32_t)(0xFFF00000))   /**<                                        */
#define EDMAC_MAJOR_TRANSFER_DATA_CNT_SHIFT_MASK (((uint32_t)1 << 0)) /**<                                        */
#define EDMAC_PERIPHERAL_ADD_MASK ((uint32_t)(0xFFFF0000))            /**<                                        */
#define EDMAC_PERIPHERAL_ADD_SHIFT_MASK (((uint32_t)1 << 0))          /**<                                        */

/*EDMACRBARSTEP*/
#define EDMAC_READ_BUFFER_ADD_STEP_EN (((uint32_t)1 << 31))
#define EDMAC_READ_BUFFER_ADD_DECREASE (((uint32_t)1 << 30))
#define EDMAC_READ_BUFFER_ADD_STEP_MASK ((uint32_t)(0xFFFF0000))  /**<                                        */
#define EDMAC_READ_BUFFER_ADD_STEP_SHIFTMASK (((uint32_t)1 << 0)) /**<                                        */
/*EDMACWBARSTEP*/
#define EDMAC_WRITE_BUFFER_ADD_STEP_EN (((uint32_t)1 << 31))
#define EDMAC_WRITE_BUFFER_ADD_DECREASE (((uint32_t)1 << 30))
#define EDMAC_WRITE_BUFFER_ADD_STEP_MASK ((uint32_t)(0xFFFF0000))  /**<                                        */
#define EDMAC_WRITE_BUFFER_ADD_STEP_SHIFTMASK (((uint32_t)1 << 0)) /**<                                        */
/*LASTMINSUMR*/
#define EDMAC_LAST_MINUM_SUM_EN (((uint32_t)1 << 31))
#define EDMAC_LAST_MINUM_SUM_MASK ((uint32_t)(0xFFFF0000)) /**<                                        */
#define EDMAC_WRITE_BUFFER_ADD_STEP_SHIFTMASK (((uint32_t)1 << 0))

#endif /* end __EDMAC__ */

#define __EFLASH__
#ifdef __EFLASH__
#define EFLASH_EFCR_DISECC ((uint32_t)0x01 << 31)
#define EFLASH_EFCR_INFOSWITCH ((uint32_t)0x01 << 30)
#define EFLASH_EFCR_AHB_ERROR_RES ((uint32_t)0x01 << 29)
#define EFLASH_EFCR_RWW_RES ((uint32_t)0x01 << 28)

#define EFLASH_EFAPR_WPASSWD_SHIFT (8)
#define EFLASH_EFAPR_IOAP_SHIFT (4)
#define EFLASH_EFAPR_MOAP_SHIFT (0)

#define EFLASH_EFSTAT_PWRRDY ((uint32_t)0x01 << 31)
#define EFLASH_EFSTAT_GRD_READ_VLD ((uint32_t)0x01 << 30)
#define EFLASH_EFSTAT_EFM_IDLE ((uint32_t)0x01 << 15)
#define EFLASH_EFSTAT_FLASH0_SLEEP ((uint32_t)0x01 << 6)
#define EFLASH_EFSTAT_ECC_ERROR0 ((uint32_t)0x01 << 5)
#define EFLASH_EFSTAT_RDWW0 ((uint32_t)0x01 << 4)
#define EFLASH_EFSTAT_DONE0 ((uint32_t)0x01 << 3)
#define EFLASH_EFSTAT_PEGOOD0 ((uint32_t)0x01 << 2)
#define EFLASH_EFSTAT_SMWERR0 ((uint32_t)0x01 << 1)
#define EFLASH_EFSTAT_FLASH_BUSY0 ((uint32_t)0x01 << 0)

#define EFLASH_EFINTM_ECC_ERROR0_MASK ((uint32_t)0x01 << 5)
#define EFLASH_EFINTM_ECC_RDWW0_MASK ((uint32_t)0x01 << 4)
#define EFLASH_EFINTM_ECC_DONE0_MASK ((uint32_t)0x01 << 3)

#define EFLASH_EFCMD_CMD0_VALID ((uint32_t)0x01 << 15)
#define EFLASH_EFCMD_PRGW_NUM0_SHIFT (8)
#define EFLASH_EFCMD_CMD0_SHIFT (0)

#define EFLASH_EECCECNT_OVD ((uint32_t)0x01 << 31)
#define EFLASH_EECCECNT_ECC_ERR_CNT_SHIFT (0)

#define EFLASH_ETIMBASE_20NS_BASE_OF_CLK_SHIFT (8)
#define EFLASH_ETIMBASE_1US_BASE_OF_CLK_SHIFT (0)

#define EFLASH_ETIMCFG_CFG_TNVSE_SHIFT (26)
#define EFLASH_ETIMCFG_CFG_TPWS_SHIFT (22)
#define EFLASH_ETIMCFG_CFG_TRE_SHIFT (17)
#define EFLASH_ETIMCFG_CFG_TRE_SHIFT (17)
#define EFLASH_ETIMCFG_CFG_TME_SHIFT (12)
#define EFLASH_ETIMCFG_CFG_TPROG_SHIFT (8)
#define EFLASH_ETIMCFG_CFG_TNVH_SHIFT (4)
#define EFLASH_ETIMCFG_CFG_TNVSP_SHIFT (0)

#define EFLASH_SMWOP0_WMV_SHIFT (22)
#define EFLASH_SMWOP0_WHV_SHIFT (18)
#define EFLASH_SMWOP0_WIPGM_SHIFT (16)
#define EFLASH_SMWOP0_SLOW_CLK_EN ((uint32_t)0x01 << 13)
#define EFLASH_SMWOP0_200NS_CLK_NUM _SHIFT(8)
#define EFLASH_SMWOP0_1US_CLK_NUM_SHIFT (0)

#define EFLASH_SMWINFO0_SMWR_LOOP0_SHIFT (16)
#define EFLASH_SMWINFO0_SMWR_LASTSET0_SHIFT (0)

#define EFLASH_EFDIRCTRLEN_DIRC0_EN ((uint32_t)0x01 << 31)

#define EFLASH_DIRCADDR_DIRC_XADR_SHIFT (6)
#define EFLASH_DIRCADDR_DIRC_YADR_SHIFT (0)

#define EFLASH_EFUSEVDDQEN_EFUSE_VDDQ_EN ((uint32_t)0x01 << 0)

#endif /* end __EFLASH__ */

#define __EPORT__
#ifdef __EPORT__
/*** EPORT **********************************************/
/*EPPAR*/
#define EPORT_EPPAR_EPPA0 (0)  
#define EPORT_EPPAR_EPPA1 (2)  
#define EPORT_EPPAR_EPPA2 (4)  
#define EPORT_EPPAR_EPPA3 (6)  
#define EPORT_EPPAR_EPPA4 (8)  
#define EPORT_EPPAR_EPPA5 (10) 
#define EPORT_EPPAR_EPPA6 (12) 
#define EPORT_EPPAR_EPPA7 (14) 

/*EPDDR*/
#define EPORT_EPDDR_EPDD (0)          
#define EPORT_EPDDR_EPDD0 ( (uint32_t)1 << 0) 
#define EPORT_EPDDR_EPDD1 ( (uint32_t)1 << 1) 
#define EPORT_EPDDR_EPDD2 ( (uint32_t)1 << 2) 
#define EPORT_EPDDR_EPDD3 ( (uint32_t)1 << 3) 
#define EPORT_EPDDR_EPDD4 ( (uint32_t)1 << 4) 
#define EPORT_EPDDR_EPDD5 ( (uint32_t)1 << 5) 
#define EPORT_EPDDR_EPDD6 ( (uint32_t)1 << 6) 
#define EPORT_EPDDR_EPDD7 ( (uint32_t)1 << 7) 

/*EPIER*/
#define EPORT_EPIER_EPIE (0)          
#define EPORT_EPIER_EPIE0 ( (uint32_t)1 << 0) 
#define EPORT_EPIER_EPIE1 ( (uint32_t)1 << 1) 
#define EPORT_EPIER_EPIE2 ( (uint32_t)1 << 2) 
#define EPORT_EPIER_EPIE3 ( (uint32_t)1 << 3) 
#define EPORT_EPIER_EPIE4 ( (uint32_t)1 << 4) 
#define EPORT_EPIER_EPIE5 ( (uint32_t)1 << 5) 
#define EPORT_EPIER_EPIE6 ( (uint32_t)1 << 6) 
#define EPORT_EPIER_EPIE7 ( (uint32_t)1 << 7) 

/*EPDR*/
#define EPORT_EPDR_EPD (0)          
#define EPORT_EPDR_EPD0 ( (uint32_t)1 << 0) 
#define EPORT_EPDR_EPD1 ( (uint32_t)1 << 1) 
#define EPORT_EPDR_EPD2 ( (uint32_t)1 << 2) 
#define EPORT_EPDR_EPD3 ( (uint32_t)1 << 3) 
#define EPORT_EPDR_EPD4 ( (uint32_t)1 << 4) 
#define EPORT_EPDR_EPD5 ( (uint32_t)1 << 5) 
#define EPORT_EPDR_EPD6 ( (uint32_t)1 << 6) 
#define EPORT_EPDR_EPD7 ( (uint32_t)1 << 7) 

/*EPPDR*/
#define EPORT_EPPDR_EPPD (0)          
#define EPORT_EPPDR_EPPD0 ( (uint32_t)1 << 0) 
#define EPORT_EPPDR_EPPD1 ( (uint32_t)1 << 1) 
#define EPORT_EPPDR_EPPD2 ( (uint32_t)1 << 2) 
#define EPORT_EPPDR_EPPD3 ( (uint32_t)1 << 3) 
#define EPORT_EPPDR_EPPD4 ( (uint32_t)1 << 4) 
#define EPORT_EPPDR_EPPD5 ( (uint32_t)1 << 5) 
#define EPORT_EPPDR_EPPD6 ( (uint32_t)1 << 6) 
#define EPORT_EPPDR_EPPD7 ( (uint32_t)1 << 7) 

/*EPFR*/
#define EPORT_EPFR_EPF (0)          
#define EPORT_EPFR_EPF0 ( (uint32_t)1 << 0) 
#define EPORT_EPFR_EPF1 ( (uint32_t)1 << 1) 
#define EPORT_EPFR_EPF2 ( (uint32_t)1 << 2) 
#define EPORT_EPFR_EPF3 ( (uint32_t)1 << 3) 
#define EPORT_EPFR_EPF4 ( (uint32_t)1 << 4) 
#define EPORT_EPFR_EPF5 ( (uint32_t)1 << 5) 
#define EPORT_EPFR_EPF6 ( (uint32_t)1 << 6) 
#define EPORT_EPFR_EPF7 ( (uint32_t)1 << 7) 

/*EPPUER*/
#define EPORT_EPPUER_EPPUE (0)          
#define EPORT_EPPUER_EPPUE0 ( (uint32_t)1 << 0) 
#define EPORT_EPPUER_EPPUE1 ( (uint32_t)1 << 1) 
#define EPORT_EPPUER_EPPUE2 ( (uint32_t)1 << 2) 
#define EPORT_EPPUER_EPPUE3 ( (uint32_t)1 << 3) 
#define EPORT_EPPUER_EPPUE4 ( (uint32_t)1 << 4) 
#define EPORT_EPPUER_EPPUE5 ( (uint32_t)1 << 5) 
#define EPORT_EPPUER_EPPUE6 ( (uint32_t)1 << 6) 
#define EPORT_EPPUER_EPPUE7 ( (uint32_t)1 << 7) 

/*EPLPR*/
#define EPORT_EPLPR_EPLP (0)          
#define EPORT_EPLPR_EPLP0 ( (uint32_t)1 << 0) 
#define EPORT_EPLPR_EPLP1 ( (uint32_t)1 << 1) 
#define EPORT_EPLPR_EPLP2 ( (uint32_t)1 << 2) 
#define EPORT_EPLPR_EPLP3 ( (uint32_t)1 << 3) 
#define EPORT_EPLPR_EPLP4 ( (uint32_t)1 << 4) 
#define EPORT_EPLPR_EPLP5 ( (uint32_t)1 << 5) 
#define EPORT_EPLPR_EPLP6 ( (uint32_t)1 << 6) 
#define EPORT_EPLPR_EPLP7 ( (uint32_t)1 << 7) 

/*EPODER*/
#define EPORT_EPODER_EPODE (0)          
#define EPORT_EPODER_EPODE0 ( (uint32_t)1 << 0) 
#define EPORT_EPODER_EPODE1 ( (uint32_t)1 << 1) 
#define EPORT_EPODER_EPODE2 ( (uint32_t)1 << 2) 
#define EPORT_EPODER_EPODE3 ( (uint32_t)1 << 3) 
#define EPORT_EPODER_EPODE4 ( (uint32_t)1 << 4) 
#define EPORT_EPODER_EPODE5 ( (uint32_t)1 << 5) 
#define EPORT_EPODER_EPODE6 ( (uint32_t)1 << 6) 
#define EPORT_EPODER_EPODE7 ( (uint32_t)1 << 7) 

#endif

#define __I2C__
#ifdef __I2C__

/*** I2C **********************************************/
/*I2C*/
/*I2CC*/
#define I2C_EN (1 << 0)                          /**< I2Cģ��ʹ��                   */
#define I2C_DIS (0xFE)                           /**< I2Cģ���ֹ                   */
#define I2C_EN_IT (1 << 1)                       /**< I2C �ж�ʹ�� */
#define I2C_DIS_IT (0xFD)                        /**< I2C �жϽ�ֹ*/
#define I2C_MASTER (1 << 2)                      /**< I2C ��ģʽ*/
#define I2C_SLAVE (0xFB)                         /**< I2C ��ģʽ*/
#define I2C_EN_ACK (1 << 3)                      /**< I2C ʹ��Ӧ��*/
#define I2C_DIS_ACK (0xF7)                       /**< I2C ��ֹӦ��*/
#define I2C_EN_REPEAT_START (1 << 4)             /**< I2C ʹ���ظ���ʼ�ź�*/
#define I2C_DIS_REPEAT_START (0xEF)              /**< I2C ��ֹ�ظ���ʼ�ź�*/
#define I2C_EN_ADDRESS_MATCH_IT (1 << 5)         /**< I2C ʹ�ܵ�ַƥ���ж�*/
#define I2C_DIS_ADDRESS_MATCH_IT (0xDF)          /**< I2C ��ֹ��ַƥ���ж�*/
#define I2C_EN_HIGH_SPEED_MODE (1 << 6)          /**< I2C ʹ�ܸ���ģʽ*/
#define I2C_DIS_HIGH_SPEED_MODE (0xBF)           /**< I2C ��ֹ����ģʽ */
#define I2C_EN_SLAVE_HIGH_SPEED_MODE_IT (1 << 7) /**< I2C ʹ�ܸ���ģʽ�ж� */
#define I2C_DIS_SLAVE_HIGH_SPEED_MODE_IT (0x7F)  /**< I2C ��ֹ����ģʽ�ж� */
/*I2CP*/
#define I2C_CLOCK_MODE_TEST (1 << 6)                 /**< I2C  ʱ�Ӳ���ģʽ*/
#define I2C_CLOCK_MODE_NORMAL (~I2C_CLOCK_MODE_TEST) /**< I2C  ʱ������ģʽ */
/*I2CS*/
#define I2C_FLAG_TF (1 << 0)    /**< I2C ��־TF */
#define I2C_FLAG_RC (1 << 1)    /**< I2C ��־RC*/
#define I2C_FLAG_AASLV (1 << 2) /**< I2C ��־AASLV */
#define I2C_FLAG_BUSY (1 << 3)  /**< I2C ��־BUSY*/
#define I2C_FLAG_ARBL (1 << 4)  /**< I2C ��־*ARBL*/
#define I2C_FLAG_RXTX (1 << 5)  /**< I2C ��־RXTX */
#define I2C_FLAG_DACK (1 << 6)  /**< I2C ��־DACK*/
#define I2C_FLAG_AACK (1 << 7)  /**< I2C ��־DACK*/
#define I2C_FLAG_RX_MASK (0)    /**< I2C ��־RX����*/
#define I2C_FLAG_TX_MASK (0x20) /**< I2C ��־TX����*/

/*I2CSHIR*/
#define I2C_FLAG_SLAVE_HIGH_SPEED (1 << 0) /**<           */
/*I2CSHT*/
#define I2C_EN_SDA_FILTER (1 << 6) /**<          */
#define I2C_EN_SCL_FILTER (1 << 7) /**<          */
/**/
#define I2C_SLAVE_HIGH_SPEED (1 << 0) /**<           */
/*I2PCR*/
#define I2C_PIN_SCL (0) /**< I2C�ܽ����� SCL     */
#define I2C_PIN_SDA (1) /**< I2C�ܽ����� SDA     */
#define I2C_PA_SHIFT_MASK (6)
#define I2C_WOM_SHIFT_MASK (4)
#define I2C_PD_SHIFT_MASK (2)
#define I2C_PU_SHIFT_MASK (0)
#define I2C_PIN_SDA_GPIO (0x80)                                /**< SDA�ܽŲ�����GPIO   */
#define I2C_PIN_SDA_PRIMARY_FUN (~(I2C_PIN_SDA_GPIO))          /**< SDA�ܽŲ����������� */
#define I2C_PIN_SCL_GPIO (0x40)                                /**< SCL�ܽŲ�����GPIO   */
#define I2C_PIN_SCL_PRIMARY_FUN (~(I2C_PIN_SCL_GPIO))          /**< SCL�ܽŲ����������� */
#define I2C_PIN_SDA_OPEN_DRAIN_MODE (0x20)                     /**< I2C�ܽ�SDA ��©��� */
#define I2C_PIN_SDA_CMOS_MODE (~(I2C_PIN_SDA_OPEN_DRAIN_MODE)) /**< I2C�ܽ�SDA CMOS��� */
#define I2C_PIN_SCL_OPEN_DRAIN_MODE (0x10)                     /**< I2C�ܽ�SCL ��©��� */
#define I2C_PIN_SCL_CMOS_MODE (~(I2C_PIN_SCL_OPEN_DRAIN_MODE)) /**< I2C�ܽ�SDA CMOS��� */
#define I2C_PIN_SDA_EN_PULLDOWN (0x04)                         /**< I2C�ܽ�SDA ����ʹ�� */
#define I2C_PIN_SDA_DIS_PULLDOWN (~(I2C_PIN_SDA_EN_PULLDOWN))  /**< I2C�ܽ�SDA ������ֹ */
#define I2C_PIN_SCL_EN_PULLDOWN (0x02)                         /**< I2C�ܽ�SCL ����ʹ�� */
#define I2C_PIN_SCL_DIS_PULLDOWN (~(I2C_PIN_SCL_EN_PULLDOWN))  /**< I2C�ܽ�SDA ������ֹ */
#define I2C_PIN_SDA_EN_PULLUP (0x02)                           /**< I2C�ܽ�SDA ����ʹ�� */
#define I2C_PIN_SDA_DIS_PULLUP (~(I2C_PIN_SDA_EN_PULLUP))      /**< I2C�ܽ�SDA �������� */
#define I2C_PIN_SCL_EN_PULLUP ( (uint32_t)1)                           /**< I2C�ܽ�SCL ����ʹ�� */
#define I2C_PIN_SCL_DIS_PULLUP (~(I2C_PIN_SCL_EN_PULLUP))      /**< I2C�ܽ�SCL �������� */
/*I2CPDR*/
#define I2C_PIN_SCL_DIR_GPIO_OUT (1 << 0)                     /**< I2C SCL ���� ���    */
#define I2C_PIN_SCL_DIR_GPIO_IN (~(I2C_PIN_SCL_DIR_GPIO_OUT)) /**< I2C SCL ���� ����    */
#define I2C_PIN_SDA_DIR_GPIO_OUT (1 << 1)                     /**< I2C SDA ���� ���    */
#define I2C_PIN_SDA_DIR_GPIO_IN (~(I2C_PIN_SDA_DIR_GPIO_OUT)) /**< I2C SDA ���� ����    */
#endif                                                        /* end __I2C__ */

#define __IO_CONTROL__
#ifdef __IO_CONTROL__
/*** IO_CONTROL **********************************************/
/*SPICR*/
#define IOCTRL_SPICR_SPI1_PS (8)           
#define IOCTRL_SPICR_MISO1_PS ( (uint32_t)1 << 8)  
#define IOCTRL_SPICR_MOSI1_PS ( (uint32_t)1 << 9)  
#define IOCTRL_SPICR_SCK1_PS ( (uint32_t)1 << 10)  
#define IOCTRL_SPICR_SS1_PS ( (uint32_t)1 << 11)   
#define IOCTRL_SPICR_SPI1_IE (12)          
#define IOCTRL_SPICR_MISO1_IE ( (uint32_t)1 << 12) 
#define IOCTRL_SPICR_MOSI1_IE ( (uint32_t)1 << 13) 
#define IOCTRL_SPICR_SCK1_IE ( (uint32_t)1 << 14)  
#define IOCTRL_SPICR_SS1_IE ( (uint32_t)1 << 15)   
#define IOCTRL_SPICR_SPI2_PS (16)          
#define IOCTRL_SPICR_MISO2_PS ( (uint32_t)1 << 16) 
#define IOCTRL_SPICR_MOSI2_PS ( (uint32_t)1 << 17) 
#define IOCTRL_SPICR_SCK2_PS ( (uint32_t)1 << 18) 
#define IOCTRL_SPICR_SS2_PS ( (uint32_t)1 << 19)   
#define IOCTRL_SPICR_SPI2_IE (20)          
#define IOCTRL_SPICR_MISO2_IE ( (uint32_t)1 << 20) 
#define IOCTRL_SPICR_MOSI2_IE ( (uint32_t)1 << 21) 
#define IOCTRL_SPICR_SCK2_IE ( (uint32_t)1 << 22)  
#define IOCTRL_SPICR_SS2_IE ( (uint32_t)1 << 23)   
#define IOCTRL_SPICR_SPI3_PS (24)          
#define IOCTRL_SPICR_MISO3_PS ( (uint32_t)1 << 24) 
#define IOCTRL_SPICR_MOSI3_PS ( (uint32_t)1 << 25) 
#define IOCTRL_SPICR_SCK3_PS ( (uint32_t)1 << 26) 
#define IOCTRL_SPICR_SS3_PS ( (uint32_t)1 << 27)   
#define IOCTRL_SPICR_SPI3_IE (28)          
#define IOCTRL_SPICR_MISO3_IE ( (uint32_t)1 << 28) 
#define IOCTRL_SPICR_MOSI3_IE ( (uint32_t)1 << 29) 
#define IOCTRL_SPICR_SCK3_IE ( (uint32_t)1 << 30)  
#define IOCTRL_SPICR_SS3_IE ( (uint32_t)1 << 31)   

/*USICR*/
#define IOCTRL_USICR_DS1_DS0 (0x03 << 0)       
#define IOCTRL_USICR_DS0 ( (uint32_t)1 << 0)           
#define IOCTRL_USICR_DS1 ( (uint32_t)1 << 1)           
#define IOCTRL_USICR_SR ( (uint32_t)1 << 2)            
#define IOCTRL_USICR_IS ( (uint32_t)1 << 3)            
#define IOCTRL_USICR_USI2_DREN ( (uint32_t)1 << 6)     
#define IOCTRL_USICR_USI1_PS (8)               
#define IOCTRL_USICR_ISORST1_PS ( (uint32_t)1 << 8)    
#define IOCTRL_USICR_ISOCLK1_PS ( (uint32_t)1 << 9)    
#define IOCTRL_USICR_ISODAT1_PS ( (uint32_t)1 << 10)   
#define IOCTRL_USICR_USI1_DIEN (12)            
#define IOCTRL_USICR_ISORST1_DIEN ( (uint32_t)1 << 12) 
#define IOCTRL_USICR_ISOCLK1_DIEN ( (uint32_t)1 << 13) 
#define IOCTRL_USICR_ISODAT1_DIEN ( (uint32_t)1 << 14) 
#define IOCTRL_USICR_USI2_PUEN (16)            
#define IOCTRL_USICR_ISORST2_PUEN ( (uint32_t)1 << 16) 
#define IOCTRL_USICR_ISOCLK2_PUEN ( (uint32_t)1 << 17) 
#define IOCTRL_USICR_ISODAT2_PUEN ( (uint32_t)1 << 18) 
#define IOCTRL_USICR_USI2_DIEN (20)            
#define IOCTRL_USICR_ISORST2_DIEN ( (uint32_t)1 << 20) 
#define IOCTRL_USICR_ISOCLK2_DIEN ( (uint32_t)1 << 21) 
#define IOCTRL_USICR_ISODAT2_DIEN ( (uint32_t)1 << 22) 

/*I2CCR*/
#define IOCTRL_I2CCR_DS1_DS0 (0x03 << 0)  
#define IOCTRL_I2CCR_DS0 ( (uint32_t)1 << 0)      
#define IOCTRL_I2CCR_DS1 ( (uint32_t)1 << 1)      
#define IOCTRL_I2CCR_SR ( (uint32_t)1 << 2)       
#define IOCTRL_I2CCR_IS ( (uint32_t)1 << 3)       
#define IOCTRL_I2CCR_I2C1_PS (8)          
#define IOCTRL_I2CCR_SCL1_PS ( (uint32_t)1 << 8)  
#define IOCTRL_I2CCR_SDA1_PS ( (uint32_t)1 << 9)  
#define IOCTRL_I2CCR_I2C1_IE (12)         
#define IOCTRL_I2CCR_SCL1_IE ( (uint32_t)1 << 12) 
#define IOCTRL_I2CCR_SDA1_IE ( (uint32_t)1 << 13) 
#define IOCTRL_I2CCR_I2C2_PS (16)         
#define IOCTRL_I2CCR_SCL2_PS ( (uint32_t)1 << 16) 
#define IOCTRL_I2CCR_SDA2_PS ( (uint32_t)1 << 17) 
#define IOCTRL_I2CCR_I2C2_IE (20)         
#define IOCTRL_I2CCR_SCL2_IE ( (uint32_t)1 << 20) 
#define IOCTRL_I2CCR_SDA2_IE ( (uint32_t)1 << 21) 


/*UARTCR*/
#define IOCTRL_UARTCR_DS1_DS0 (0x03 << 0)            
#define IOCTRL_UARTCR_DS0 ( (uint32_t)1 << 0)                
#define IOCTRL_UARTCR_DS1 ( (uint32_t)1 << 1)                
#define IOCTRL_UARTCR_SR ( (uint32_t)1 << 2)                 
#define IOCTRL_UARTCR_IS ( (uint32_t)1 << 3)                 
#define IOCTRL_UARTCR_RXD5_PS ( (uint32_t)1 << 4)            
#define IOCTRL_UARTCR_TXD5_PS ( (uint32_t)1 << 5)            
#define IOCTRL_UARTCR_RXD6_PS ( (uint32_t)1 << 6)            
#define IOCTRL_UARTCR_TXD6_PS ( (uint32_t)1 << 7)            
#define IOCTRL_UARTCR_RXD1_PS ( (uint32_t)1 << 8)            
#define IOCTRL_UARTCR_UART1_PS (8)                  
#define IOCTRL_UARTCR_TXD1_PS ( (uint32_t)1 << 9)            
#define IOCTRL_UARTCR_CTS1_PUE ( (uint32_t)1 << 11)          
#define IOCTRL_UARTCR_UART3_PS (12)                  
#define IOCTRL_UARTCR_RXD3_PS ( (uint32_t)1 << 12)           
#define IOCTRL_UARTCR_TXD3_PS ( (uint32_t)1 << 13)           
#define IOCTRL_UARTCR_CTS3_PUE ( (uint32_t)1 << 15)          
#define IOCTRL_UARTCR_UART2_PS (16)                  
#define IOCTRL_UARTCR_RXD2_PS ( (uint32_t)1 << 16)           
#define IOCTRL_UARTCR_TXD2_PS ( (uint32_t)1 << 17)           
#define IOCTRL_UARTCR_CTS2_PUE ( (uint32_t)1 << 19)          
#define IOCTRL_UARTCR_RXD4_PS ( (uint32_t)1 << 20)            
#define IOCTRL_UARTCR_TXD4_PS ( (uint32_t)1 << 21)            
#define IOCTRL_UARTCR_GINT_SWAP_MASK (0x3F << 24)    
#define IOCTRL_UARTCR_GINT_SWAP (24)                 
#define IOCTRL_UARTCR_GINT_SWAP_BIT0 ( (uint32_t)1 << 24)    
#define IOCTRL_UARTCR_GINT_SWAP_BIT1 ( (uint32_t)1 << 25)    
#define IOCTRL_UARTCR_GINT_SWAP_BIT2 ( (uint32_t)1 << 26)    
#define IOCTRL_UARTCR_GINT_SWAP_BIT3 ( (uint32_t)1 << 27)    
#define IOCTRL_UARTCR_GINT_SWAP_BIT4 ( (uint32_t)1 << 28)    
#define IOCTRL_UARTCR_GINT_SWAP_BIT5 ( (uint32_t)1 << 29)    
#define IOCTRL_UARTCR_GINT_SWAP_LOAD_EN ( (uint32_t)1 << 31) 

/*EPORT0CR*/
#define IOCTRL_EPORT0CR_DS1_DS0 (0x03 << 0)   
#define IOCTRL_EPORT0CR_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_EPORT0CR_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_EPORT0CR_SR ( (uint32_t)1 << 2)        
#define IOCTRL_EPORT0CR_IS ( (uint32_t)1 << 3)        
#define IOCTRL_EPORT0CR_IE (16)               
#define IOCTRL_EPORT0CR_PIN0_IE ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT0CR_PIN1_IE ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT0CR_PIN2_IE ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT0CR_PIN3_IE ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT0CR_PIN4_IE ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT0CR_PIN5_IE ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT0CR_PS (24)               
#define IOCTRL_EPORT0CR_PIN0_PS ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT0CR_PIN1_PS ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT0CR_PIN2_PS ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT0CR_PIN3_PS ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT0CR_PIN4_PS ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT0CR_PIN5_PS ( (uint32_t)1 << 29) 

/*EPORT1CR*/
#define IOCTRL_EPORT1CR_DS1_DS0 (0x03 << 0)    
#define IOCTRL_EPORT1CR_DS0 ( (uint32_t)1 << 0)        
#define IOCTRL_EPORT1CR_DS1 ( (uint32_t)1 << 1)        
#define IOCTRL_EPORT1CR_SR ( (uint32_t)1 << 2)         
#define IOCTRL_EPORT1CR_IS ( (uint32_t)1 << 3)         
#define IOCTRL_EPORT1CR_IE (16)                
#define IOCTRL_EPORT1CR_PIN4_IE ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT1CR_PIN5_IE ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT1CR_PIN6_IE ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT1CR_PIN7_IE ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT1CR_PS (24)                
#define IOCTRL_EPORT1CR_PIN4_PS ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT1CR_PIN5_PS ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT1CR_PIN6_PS ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT1CR_PIN7_PS ( (uint32_t)1 << 31) 

/*SWAPCR*/
#define IOCTRL_SWAPCR_SWAP_BIT0 ( (uint32_t)1 << 0)   /**< 0:{ss3,sck3,miso3,mosi3}enable; 1:gint[8:11]enable */
#define IOCTRL_SWAPCR_SWAP_BIT1 ( (uint32_t)1 << 1)   /**< 0:gint[15:14] enable; 1:gint[15:14] disable*/
#define IOCTRL_SWAPCR_SWAP_BIT2 ( (uint32_t)1 << 2)   /**< 0:{txd2,rxd2} enable; 1:{txd2,rxd2} disable */
#define IOCTRL_SWAPCR_SWAP_BIT3 ( (uint32_t)1 << 3)   /**< reserved */
#define IOCTRL_SWAPCR_SWAP_BIT4 ( (uint32_t)1 << 4)   /**< reserved */
#define IOCTRL_SWAPCR_SWAP_BIT5 ( (uint32_t)1 << 5)   /**< 0:gint[30] enable; 1:usb DRVVBUS enable */
#define IOCTRL_SWAPCR_SWAP_BIT6 ( (uint32_t)1 << 6)   /**< 0:isodat1 enable; 1:usb DTO enable */
#define IOCTRL_SWAPCR_SWAP_BIT7 ( (uint32_t)1 << 7)   /**< reserved */
#define IOCTRL_SWAPCR_SWAP_BIT8 ( (uint32_t)1 << 8)   /**< 0:ss2 enable; 1:ssislv1_ss enable  */
#define IOCTRL_SWAPCR_SWAP_BIT9 ( (uint32_t)1 << 9)   /**< 0:sck2 enable; 1:ssislv1_sck enable  */
#define IOCTRL_SWAPCR_SWAP_BIT10 ( (uint32_t)1 << 10) /**< 0:mosi2 enable; 1:ssislv_data[0] disable  */
#define IOCTRL_SWAPCR_SWAP_BIT11 ( (uint32_t)1 << 11) /**< 0:miso2 enable; 1:ssislv_data[1] enable  */
#define IOCTRL_SWAPCR_SWAP_BIT12 ( (uint32_t)1 << 12) /**< 0:sda2 enable; 1:ssislv_data[2] enable  */
#define IOCTRL_SWAPCR_SWAP_BIT13 ( (uint32_t)1 << 13) /**< 0:scl2 enable; 1:ssislv_data[3] enable  */
#define IOCTRL_SWAPCR_SWAP_BIT14 ( (uint32_t)1 << 14) /**< reserved */
#define IOCTRL_SWAPCR_SWAP_BIT15 ( (uint32_t)1 << 15) /**< reserved */
#define IOCTRL_SWAPCR_SWAP_BIT16 ( (uint32_t)1 << 16) /**< 0:{txd3,rxd3} enable; 1:{txd3,rxd3} disable  */
#define IOCTRL_SWAPCR_SWAP_BIT17 ( (uint32_t)1 << 17) /**< 0:gint[13] enable; 1:trace function enable  */
#define IOCTRL_SWAPCR_SWAP_BIT18 ( (uint32_t)1 << 18) /**< 0:gint[14] enable; 1:uart1_rts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT19 ( (uint32_t)1 << 19) /**< 0:gint[15] enable; 1:uart1_cts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT20 ( (uint32_t)1 << 20) /**< 0:gint[12] enable; 1:uart2_rts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT21 ( (uint32_t)1 << 21) /**< 0:gint[13] enable; 1:uart2_cts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT22 ( (uint32_t)1 << 22) /**< 0:gint[38] enable; 1:uart3_rts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT23 ( (uint32_t)1 << 23) /**< 0:gint[39] enable; 1:uart3_cts enable  */
#define IOCTRL_SWAPCR_SWAP_BIT24 ( (uint32_t)1 << 24) /**< 0:scl2 enable; 1:pwm0 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT25 ( (uint32_t)1 << 25) /**< 0:sda2 enable; 1:pwm1 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT26 ( (uint32_t)1 << 26) /**< 0:scl enable; 1:pwm2 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT27 ( (uint32_t)1 << 27) /**< 0:sda enable; 1:pwm3 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT28 ( (uint32_t)1 << 28) /**< 0:txd enable; 1:pwm4 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT29 ( (uint32_t)1 << 29) /**< 0:rxd enable; 1:pwm5 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT30 ( (uint32_t)1 << 30) /**< 0:txd2 enable; 1:pwm6 enable  */
#define IOCTRL_SWAPCR_SWAP_BIT31 ( (uint32_t)1 << 31) /**< 0:rxd2 enable; 1:pwm7 enable  */

/*SPIM1CR*/
#define IOCTRL_SPIM1CR_D_DS1_DS0 (0x03 << 0)   
#define IOCTRL_SPIM1CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPIM1CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPIM1CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPIM1CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPIM1CR_PUE ( (uint32_t)1 << 4)         
#define IOCTRL_SPIM1CR_ODE ( (uint32_t)1 << 5)         
#define IOCTRL_SPIM1CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPIM1CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPIM1CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPIM1CR_SCK_SR ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM1CR_SCK_IS ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM1CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPIM1CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPIM1CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPIM1CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPIM1CR_SS_IS ( (uint32_t)1 << 15)      
#define IOCTRL_SPIM1CR_PS (16)                 
#define IOCTRL_SPIM1CR_SS_PS ( (uint32_t)1 << 16)      
#define IOCTRL_SPIM1CR_SCK_PS ( (uint32_t)1 << 17)     
#define IOCTRL_SPIM1CR_D0_PS ( (uint32_t)1 << 18)      
#define IOCTRL_SPIM1CR_D1_PS ( (uint32_t)1 << 19)      
#define IOCTRL_SPIM1CR_D2_PS ( (uint32_t)1 << 20)      
#define IOCTRL_SPIM1CR_D3_PS ( (uint32_t)1 << 21)      
#define IOCTRL_SPIM1CR_IE (24)                 
#define IOCTRL_SPIM1CR_SS_IE ( (uint32_t)1 << 24)      
#define IOCTRL_SPIM1CR_SCK_IE ( (uint32_t)1 << 25)     
#define IOCTRL_SPIM1CR_D0_IE ( (uint32_t)1 << 26)      
#define IOCTRL_SPIM1CR_D1_IE ( (uint32_t)1 << 27)      
#define IOCTRL_SPIM1CR_D2_IE ( (uint32_t)1 << 28)      
#define IOCTRL_SPIM1CR_D3_IE ( (uint32_t)1 << 29)      

/*SPIM2CR*/
#define IOCTRL_SPIM2CR_D_DS1_DS0 (0x03 << 0)   
#define IOCTRL_SPIM2CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPIM2CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPIM2CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPIM2CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPIM2CR_PUE ( (uint32_t)1 << 4)         
#define IOCTRL_SPIM2CR_ODE ( (uint32_t)1 << 5)         
#define IOCTRL_SPIM2CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPIM2CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPIM2CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPIM2CR_SCK_SR ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM2CR_SCK_IS ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM2CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPIM2CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPIM2CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPIM2CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPIM2CR_SS_IS ( (uint32_t)1 << 15)      
#define IOCTRL_SPIM2CR_PS (16)                 
#define IOCTRL_SPIM2CR_SS_PS ( (uint32_t)1 << 16)      
#define IOCTRL_SPIM2CR_SCK_PS ( (uint32_t)1 << 17)     
#define IOCTRL_SPIM2CR_D0_PS ( (uint32_t)1 << 18)      
#define IOCTRL_SPIM2CR_D1_PS ( (uint32_t)1 << 19)      
#define IOCTRL_SPIM2CR_D2_PS ( (uint32_t)1 << 20)      
#define IOCTRL_SPIM2CR_D3_PS ( (uint32_t)1 << 21)      
#define IOCTRL_SPIM2CR_IE (24)                 
#define IOCTRL_SPIM2CR_SS_IE ( (uint32_t)1 << 24)      
#define IOCTRL_SPIM2CR_SCK_IE ( (uint32_t)1 << 25)     
#define IOCTRL_SPIM2CR_D0_IE ( (uint32_t)1 << 26)      
#define IOCTRL_SPIM2CR_D1_IE ( (uint32_t)1 << 27)      
#define IOCTRL_SPIM2CR_D2_IE ( (uint32_t)1 << 28)      
#define IOCTRL_SPIM2CR_D3_IE ( (uint32_t)1 << 29)      

/*SPIM3CR*/
#define IOCTRL_SPIM3CR_D_DS1_DS0 (0x03 << 0)   
#define IOCTRL_SPIM3CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPIM3CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPIM3CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPIM3CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPIM3CR_PUE ( (uint32_t)1 << 4)         
#define IOCTRL_SPIM3CR_ODE ( (uint32_t)1 << 5)         
#define IOCTRL_SPIM3CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPIM3CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPIM3CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPIM3CR_SCK_SR ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM3CR_SCK_IS ( (uint32_t)1 << 9)      
#define IOCTRL_SPIM3CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPIM3CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPIM3CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPIM3CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPIM3CR_SS_IS ( (uint32_t)1 << 15)      
#define IOCTRL_SPIM3CR_PS (16)                 
#define IOCTRL_SPIM3CR_SS_PS ( (uint32_t)1 << 16)      
#define IOCTRL_SPIM3CR_SCK_PS ( (uint32_t)1 << 17)     
#define IOCTRL_SPIM3CR_D0_PS ( (uint32_t)1 << 18)      
#define IOCTRL_SPIM3CR_D1_PS ( (uint32_t)1 << 19)      
#define IOCTRL_SPIM3CR_D2_PS ( (uint32_t)1 << 20)      
#define IOCTRL_SPIM3CR_D3_PS ( (uint32_t)1 << 21)      
#define IOCTRL_SPIM3CR_IE (24)                 
#define IOCTRL_SPIM3CR_SS_IE ( (uint32_t)1 << 24)      
#define IOCTRL_SPIM3CR_SCK_IE ( (uint32_t)1 << 25)     
#define IOCTRL_SPIM3CR_D0_IE ( (uint32_t)1 << 26)      
#define IOCTRL_SPIM3CR_D1_IE ( (uint32_t)1 << 27)      
#define IOCTRL_SPIM3CR_D2_IE ( (uint32_t)1 << 28)      
#define IOCTRL_SPIM3CR_D3_IE ( (uint32_t)1 << 29)      

/*GMACWKCR*/
#define IOCTRL_GMACCR_DS1_DS0 (0x03 << 0) 
#define IOCTRL_GMACCR_DS0 ( (uint32_t)1 << 0)     
#define IOCTRL_GMACCR_DS1 ( (uint32_t)1 << 1)     
#define IOCTRL_GMACWKCR_SR ( (uint32_t)1 << 2)      
#define IOCTRL_GMACWKCR_IS ( (uint32_t)1 << 3)      
#define IOCTRL_GMACWKCR_WAKEUP_PS ( (uint32_t)1 << 6)      
#define IOCTRL_GMACWKCR_USBDET_PS ( (uint32_t)1 << 7)      

/*PSRAMCR1*/
#define IOCTRL_PSRAMCR1_PSRAM_EN ( (uint32_t)1 << 0) 

/*PSRAMCR2*/
#define IOCTRL_PSRAMCR2_PSRAM_EN ( (uint32_t)1 << 0) 

/*PSRAMCR3*/
#define IOCTRL_PSRAMCR3_PSRAM_EN ( (uint32_t)1 << 0) 

/*EPORT2CR*/
#define IOCTRL_EPORT2CR_IE (16)              
#define IOCTRL_EPORT2CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT2CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT2CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT2CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT2CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT2CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT2CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT2CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT2CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT2CR_PS (24)              
#define IOCTRL_EPORT2CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT2CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT2CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT2CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT2CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT2CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT2CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT2CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT2CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*EPORT3CR*/
#define IOCTRL_EPORT3CR_IE (16)              
#define IOCTRL_EPORT3CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT3CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT3CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT3CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT3CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT3CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT3CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT3CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT3CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT3CR_PS (24)              
#define IOCTRL_EPORT3CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT3CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT3CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT3CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT3CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT3CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT3CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT3CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT3CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*EPORT4CR*/
#define IOCTRL_EPORT4CR_IE (16)              
#define IOCTRL_EPORT4CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT4CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT4CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT4CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT4CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT4CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT4CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT4CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT4CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT4CR_PS (24)              
#define IOCTRL_EPORT4CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT4CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT4CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT4CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT4CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT4CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT4CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT4CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT4CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*EPORT5CR*/
#define IOCTRL_EPORT5CR_IE (16)              
#define IOCTRL_EPORT5CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT5CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT5CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT5CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT5CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT5CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT5CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT5CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT5CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT5CR_PS (24)              
#define IOCTRL_EPORT5CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT5CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT5CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT5CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT5CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT5CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT5CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT5CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT5CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*EPORT6CR*/
#define IOCTRL_EPORT6CR_IE (16)              
#define IOCTRL_EPORT6CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT6CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT6CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT6CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT6CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT6CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT6CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT6CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT6CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT6CR_PS (24)              
#define IOCTRL_EPORT6CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT6CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT6CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT6CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT6CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT6CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT6CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT6CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT6CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*EPORT7CR*/
#define IOCTRL_EPORT7CR_IE (16)              
#define IOCTRL_EPORT7CR_IE_MASK (0xFF << 16) /**< 0:input_dis 1:input_en */
#define IOCTRL_EPORT7CR_IE_PIN0 ( (uint32_t)1 << 16) 
#define IOCTRL_EPORT7CR_IE_PIN1 ( (uint32_t)1 << 17) 
#define IOCTRL_EPORT7CR_IE_PIN2 ( (uint32_t)1 << 18) 
#define IOCTRL_EPORT7CR_IE_PIN3 ( (uint32_t)1 << 19) 
#define IOCTRL_EPORT7CR_IE_PIN4 ( (uint32_t)1 << 20) 
#define IOCTRL_EPORT7CR_IE_PIN5 ( (uint32_t)1 << 21) 
#define IOCTRL_EPORT7CR_IE_PIN6 ( (uint32_t)1 << 22) 
#define IOCTRL_EPORT7CR_IE_PIN7 ( (uint32_t)1 << 23) 
#define IOCTRL_EPORT7CR_PS (24)              
#define IOCTRL_EPORT7CR_PS_MASK (0xFF << 24) /**< 0:pull down 1:pull up */
#define IOCTRL_EPORT7CR_PS_PIN0 ( (uint32_t)1 << 24) 
#define IOCTRL_EPORT7CR_PS_PIN1 ( (uint32_t)1 << 25) 
#define IOCTRL_EPORT7CR_PS_PIN2 ( (uint32_t)1 << 26) 
#define IOCTRL_EPORT7CR_PS_PIN3 ( (uint32_t)1 << 27) 
#define IOCTRL_EPORT7CR_PS_PIN4 ( (uint32_t)1 << 28) 
#define IOCTRL_EPORT7CR_PS_PIN5 ( (uint32_t)1 << 29) 
#define IOCTRL_EPORT7CR_PS_PIN6 ( (uint32_t)1 << 30) 
#define IOCTRL_EPORT7CR_PS_PIN7 ( (uint32_t)1 << 31) 

/*SWAPCR2*/
#define IOCTRL_SWAPCR2_SWAP_BIT0 ( (uint32_t)1 << 0)   /**< 0:spi6[0] enable; 1:gint[32] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT1 ( (uint32_t)1 << 1)   /**< 0:spi6[1] enable; 1:gint[33] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT2 ( (uint32_t)1 << 2)   /**< 0:spi6[2] enable; 1:gint[34] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT3 ( (uint32_t)1 << 3)   /**< 0:spi6[3] enable; 1:gint[35] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT4 ( (uint32_t)1 << 4)   /**< 0:sck_spi6 enable; 1:gint[36] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT5 ( (uint32_t)1 << 5)   /**< 0:ss_spi6 enable; 1:gint[37] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT6 ( (uint32_t)1 << 6)   /**< reserved */
#define IOCTRL_SWAPCR2_SWAP_BIT7 ( (uint32_t)1 << 7)   /**< reserved */
#define IOCTRL_SWAPCR2_SWAP_BIT8 ( (uint32_t)1 << 8)   /**< 0:ss1 enable; 1:gint[40] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT9 ( (uint32_t)1 << 9)   /**< 0:sck1 enable; 1:gint[41] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT10 ( (uint32_t)1 << 10) /**< 0:miso1 enable; 1:gint[42] disable  */
#define IOCTRL_SWAPCR2_SWAP_BIT11 ( (uint32_t)1 << 11) /**< 0:mosi1 enable; 1:gint[43] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT12 ( (uint32_t)1 << 12) /**< 0:ss2 enable; 1:gint[44] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT13 ( (uint32_t)1 << 13) /**< 0:sck2 enable; 1:gint[45] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT14 ( (uint32_t)1 << 14) /**< 0:miso2 enable; 1:gint[46] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT15 ( (uint32_t)1 << 15) /**< 0:mosi2 enable; 1:gint[47] enable */
#define IOCTRL_SWAPCR2_SWAP_BIT16 ( (uint32_t)1 << 16) /**< 0:scl2 enable; 1:gint[48] disable  */
#define IOCTRL_SWAPCR2_SWAP_BIT17 ( (uint32_t)1 << 17) /**< 0:sda2 enable; 1:gint[49] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT18 ( (uint32_t)1 << 18) /**< 0:scl enable; 1:gint[50] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT19 ( (uint32_t)1 << 19) /**< 0:sda enable; 1:gint[51] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT20 ( (uint32_t)1 << 20) /**< 0:txd enable; 1:gint[52] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT21 ( (uint32_t)1 << 21) /**< 0:rxd enable; 1:gint[53] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT22 ( (uint32_t)1 << 22) /**< 0:txd2 enable; 1:gint[54] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT23 ( (uint32_t)1 << 23) /**< 0:rxd2 enable; 1:gint[55] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT24 ( (uint32_t)1 << 24) /**< 0:txd3 enable; 1:gint[56] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT25 ( (uint32_t)1 << 25) /**< 0:rxd3 enable; 1:gint[57] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT26 ( (uint32_t)1 << 26) /**< 0:isodat2 enable; 1:gint[58] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT27 ( (uint32_t)1 << 27) /**< 0:isoclk2 enable; 1:gint[59] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT28 ( (uint32_t)1 << 28) /**< 0:isorst2 enable; 1:gint[60] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT29 ( (uint32_t)1 << 29) /**< 0:isodat1 enable; 1:gint[61] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT30 ( (uint32_t)1 << 30) /**< 0:wakeup enable; 1:gint[62] enable  */
#define IOCTRL_SWAPCR2_SWAP_BIT31 ( (uint32_t)1 << 31) /**< 0:usbdet enable; 1:gint[63] enable  */

/*SWAPCR3*/
#define IOCTRL_SWAPCR3_SWAP_BIT0 ( (uint32_t)1 << 0)   /**< 0:isoclk1 enable; 1:gint[6]enable */
#define IOCTRL_SWAPCR3_SWAP_BIT1 ( (uint32_t)1 << 1)   /**< 0:isorst1 enable; 1:gint[7] enable*/
#define IOCTRL_SWAPCR3_SWAP_BIT2 ( (uint32_t)1 << 2)   /**< 0:pwmt1_etr enable; 1:gint[14] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT3 ( (uint32_t)1 << 3)   /**< 0:pwmt1_brk enable; 1:gint[15] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT4 ( (uint32_t)1 << 4)   /**< 0:pwmt2_etr enable; 1:miso3 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT5 ( (uint32_t)1 << 5)   /**< 0:pwmt2_brk enable; 1:mosi3 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT6 ( (uint32_t)1 << 6)   /**< 0:pwmt3_etr enable; 1:ss3 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT7 ( (uint32_t)1 << 7)   /**< 0:pwmt3_brk enable; 1:sck3 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT8 ( (uint32_t)1 << 8)   /**< 0:pwmt1_ch0 enable; 1:gint[0] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT9 ( (uint32_t)1 << 9)   /**< 0:pwmt1_ch0n enable; 1:gint[1] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT10 ( (uint32_t)1 << 10) /**< 0:pwmt1_ch1 enable; 1:isoclk1 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT11 ( (uint32_t)1 << 11) /**< 0:pwmt1_ch1n enable; 1:isorst1 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT12 ( (uint32_t)1 << 12) /**< 0:pwmt1_ch2 enable; 1:gint[2] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT13 ( (uint32_t)1 << 13) /**< 0:pwmt1_ch2n enable; 1:gint[4] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT14 ( (uint32_t)1 << 14) /**< 0:pwmt1_ch3 enable; 1:gint[3] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT15 ( (uint32_t)1 << 15) /**< 0:pwmt1_ch3n enable; 1:gint[5] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT16 ( (uint32_t)1 << 16) /**< 0:pwmt2_ch0 enable; 1:usbdet enable */
#define IOCTRL_SWAPCR3_SWAP_BIT17 ( (uint32_t)1 << 17) /**< 0:pwmt2_ch0n enable; 1:isodat2 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT18 ( (uint32_t)1 << 18) /**< 0:pwmt2_ch1 enable; 1:wakeup enable */
#define IOCTRL_SWAPCR3_SWAP_BIT19 ( (uint32_t)1 << 19) /**< 0:pwmt2_ch1n enable; 1:isoclk2 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT20 ( (uint32_t)1 << 20) /**< 0:pwmt2_ch2 enable; 1:clkout enable */
#define IOCTRL_SWAPCR3_SWAP_BIT21 ( (uint32_t)1 << 21) /**< 0:pwmt2_ch2n enable; 1:isorst2 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT22 ( (uint32_t)1 << 22) /**< 0:pwmt2_ch3 enable; 1:rstout enable */
#define IOCTRL_SWAPCR3_SWAP_BIT23 ( (uint32_t)1 << 23) /**< 0:pwmt2_ch3n enable; 1:isodat1 enable */
#define IOCTRL_SWAPCR3_SWAP_BIT24 ( (uint32_t)1 << 24) /**< 0:pwmt3_ch0 enable; 1:gint[24] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT25 ( (uint32_t)1 << 25) /**< 0:pwmt3_ch0n enable; 1:gint[25] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT26 ( (uint32_t)1 << 26) /**< 0:pwmt3_ch1 enable; 1:gint[26] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT27 ( (uint32_t)1 << 27) /**< 0:pwmt3_ch1n enable; 1:gint[27] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT28 ( (uint32_t)1 << 28) /**< 0:pwmt3_ch2 enable; 1:gint[28] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT29 ( (uint32_t)1 << 29) /**< 0:pwmt3_ch2n enable; 1:gint[29] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT30 ( (uint32_t)1 << 30) /**< 0:pwmt3_ch3 enable; 1:gint[30] enable */
#define IOCTRL_SWAPCR3_SWAP_BIT31 ( (uint32_t)1 << 31) /**< 0:pwmt3_ch3n enable; 1:gint[31] enable */

/*SWAPCR4*/
#define IOCTRL_SWAPCR4_SWAP_BIT0 ( (uint32_t)1 << 0)   /**< 0:sck1 enable; 1:acmp_vin0 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT1 ( (uint32_t)1 << 1)   /**< 0:mosi1 enable; 1:acmp_vin1 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT2 ( (uint32_t)1 << 2)   /**< 0:ss1 enable; 1:acmp_vin2 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT3 ( (uint32_t)1 << 3)   /**< 0:miso1 enable; 1:acmp_vin3 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT4 ( (uint32_t)1 << 4)   /**< 0:rxd3 enable; 1:acmp_vin4 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT5 ( (uint32_t)1 << 5)   /**< 0:sck2 enable; 1:acmp_vin5 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT6 ( (uint32_t)1 << 6)   /**< 0:mosi2 enable; 1:acmp_vin6 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT7 ( (uint32_t)1 << 7)   /**< 0:sda2 enable; 1:acmp_vin7 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT8 ( (uint32_t)1 << 8)   /**< 0:gint[38] enable; 1:acmp_vip0 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT9 ( (uint32_t)1 << 9)   /**< 0:gint[39] enable; 1:acmp_vip1 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT10 ( (uint32_t)1 << 10) /**< 0:gint[12] enable; 1:acmp_vip2 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT11 ( (uint32_t)1 << 11) /**< 0:rxd2 enable; 1:acmp_vip3 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT12 ( (uint32_t)1 << 12) /**< 0:txd3 enable; 1:acmp_vip4 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT13 ( (uint32_t)1 << 13) /**< 0:ss2 enable; 1:acmp_vip5 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT14 ( (uint32_t)1 << 14) /**< 0:mosi2 enable; 1:acmp_vip6 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT15 ( (uint32_t)1 << 15) /**< 0:scl2 enable; 1:acmp_vip7 enable */
#define IOCTRL_SWAPCR4_SWAP_BIT16 ( (uint32_t)1 << 16) /**< 0:scl enable; 1:acmp1_out enable */
#define IOCTRL_SWAPCR4_SWAP_BIT17 ( (uint32_t)1 << 17) /**< 0:sda enable; 1:acmp2_out enable */
#define IOCTRL_SWAPCR4_SWAP_BIT18 ( (uint32_t)1 << 18) /**< 0:txd enable; 1:acmp1_out enable */
#define IOCTRL_SWAPCR4_SWAP_BIT19 ( (uint32_t)1 << 19) /**< 0:rxd enable; 1:acmp2_out enable */
#define IOCTRL_SWAPCR4_SWAP_BIT20 ( (uint32_t)1 << 20) /**< 0:clkout enable; 1:gint[23] enable */
#define IOCTRL_SWAPCR4_SWAP_BIT21 ( (uint32_t)1 << 21) /**< 0:rstout enable; 1:gint[23] enable */
#define IOCTRL_SWAPCR4_SWAP_BIT22 ( (uint32_t)1 << 22) /**< 0:clkout enable; 1:i2s1_nreset enable */
#define IOCTRL_SWAPCR4_SWAP_BIT23 ( (uint32_t)1 << 23) /**< 0:isodat1 enable; 1:i2s2_nreset enable */
#define IOCTRL_SWAPCR4_SWAP_BIT24 ( (uint32_t)1 << 24) /**< 0:gint[2] enable; 1:i2s1_sd enable */
#define IOCTRL_SWAPCR4_SWAP_BIT25 ( (uint32_t)1 << 25) /**< 0:gint[3] enable; 1:i2s1_lrck enable */
#define IOCTRL_SWAPCR4_SWAP_BIT26 ( (uint32_t)1 << 26) /**< 0:gint[4] enable; 1:i2s1_sclk enable */
#define IOCTRL_SWAPCR4_SWAP_BIT27 ( (uint32_t)1 << 27) /**< 0:gint[5] enable; 1:i2s1_mclk enable */
#define IOCTRL_SWAPCR4_SWAP_BIT28 ( (uint32_t)1 << 28) /**< 0:gint[0] enable; 1:i2s2_sd enable */
#define IOCTRL_SWAPCR4_SWAP_BIT29 ( (uint32_t)1 << 29) /**< 0:gint[1] enable; 1:i2s2_lrck enable */
#define IOCTRL_SWAPCR4_SWAP_BIT30 ( (uint32_t)1 << 30) /**< 0:isoclk1 enable; 1:i2s2_srck enable */
#define IOCTRL_SWAPCR4_SWAP_BIT31 ( (uint32_t)1 << 31) /**< 0:isorst1 enable; 1:i2s2_mclk enable */

/*SWAPCR5*/
#define IOCTRL_SWAPCR5_SWAP_BIT0 ( (uint32_t)1 << 0)   /**< 0:gint[24] enable; 1:can1_tx enable */
#define IOCTRL_SWAPCR5_SWAP_BIT1 ( (uint32_t)1 << 1)   /**< 0:gint[25] enable; 1:can1_rx enable */
#define IOCTRL_SWAPCR5_SWAP_BIT2 ( (uint32_t)1 << 2)   /**< 0:gint[26] enable; 1:can2_tx enable */
#define IOCTRL_SWAPCR5_SWAP_BIT3 ( (uint32_t)1 << 3)   /**< 0:gint[27] enable; 1:can2_rx enable */
#define IOCTRL_SWAPCR5_SWAP_BIT4 ( (uint32_t)1 << 4)   /**< 0:gint[16] enable; 1:spi4[2] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT5 ( (uint32_t)1 << 5)   /**< 0:gint[17] enable; 1:spi4[3] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT6 ( (uint32_t)1 << 6)   /**< 0:gint[18] enable; 1:spi4[0] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT7 ( (uint32_t)1 << 7)   /**< 0:gint[19] enable; 1:spi4[1] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT8 ( (uint32_t)1 << 8)   /**< 0:gint[20] enable; 1:spi4_sck enable */
#define IOCTRL_SWAPCR5_SWAP_BIT9 ( (uint32_t)1 << 9)   /**< 0:gint[21] enable; 1:spi4_ss enable */
#define IOCTRL_SWAPCR5_SWAP_BIT10 ( (uint32_t)1 << 10) /**< 0:gint[38] enable; 1:spi5[2] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT11 ( (uint32_t)1 << 11) /**< 0:gint[39] enable; 1:spi5[3] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT12 ( (uint32_t)1 << 12) /**< 0:mosi1 enable; 1:spi5[0] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT13 ( (uint32_t)1 << 13) /**< 0:miso1 enable; 1:spi5[1] enable */
#define IOCTRL_SWAPCR5_SWAP_BIT14 ( (uint32_t)1 << 14) /**< 0:sck1 enable; 1:spi5_sck enable */
#define IOCTRL_SWAPCR5_SWAP_BIT15 ( (uint32_t)1 << 15) /**< 0:ss1 enable; 1:spi5_ss enable */
#define IOCTRL_SWAPCR5_SWAP_BIT16 ( (uint32_t)1 << 16) /**< 0:scl enable; 1:can1_tx2 enable */
#define IOCTRL_SWAPCR5_SWAP_BIT17 ( (uint32_t)1 << 17) /**< 0:sda enable; 1:can1_rx2 enable */
#define IOCTRL_SWAPCR5_SWAP_BIT18 ( (uint32_t)1 << 18) /**< 0:isoclk1 enable; 1:can2_tx2 enable */
#define IOCTRL_SWAPCR5_SWAP_BIT19 ( (uint32_t)1 << 19) /**< 0:isorst1 enable; 1:can1_tx2 enable */
#define IOCTRL_SWAPCR5_SWAP_BIT20 ( (uint32_t)1 << 20) /**< 0:isoclk2 enable; 1:txd4    enable */
#define IOCTRL_SWAPCR5_SWAP_BIT21 ( (uint32_t)1 << 21)/**< 0:isorst2 enable; 1:rxd4    enable */
#define IOCTRL_SWAPCR5_SWAP_BIT22 ( (uint32_t)1 << 22) /**< 0:isodata2 enable; 1:txd5   enable */
#define IOCTRL_SWAPCR5_SWAP_BIT23 ( (uint32_t)1 << 23) /**< 0:isodata1 enable; 1:rxd5   enable */
#define IOCTRL_SWAPCR5_SWAP_BIT24 ( (uint32_t)1 << 24)  /**< 0:gint14 enable; 1:txd6    enable */
#define IOCTRL_SWAPCR5_SWAP_BIT25 ( (uint32_t)1 << 25)  /**< 0:gint15 enable; 1:rxd6    enable */
/*I2SIOCR*/
#define IOCTRL_I2SIOCR_I2S1_DS1_DS0 (0x03 << 0)   /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_I2SIOCR_I2S1_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_I2SIOCR_I2S1_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_I2SIOCR_I2S1_SR ( (uint32_t)1 << 2)        
#define IOCTRL_I2SIOCR_I2S1_IS ( (uint32_t)1 << 3)        
#define IOCTRL_I2SIOCR_I2S2_DS1_DS0 (0x03 << 4)   /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_I2SIOCR_I2S2_DS0 ( (uint32_t)1 << 4)       
#define IOCTRL_I2SIOCR_I2S2_DS1 ( (uint32_t)1 << 5)       
#define IOCTRL_I2SIOCR_I2S2_SR ( (uint32_t)1 << 6)        
#define IOCTRL_I2SIOCR_I2S2_IS ( (uint32_t)1 << 7)        
#define IOCTRL_I2SIOCR_I2S1_SD_PUE ( (uint32_t)1 << 8)    
#define IOCTRL_I2SIOCR_I2S1_SCLK_PUE ( (uint32_t)1 << 10) 
#define IOCTRL_I2SIOCR_I2S2_SD_PUE ( (uint32_t)1 << 12)   
#define IOCTRL_I2SIOCR_I2S2_SCLK_PUE ( (uint32_t)1 << 14) 
#define IOCTRL_I2SIOCR_I2S1_SD_IE ( (uint32_t)1 << 16)    
#define IOCTRL_I2SIOCR_I2S1_SCLK_IE ( (uint32_t)1 << 18)  
#define IOCTRL_I2SIOCR_I2S2_SD_IE ( (uint32_t)1 << 20)    
#define IOCTRL_I2SIOCR_I2S2_SCLK_IE ( (uint32_t)1 << 22)  
#define IOCTRL_I2SIOCR_I2S1_SD_PS ( (uint32_t)1 << 24)    
#define IOCTRL_I2SIOCR_I2S1_SCLK_PS ( (uint32_t)1 << 26)  
#define IOCTRL_I2SIOCR_I2S2_SD_PS ( (uint32_t)1 << 28)    
#define IOCTRL_I2SIOCR_I2S2_SCLK_PS ( (uint32_t)1 << 30)  

/*SSISLVCR*/
#define IOCTRL_SSISLVCR_DS1_DS0 (0x03 << 0)           /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_SSISLVCR_DS0 ( (uint32_t)1 << 0)               
#define IOCTRL_SSISLVCR_DS1 ( (uint32_t)1 << 1)               
#define IOCTRL_SSISLVCR_SR ( (uint32_t)1 << 2)                
#define IOCTRL_SSISLVCR_IS ( (uint32_t)1 << 3)                
#define IOCTRL_SSISLVCR_PUE ( (uint32_t)1 << 4)               /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_SSISLVCR_ODE ( (uint32_t)1 << 5)               
#define IOCTRL_SSISLVCR_SSISLV1_IE (16)               
#define IOCTRL_SSISLVCR_SSISLV1_SS_IE ( (uint32_t)1 << 16)    
#define IOCTRL_SSISLVCR_SSISLV1_SCK_IE ( (uint32_t)1 << 17)   
#define IOCTRL_SSISLVCR_SSISLV1_DATA0_IE ( (uint32_t)1 << 18) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA1_IE ( (uint32_t)1 << 19) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA2_IE ( (uint32_t)1 << 20) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA3_IE ( (uint32_t)1 << 21) 
#define IOCTRL_SSISLVCR_SSISLV1_PS (24)               
#define IOCTRL_SSISLVCR_SSISLV1_SS_PS ( (uint32_t)1 << 24)    
#define IOCTRL_SSISLVCR_SSISLV1_SCK_PS ( (uint32_t)1 << 25)   
#define IOCTRL_SSISLVCR_SSISLV1_DATA0_PS ( (uint32_t)1 << 26) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA1_PS ( (uint32_t)1 << 27) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA2_PS ( (uint32_t)1 << 28) 
#define IOCTRL_SSISLVCR_SSISLV1_DATA3_PS ( (uint32_t)1 << 29) 

/*PWMTCR*/
#define IOCTRL_PWMTCR_PWMT1_ETR_PUE ( (uint32_t)1 << 0) 
#define IOCTRL_PWMTCR_PWMT1_BRK_PUE ( (uint32_t)1 << 1) 
#define IOCTRL_PWMTCR_PWMT2_ETR_PUE ( (uint32_t)1 << 2) 
#define IOCTRL_PWMTCR_PWMT2_BRK_PUE ( (uint32_t)1 << 3) 
#define IOCTRL_PWMTCR_PWMT3_ETR_PUE ( (uint32_t)1 << 4) 
#define IOCTRL_PWMTCR_PWMT3_BRK_PUE ( (uint32_t)1 << 5) 

/*CANCR*/
#define IOCTRL_CANCR_CAN1_RX_PUE ( (uint32_t)1 << 0) 
#define IOCTRL_CANCR_CAN1_TX_PUE ( (uint32_t)1 << 1) 
#define IOCTRL_CANCR_CAN2_RX_PUE ( (uint32_t)1 << 2) 
#define IOCTRL_CANCR_CAN2_TX_PUE ( (uint32_t)1 << 3) 

/*SPI1CR*/
#define IOCTRL_SPI1CR_D_DS1_DS0 (0x03 << 0)   /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_SPI1CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPI1CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPI1CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPI1CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPI1CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPI1CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPI1CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPI1CR_SCK_SR ( (uint32_t)1 << 10)     
#define IOCTRL_SPI1CR_SCK_IS ( (uint32_t)1 << 11)     
#define IOCTRL_SPI1CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPI1CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPI1CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPI1CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPI1CR_SS_IS ( (uint32_t)1 << 15)      

/*SPI2CR*/
#define IOCTRL_SPI2CR_D_DS1_DS0 (0x03 << 0)   /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_SPI2CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPI2CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPI2CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPI2CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPI2CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPI2CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPI2CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPI2CR_SCK_SR ( (uint32_t)1 << 10)     
#define IOCTRL_SPI2CR_SCK_IS ( (uint32_t)1 << 11)     
#define IOCTRL_SPI2CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPI2CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPI2CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPI2CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPI2CR_SS_IS ( (uint32_t)1 << 15)      

/*SPI3CR*/
#define IOCTRL_SPI3CR_D_DS1_DS0 (0x03 << 0)   /**< 00=2mA 01=8mA 10=4mA 11=12mA */
#define IOCTRL_SPI3CR_D_DS0 ( (uint32_t)1 << 0)       
#define IOCTRL_SPI3CR_D_DS1 ( (uint32_t)1 << 1)       
#define IOCTRL_SPI3CR_D_SR ( (uint32_t)1 << 2)        
#define IOCTRL_SPI3CR_D_IS ( (uint32_t)1 << 3)        
#define IOCTRL_SPI3CR_SCK_DS1_DS0 (0x03 << 8) 
#define IOCTRL_SPI3CR_SCK_DS0 ( (uint32_t)1 << 8)     
#define IOCTRL_SPI3CR_SCK_DS1 ( (uint32_t)1 << 9)     
#define IOCTRL_SPI3CR_SCK_SR ( (uint32_t)1 << 10)     
#define IOCTRL_SPI3CR_SCK_IS ( (uint32_t)1 << 11)     
#define IOCTRL_SPI3CR_SS_DS1_DS0 (0x03 << 12) 
#define IOCTRL_SPI3CR_SS_DS0 ( (uint32_t)1 << 12)     
#define IOCTRL_SPI3CR_SS_DS1 ( (uint32_t)1 << 13)     
#define IOCTRL_SPI3CR_SS_SR ( (uint32_t)1 << 14)      
#define IOCTRL_SPI3CR_SS_IS ( (uint32_t)1 << 15)      

#endif /* end __IO_CONTROL__ */

#define __PIT__
#ifdef __PIT__
/*****************  Bit definition for PIT_PCSR/PIT32_PCSR register  *****************/
#define PIT_PCSR_EN (1 << 0) /**< =1,��PITʹ�� */
#define PIT_PCSR_RLD (1 << 1)
#define PIT_PCSR_PIF (1 << 2) /**< =1,��PIT�����ﵽ��0,���Ҳ������ж��ź� */
#define PIT_PCSR_PIE (1 << 3) /**< =1,��PIT�ж�����ʹ�� */
#define PIT_PCSR_OVW (1 << 4)
#define PIT_PCSR_PDBG (1 << 5)
#define PIT_PCSR_PDOZE (1 << 6)
#define PIT_PCSR_PRESCALER_1 (0x00 << 8)     /**< PITģ���Ƶ��ֵ:1��Ƶ    */
#define PIT_PCSR_PRESCALER_2 ( (uint32_t)1 << 8)     /**< PITģ���Ƶ��ֵ:2��Ƶ    */
#define PIT_PCSR_PRESCALER_4 (0x02 << 8)     /**< PITģ���Ƶ��ֵ:4��Ƶ    */
#define PIT_PCSR_PRESCALER_8 (0x03 << 8)     /**< PITģ���Ƶ��ֵ:8��Ƶ    */
#define PIT_PCSR_PRESCALER_16 (0x04 << 8)    /**< PITģ���Ƶ��ֵ:16��Ƶ   */
#define PIT_PCSR_PRESCALER_32 (0x05 << 8)    /**< PITģ���Ƶ��ֵ:32��Ƶ   */
#define PIT_PCSR_PRESCALER_64 (0x06 << 8)    /**< PITģ���Ƶ��ֵ:64��Ƶ   */
#define PIT_PCSR_PRESCALER_128 (0x07 << 8)   /**< PITģ���Ƶ��ֵ:128��Ƶ  */
#define PIT_PCSR_PRESCALER_256 (0x08 << 8)   /**< PITģ���Ƶ��ֵ:256��Ƶ  */
#define PIT_PCSR_PRESCALER_512 (0x09 << 8)   /**< PITģ���Ƶ��ֵ:512��Ƶ  */
#define PIT_PCSR_PRESCALER_1024 (0x0a << 8)  /**< PITģ���Ƶ��ֵ:1024��Ƶ */
#define PIT_PCSR_PRESCALER_2048 (0x0b << 8)  /**< PITģ���Ƶ��ֵ:��Ƶ2048 */
#define PIT_PCSR_PRESCALER_4096 (0x0c << 8)  /**< PITģ���Ƶ��ֵ:��Ƶ4096 */
#define PIT_PCSR_PRESCALER_8192 (0x0d << 8)  /**< PITģ���Ƶ��ֵ:��Ƶ8192 */
#define PIT_PCSR_PRESCALER_16384 (0x0e << 8) /**< PITģ���Ƶ��ֵ:��Ƶ16384 */
#define PIT_PCSR_PRESCALER_32968 (0x0f << 8) /**< PITģ���Ƶ��ֵ:��Ƶ32768 */

#endif /* end __PIT__ */

#define __PWM__
#ifdef __PWM__
/*****************  Bit definition for PWM register  *****************/
#define PWM_PDZR1_DZ3_SHIFT               24
#define PWM_PDZR1_DZ2_SHIFT               16
#define PWM_PDZR1_DZ1_SHIFT               8
#define PWM_PDZR1_DZ0_SHIFT               0
#define PWM_PPR_CP3_SHIFT                 24
#define PWM_PPR_CP2_SHIFT                 16
#define PWM_PPR_CP1_SHIFT                 8
#define PWM_PPR_CP0_SHIFT                 0

#define PWM_PCSR_CSR7_SHIFT 28
#define PWM_PCSR_CSR6_SHIFT 24
#define PWM_PCSR_CSR5_SHIFT 20
#define PWM_PCSR_CSR4_SHIFT 16
#define PWM_PCSR_CSR3_SHIFT 12
#define PWM_PCSR_CSR2_SHIFT 8
#define PWM_PCSR_CSR1_SHIFT 4
#define PWM_PCSR_CSR0_SHIFT 0

#define PWM_PCR_CH0EN (1 << 0)
#define PWM_PCR_CH0INV (1 << 2)
#define PWM_PCR_CH0MOD (1 << 3)
#define PWM_PCR_DZ0EN (1 << 4)
#define PWM_PCR_DZ1EN (1 << 5)
#define PWM_PCR_CH1EN (1 << 8)
#define PWM_PCR_CH1INV (1 << 10)
#define PWM_PCR_CH1MOD (1 << 11)
#define PWM_PCR_CH2EN (1 << 16)
#define PWM_PCR_CH2INV (1 << 18)
#define PWM_PCR_CH2MOD (1 << 19)
#define PWM_PCR_CH3EN (1 << 24)
#define PWM_PCR_CH3INV (1 << 26)
#define PWM_PCR_CH3MOD (1 << 27)
#define PWM_PCR_CH4EN (1 << 1)
#define PWM_PCR_CH5EN (1 << 9)
#define PWM_PCR_CH6EN (1 << 17)
#define PWM_PCR_CH7EN (1 << 25)

#define PWM_PCR1_CH4INV (1 << 2)
#define PWM_PCR1_CH4MOD (1 << 3)
#define PWM_PCR1_CH5INV (1 << 10)
#define PWM_PCR1_CH5MOD (1 << 11)
#define PWM_PCR1_CH6INV (1 << 18)
#define PWM_PCR1_CH6MOD (1 << 19)
#define PWM_PCR1_CH7INV (1 << 26)
#define PWM_PCR1_CH7MOD (1 << 27)
#define PWM_PCR1_DZ2EN (1 << 4)
#define PWM_PCR1_DZ3EN (1 << 5)

#define PWM_PIER_CH0INT_EN (1 << 0)
#define PWM_PIER_CH1INT_EN (1 << 1)
#define PWM_PIER_CH2INT_EN (1 << 2)
#define PWM_PIER_CH3INT_EN (1 << 3)
#define PWM_PIER_CH4INT_EN (1 << 4)
#define PWM_PIER_CH5INT_EN (1 << 5)
#define PWM_PIER_CH6INT_EN (1 << 6)
#define PWM_PIER_CH7INT_EN (1 << 7)

#define PWM_PIFR_CH0INT (1 << 0)
#define PWM_PIFR_CH1INT (1 << 1)
#define PWM_PIFR_CH2INT (1 << 2)
#define PWM_PIFR_CH3INT (1 << 3)
#define PWM_PIFR_CH4INT (1 << 4)
#define PWM_PIFR_CH5INT (1 << 5)
#define PWM_PIFR_CH6INT (1 << 6)
#define PWM_PIFR_CH7INT (1 << 7)

#define PWM_PCCR0_CH0_INV (1 << 0)
#define PWM_PCCR0_CH0_RLINT (1 << 1)
#define PWM_PCCR0_CH0_FLINT (1 << 2)
#define PWM_PCCR0_CH0_CAPEN (1 << 3)
#define PWM_PCCR0_CH0_CAPIF (1 << 4)
#define PWM_PCCR0_CH0_CRLRD (1 << 6)
#define PWM_PCCR0_CH0_CFLRD (1 << 7)
#define PWM_PCCR0_CH1_INV (1 << 16)
#define PWM_PCCR0_CH1_RLINT (1 << 17)
#define PWM_PCCR0_CH1_FLINT (1 << 18)
#define PWM_PCCR0_CH1_CAPEN (1 << 19)
#define PWM_PCCR0_CH1_CAPIF (1 << 20)
#define PWM_PCCR0_CH1_CRLRD (1 << 22)
#define PWM_PCCR0_CH1_CFLRD (1 << 23)

#define PWM_PCCR1_CH2_INV (1 << 0)
#define PWM_PCCR1_CH2_RLINT (1 << 1)
#define PWM_PCCR1_CH2_FLINT (1 << 2)
#define PWM_PCCR1_CH2_CAPEN (1 << 3)
#define PWM_PCCR1_CH2_CAPIF (1 << 4)
#define PWM_PCCR1_CH2_CRLRD (1 << 6)
#define PWM_PCCR1_CH2_CFLRD (1 << 7)
#define PWM_PCCR1_CH3_INV (1 << 16)
#define PWM_PCCR1_CH3_RLINT (1 << 17)
#define PWM_PCCR1_CH3_FLINT (1 << 18)
#define PWM_PCCR1_CH3_CAPEN (1 << 19)
#define PWM_PCCR1_CH3_CAPIF (1 << 20)
#define PWM_PCCR1_CH3_CRLRD (1 << 22)
#define PWM_PCCR1_CH3_CFLRD (1 << 23)

#define PWM_PCCR2_CH4_INV (1 << 0)
#define PWM_PCCR2_CH4_RLINT (1 << 1)
#define PWM_PCCR2_CH4_FLINT (1 << 2)
#define PWM_PCCR2_CH4_CAPEN (1 << 3)
#define PWM_PCCR2_CH4_CAPIF (1 << 4)
#define PWM_PCCR2_CH4_CRLRD (1 << 6)
#define PWM_PCCR2_CH4_CFLRD (1 << 7)
#define PWM_PCCR2_CH5_INV (1 << 16)
#define PWM_PCCR2_CH5_RLINT (1 << 17)
#define PWM_PCCR2_CH5_FLINT (1 << 18)
#define PWM_PCCR2_CH5_CAPEN (1 << 19)
#define PWM_PCCR2_CH5_CAPIF (1 << 20)
#define PWM_PCCR2_CH5_CRLRD (1 << 22)
#define PWM_PCCR2_CH5_CFLRD (1 << 23)

#define PWM_PCCR3_CH6_INV (1 << 0)
#define PWM_PCCR3_CH6_RLINT (1 << 1)
#define PWM_PCCR3_CH6_FLINT (1 << 2)
#define PWM_PCCR3_CH6_CAPEN (1 << 3)
#define PWM_PCCR3_CH6_CAPIF (1 << 4)
#define PWM_PCCR3_CH6_CRLRD (1 << 6)
#define PWM_PCCR3_CH6_CFLRD (1 << 7)
#define PWM_PCCR3_CH7_INV (1 << 16)
#define PWM_PCCR3_CH7_RLINT (1 << 17)
#define PWM_PCCR3_CH7_FLINT (1 << 18)
#define PWM_PCCR3_CH7_CAPEN (1 << 19)
#define PWM_PCCR3_CH7_CAPIF (1 << 20)
#define PWM_PCCR3_CH7_CRLRD (1 << 22)
#define PWM_PCCR3_CH7_CFLRD (1 << 23)

#define PWM_PPCR_CH0_BITSET (1 << 0)
#define PWM_PPCR_CH1_BITSET (1 << 1)
#define PWM_PPCR_CH2_BITSET (1 << 2)
#define PWM_PPCR_CH3_BITSET (1 << 3)
#define PWM_PPCR_CH4_BITSET (1 << 4)
#define PWM_PPCR_CH5_BITSET (1 << 5)
#define PWM_PPCR_CH6_BITSET (1 << 6)
#define PWM_PPCR_CH7_BITSET (1 << 7)
#define PWM_PPCR_CH0_PULLUP (1 << 8)
#define PWM_PPCR_CH1_PULLUP (1 << 9)
#define PWM_PPCR_CH2_PULLUP (1 << 10)
#define PWM_PPCR_CH3_PULLUP (1 << 11)
#define PWM_PPCR_CH4_PULLUP (1 << 12)
#define PWM_PPCR_CH5_PULLUP (1 << 13)
#define PWM_PPCR_CH6_PULLUP (1 << 14)
#define PWM_PPCR_CH7_PULLUP (1 << 15)
#define PWM_PPCR_CH0_OUTPUT (1 << 16)
#define PWM_PPCR_CH1_OUTPUT (1 << 17)
#define PWM_PPCR_CH2_OUTPUT (1 << 18)
#define PWM_PPCR_CH3_OUTPUT (1 << 19)
#define PWM_PPCR_CH4_OUTPUT (1 << 20)
#define PWM_PPCR_CH5_OUTPUT (1 << 21)
#define PWM_PPCR_CH6_OUTPUT (1 << 22)
#define PWM_PPCR_CH7_OUTPUT (1 << 23)

#define PWM_PFPM_CH0_ENABLE (1 << 0)
#define PWM_PFPM_CH1_ENABLE (1 << 1)
#define PWM_PFPM_CH2_ENABLE (1 << 2)
#define PWM_PFPM_CH3_ENABLE (1 << 3)
#define PWM_PFPM_CH4_ENABLE (1 << 4)
#define PWM_PFPM_CH5_ENABLE (1 << 5)
#define PWM_PFPM_CH6_ENABLE (1 << 6)
#define PWM_PFPM_CH7_ENABLE (1 << 7)
#define PWM_PFPM_PDER (1 << 31)

#endif /* end __PWM__ */
#define __RESET__
#ifdef __RESET__
/*** RESET **********************************************/
/*** RCR ************/
#define RESET_RCR_HFDE (((uint32_t)1U << 0))
#define RESET_RCR_HFDRE (((uint32_t)1U << 1))
#define RESET_RCR_HFDIE (((uint32_t)1U << 2))
#define RESET_RCR_HFDF (((uint32_t)1U << 3))
#define RESET_RCR_LFDE (((uint32_t)1U << 8))
#define RESET_RCR_LFDRE (((uint32_t)1U << 9))
#define RESET_RCR_LFDIE (((uint32_t)1U << 10))
#define RESET_RCR_LFDF (((uint32_t)1U << 11))
#define RESET_RCR_HVDE (((uint32_t)1U << 16))
#define RESET_RCR_HVDRE (((uint32_t)1U << 17))
#define RESET_RCR_HVDIE (((uint32_t)1U << 18))
#define RESET_RCR_HVDF (((uint32_t)1U << 19))
#define RESET_RCR_CRWE (((uint32_t)1U << 22))
#define RESET_RCR_CRE (((uint32_t)1U << 23))
#define RESET_RCR_LVDE (((uint32_t)1U << 24))
#define RESET_RCR_LVDRE (((uint32_t)1U << 25))
#define RESET_RCR_LVDIE (((uint32_t)1U << 26))
#define RESET_RCR_LVDF (((uint32_t)1U << 27))
#define RESET_RCR_FRCR_STOUT (((uint32_t)1U << 30))
#define RESET_RCR_SOFTRST (((uint32_t)1U << 31))

#endif /* end RESET */

#define __SECDET__
#ifdef __SECDET__
/*** SECURE DETECT **********************************************/
/*** TS1CR ************/
#define SECDET_TS1CR_HT_HYS (((uint32_t)1U << 9))
#define SECDET_TS1CR_LT_HYS (((uint32_t)1U << 10))
#define SECDET_TS1CR_TS_EN (((uint32_t)1U << 11))
#define SECDET_TS1CR_BG_EN (((uint32_t)1U << 12))
#define SECDET_TS1CR_TS_HTEMP_REN (((uint32_t)1U << 27))
#define SECDET_TS1CR_TS_HTEMP_IEN (((uint32_t)1U << 28))
#define SECDET_TS1CR_TS_TEMP_ST_SEL (((uint32_t)1U << 29))
#define SECDET_TS1CR_TS_LTEMP_REN (((uint32_t)1U << 30))
#define SECDET_TS1CR_TS_LTEMP_IEN (((uint32_t)1U << 31))

/*** TS1SR ************/
#define SECDET_TS1SR_TS_LTEMP_ST (((uint32_t)1U << 0))
#define SECDET_TS1SR_TS_HTEMP_ST (((uint32_t)1U << 1))
#define SECDET_TS1SR_TS_LTEMP_ST_LAT (((uint32_t)1U << 2))
#define SECDET_TS1SR_TS_HTEMP_ST_LAT (((uint32_t)1U << 3))

/*** OBTCR ************/
#define SECDET_OBTCR_BIST_EN (((uint32_t)1U << 8))
#define SECDET_OBTCR_BIST_IRC_EN (((uint32_t)1U << 10))
#define SECDET_OBTCR_BIST_START (((uint32_t)1U << 15))

/*** OBTCR ************/
#define SECDET_LFTR_BIST_TRACE_LOOP (((uint32_t)1U << 16))


#endif /* end __SECDET__ */

#define __SPI__
#ifdef __SPI__
/*** SPI **********************************************/
/*SPIFR*/
#define SPI_FRAME_FORMAT_TI ((uint8_t)(1 << 4))                      /**< TI frame format*/
#define SPI_FRAME_FORMAT_FREESCALE ((uint8_t)(~SPI_FRAME_FORMAT_TI)) /**< freescale frame format*/
#define SPI_LOOP_BACK_MODE ((uint8_t)(1 << 5))                       /**< loop back mode*/
#define SPI_LOOP_NORMAL_MODE ((uint8_t)(~SPI_LOOP_BACK_MODE))        /**< normal mode*/
#define SPI_EN_GUARD_TIME ((uint8_t)(1 << 6))                        /**< guard time is enable*/
#define SPI_DIS_GUARD_TIME ((uint8_t)(~SPI_EN_GUARD_TIME))           /**< guard time is disable*/
#define SPI_EN_CONT_CS ((uint8_t)(1 << 7))                           /**< keep peripheral chip select signal low between transfer until EOTF is set*/
#define SPI_DIS_CONT_CS ((uint8_t)(~SPI_EN_CONT_CS))                 /**< return peripheral chip select singnal to high between transfers*/
#define SPI_FRAME_SIZE_MASK ((uint8_t)(0xF0))                        /**< */
#define SPI_FRAME_SIZE_SHIFT_MASK ((uint8_t)(0))                     /**< */
/*CR1*/
#define SPI_FIRSTBIT_LSB ((uint8_t)(1 << 0))             /**< ��y?Y��?��?LSB                             */
#define SPI_FIRSTBIT_MSB ((uint8_t)(0xFE))               /**< ��y?Y��?��?MSB                             */
#define SPI_EN_SSOE ((uint8_t)(1 << 1))                  /**< SPI ????SS1��??���¨�????��                  */
#define SPI_DIS_SSOE ((uint8_t)(0xFD))                   /**< SPI ????SS1��??���¨�????��                  */
#define SPI_CPHA_1EDGE ((uint8_t)(0xFB))                 /**< SPI CPHA��y?Y2��?����?????��?:SPI_CPHA_2EDGE */
#define SPI_CPHA_2EDGE ((uint8_t)(1 << 2))               /**< SPI CPHA��y?Y2��?����?????��?:1EDGE          */
#define SPI_CPOL_HIGH ((uint8_t)(1 << 3))                /**< SPI CPOL???D������???����??:??               */
#define SPI_CPOL_LOW ((uint8_t)(0xF7))                   /**< SPI CPOL???D������???����??:�̨�               */
#define SPI_MASTER ((uint8_t)(1 << 4))                   /**< SPI1�����?�꨺?:?��?�꨺?                      */
#define SPI_SLAVE ((uint8_t)(0xEF))                      /**< SPI1�����?�꨺?:�䨮?�꨺?                      */
#define SPI_WIRED_OR_MODE_OPEN_DRAIN ((uint8_t)(1 << 5)) /**< SPI��?3??�꨺?:?a??��?3?                    */
#define SPI_WIRED_OR_MODE_CMOS ((uint8_t)(0xDF))         /**< SPI��?3??�꨺?:CMOS��?3?                    */
#define SPI_EN_SSOE ((uint8_t)(1 << 1))                  /**< SPI ????SS1��??���¨�?��1?��                  */
#define SPI_EN ((uint8_t)(1 << 6))                       /**< SPI?��?����1?��                             */
#define SPI_DIS ((uint8_t)(0xBF))                        /**< SPI?��?��???1                             */
#define SPI_EN_IT ((uint8_t)(1 << 7))                    /**< SPI?D??��1?��                             */
#define SPI_DIS_IT ((uint8_t)(~SPI_EN_IT))               /**< SPI?D?????1                             */
/*SPICR2*/
#define SPI_SPC0_BIDIR_MODE ((uint8_t)(1 << 0))    /**< ???????��1��???�꨺?:???��                   */
#define SPI_SPC0_NORMAL_MODE ((uint8_t)(0xFE))     /**< ????SPI?��DOZE?�꨺???:?y3��?�꨺?            */
#define SPI_DOZE_INACTIVE_MODE ((uint8_t)(1 << 1)) /**< ????SPI?��DOZE?�꨺???:����?1                */
#define SPI_DOZE_ACTIVE_MODE ((uint8_t)(0xFD))     /**< ????SPI?��DOZE?�꨺???:?y3��1�����            */
#define SPI_GUARD_TIME_MASK ((uint8_t)(0x03))      /**< */
#define SPI_GUARD_TIME_SHIFT_MASK ((uint8_t)(2))   /**< */
/*SPITXFTOCTR TX FIFO timeout counter register*/
#define SPI_EN_TX_FIFO_TINEOUT ((uint8_t)(1 << 6))                         /**< TX FIFO timeout funtion enable   */
#define SPI_DIS_TX_FIFO_TIMEOUT ((uint8_t)(~SPI_EN_TX_FIFO_TINEOUT))       /**< TX FIFO timeout funtion disable  */
#define SPI_EN_TX_FIFO_TINEOUT_IT ((uint8_t)(1 << 7))                      /**< TX FIFO timeout interrupt enable */
#define SPI_DIS_TX_FIFO_TIMEOUT_IT ((uint8_t)(~SPI_EN_TX_FIFO_TINEOUT_IT)) /**< TX FIFO timeout interrupt disable*/
#define SPI_TX_FIFO_TIMEOUT_CNT_MASK ((uint8_t)(0xC0))
/*SPITXFTOCTR RX FIFO timeout counter register*/
#define SPI_EN_RX_FIFO_TINEOUT ((uint8_t)(1 << 6))                         /**< RX FIFO timeout funtion enable   */
#define SPI_DIS_RX_FIFO_TIMEOUT ((uint8_t)(~SPI_EN_RX_FIFO_TINEOUT))       /**< RX FIFO timeout funtion disable  */
#define SPI_EN_RX_FIFO_TINEOUT_IT ((uint8_t)(1 << 7))                      /**< RX FIFO timeout interrupt enable */
#define SPI_DIS_RX_FIFO_TIMEOUT_IT ((uint8_t)(~SPI_EN_RX_FIFO_TINEOUT_IT)) /**< RX FIFO timeout interrupt disable*/
#define SPI_RX_FIFO_TIMEOUT_CNT_MASK ((uint8_t)(0xC0))
/*SPI TX FIFO control register*/
#define SPI_EN_TX_FIFO_SERVICE_THRESHOLD_IT ((uint8_t)(1 << 4)) /**< */
#define SPI_EN_TX_FIFO_UNDERFLOW_IT ((uint8_t)(1 << 5))         /**< */
#define SPI_EN_TX_FIFO_OVERFLOW_IT ((uint8_t)(1 << 6))          /**< */
#define SPI_TX_FIFO_CLEAR ((uint8_t)(1 << 7))                   /**< */
#define SPI_TX_FIFO_SERVICE_TRHESHOLD_MASK ((uint8_t)(0xF0))    /**< */
#define SPI_TX_FIFO_SERVICE_TRHESHOLD_SHIFT_MASK ((uint8_t)(0)) /**< */
/*SPI RX FIFO control register*/
#define SPI_EN_RX_FIFO_SERVICE_THRESHOLD_IT ((uint8_t)(1 << 4))
#define SPI_EN_RX_FIFO_UNDERFLOW_IT ((uint8_t)(1 << 5))         /**< */
#define SPI_EN_RX_FIFO_OVERFLOW_IT ((uint8_t)(1 << 6))          /**< */
#define SPI_RX_FIFO_CLEAR ((uint8_t)(1 << 7)) /**< */           /**< */
#define SPI_RX_FIFO_SERVICE_TRHESHOLD_MASK ((uint8_t)(0xF0))    /**< */
#define SPI_RX_FIFO_SERVICE_TRHESHOLD_SHIFT_MASK ((uint8_t)(0)) /**< */
/*SPIPURD Pullup and reduced driver register*/
#define SPI_EN_DOUBLE_TX_DATA_MODE ((uint8_t)(1 << 1))                           /**< */
#define SPI_DIS_DOUBLE_TX_DATA_MODE_DIS ((uint8_t)(~SPI_EN_DOUBLE_TX_DATA_MODE)) /**< */
#define SPI_EN_MISO_MOSI_SWITCH ((uint8_t)(1 << 2))                              /**< */
#define SPI_DIS_MISO_MOSI_SWITCH ((uint8_t)(~SPI_EN_MISO_MOSI_SWITCH))           /**< */
#define SPI_EN_HIGH_SPEED ((uint8_t)(1 << 7))                                    /**< SPI�䨮?�꨺????����1?��                       */
#define SPI_DIS_HIGH_SPEED ((uint8_t)(0x7F))                                     /**< SPI�䨮?�꨺????��???1                       */
#define SPI_MASTER_SAMPLE_POINT_DELAY_MASK ((uint8_t)(0xF3))                     /**< */
#define SPI_MASTER_SAMPLE_POINT_DELAY_SHIFT_MASK ((uint8_t)(2))                  /**< */
#define SPI_REDUCE_CAP ((uint8_t)(1 << 4))                                       /**< SPI?y?��?����|??D?                         */
#define SPI_FULL_DRIVER ((uint8_t)(0xEF))                                        /**< SPI?y?��?����|?y3��                         */
#define SPI_EN_PULLDOWN_DEVICE ((uint8_t)(1 << 1))                               /**< SPI��?��-��1?��                             */
#define SPI_DIS_PULLDOWN_DEVICE ((uint8_t)(0xFD))                                /**< SPI��?��-???1                             */
#define SPI_EN_PULLUP_DEVICE ((uint8_t)(1 << 0))                                 /**< SPI��?��-��1?��                             */
#define SPI_DIS_DIS_PULLUP_DEVICE ((uint8_t)(0xFE))                              /**< SPI��?��-???1                             */
#define SPI_PPS_SHIFT_MASK (4)
#define SPI_DDRSP_SHIFT_MASK (0)
/*IRSP interrupt register of SS*/
#define SPI_SS_PIN_ASSIGNMENT_SEL_MASK ((uint8_t)(0x03))       /**< */
#define SPI_SS_PIN_ASSIGNMENT_SEL_SHIFT_MASK ((uint8_t)(0x03)) /**< */
#define SPI_SS_PIN_DATA_BIT ((uint8_t)(1 << 2))                /**< */
#define SPI_SS_LEVEL_HIGH ((uint8_t)(1 << 3))                  /**< */
#define SPI_SS_LEVEL_LOW ((uint8_t)(~SPI_SS_LEVEL_HIGH))       /**< */
#define SPI_SS_PIN_FLAG ((uint8_t)(1 << 4))                    /**< */
#define SPI_EN_SS_IT ((uint8_t)(1 << 7))                       /**< */
#define SPI_DIS_SS_IT ((uint8_t)(~SPI_EN_SS_IT))               /**< */
/*TX FIFO status register*/
#define SPI_TX_FIFO_NEXT_POINTER_MASK ((uint8_t)(0x0F))       /**< */
#define SPI_TX_FIFO_NEXT_POINTER_SHIFT_MASK ((uint8_t)(0x0F)) /**< */
#define SPI_TX_FIFO_COUNTER_MASK ((uint8_t)(0xF0))            /**< */
#define SPI_TX_FIFO_COUNTER_SHIFT_MASK ((uint8_t)(0x00))      /**< */
/*RX FIFO status register*/
#define SPI_RX_FIFO_NEXT_POINTER_MASK ((uint8_t)(0x0F))       /**< */
#define SPI_RX_FIFO_NEXT_POINTER_SHIFT_MASK ((uint8_t)(0x0F)) /**< */
#define SPI_RX_FIFO_COUNTER_MASK ((uint8_t)(0xF0))            /**< */
#define SPI_RX_FIFO_COUNTER_SHIFT_MASK ((uint8_t)(0x00))      /**< */
/*SPI status register*/
#define SPI_FLAG_RX_FIFO_EMPTY ((uint8_t)(1 << 0))    /**< SPI����??:                            */
#define SPI_FLAG_RX_FIFO_FULL ((uint8_t)(1 << 1))     /**< SPI����??:                            */
#define SPI_FLAG_TX_FIFO_EMPTY ((uint8_t)(1 << 2))    /**< SPI����??:                            */
#define SPI_FLAG_TX_FIFO_FULL ((uint8_t)(1 << 3))     /**< SPI����??:                            */
#define SPI_FLAG_MODE_FAULT ((uint8_t)(1 << 4))       /**< SPI����??:?�꨺?�䨪?��                        */
#define SPI_FLAG_TRANSMISSION_END ((uint8_t)(1 << 5)) /**< SPI����??:                            */
#define SPI_FLAG_FRAME_LOST ((uint8_t)(1 << 6))       /**< SPI����??:3?��?                            */
#define SPI_FLAG_FINISH ((uint8_t)(1 << 7))           /**< SPI����??:?D??                            */
#define SPI_FLAG_RX_FIFO_SERVICE ((uint8_t)(1 << 0))  /**< SPI����??:                            */
#define SPI_FLAG_RX_FIFO_UNDEFLOW ((uint8_t)(1 << 1)) /**< SPI����??:                            */
#define SPI_FLAG_RX_FIFO_OVERFLOW ((uint8_t)(1 << 2)) /**< SPI����??:                            */
#define SPI_FLAG_RX_FIFO_TIMEOUT ((uint8_t)(1 << 3))  /**< SPI����??:                            */
#define SPI_FLAG_TX_FIFO_SERVICE ((uint8_t)(1 << 4))
#define SPI_FLAG_TX_FIFO_UNDERFLOW ((uint8_t)(1 << 5)) /**< SPI����??:                            */
#define SPI_FLAG_TX_FIFO_OVERFLOW ((uint8_t)(1 << 6))  /**< SPI����??:                            */
#define SPI_FLAG_TX_FIFO_TIMEOUT ((uint8_t)(1 << 7))   /**< SPI����??:                            */
/*interrupt control register*/
#define SPI_EN_MODE_FAULT_IT ((uint8_t)(1 << 4))                 /**< */
#define SPI_DIS_MODE_FAULT_IT ((uint8_t)(~SPI_EN_MODE_FAULT_IT)) /**< */
#define SPI_EN_FRAME_LOST_IT ((uint8_t)(1 << 5))                 /**< */
#define SPI_DIS_FRAME_LOST_IT ((uint8_t)(~SPI_EN_FRAME_LOST_IT)) /**< */
/*SPI DMA threshold register*/
#define SPI_TX_DMA_THRESHOLD_MASK ((uint8_t)(0x0F))       /**< */
#define SPI_TX_DMA_THRESHOLD_SHIFT_MASK ((uint8_t)(0x04)) /**< */
#define SPI_RX_DMA_THRESHOLD_MASK ((uint8_t)(0xF0))       /**< */
#define SPI_RX_DMA_THRESHOLD_SHIFT_MASK ((uint8_t)(0x00)) /**< */
/*SPI DMA control register*/
#define SPI_EN_RX_DMA ((uint8_t)( (uint32_t)1))            /**< */
#define SPI_DIS_RX_DMA ((uint8_t)(~SPI_EN_RX_DMA)) /**< */
#define SPI_EN_TX_DMA ((uint8_t)(0x02))            /**< */
#define SPI_DIS_TX_DMA ((uint8_t)(~SPI_EN_TX_DMA))

#endif /* end __SPI__ */

#define __SSI__
#ifdef __SSI__
/*** SSI **********************************************/
/*SSI_CTRLR0*/
#define CTRLR0_DFS_VALUE(x) (x << 0)
#define CTRLR0_FRF_MOT (0x00 << 6)
#define CTRLR0_TMOD_VALUE(x) (x << 10)
#define CTRLR0_TMOD_TX_AND_RX (0x00 << 10)
#define CTRLR0_TMOD_TX_ONLY ( (uint32_t)1 << 10)
#define CTRLR0_TMOD_RX_ONLY (0x02 << 10)
#define CTRLR0_TMOD_EEPROM_READ (0x03 << 10)
#define CTRLR0_CFS_VALUE(x) (x << 16)
#define CTRLR0_SCPH_MASK (1 << 8)
#define CTRLR0_SCPOL_MASK (1 << 9)
#define CTRLR0_SRL_MASK (1 << 13)
#define CTRLR0_SSTE_MASK (1 << 14)
#define CTRLR0_SPI_FRF_STD (0x00 << 22)
#define CTRLR0_SPI_FRF_DUAL ( (uint32_t)1 << 22)
#define CTRLR0_SPI_FRF_QUAD (0x02 << 22)
/*SSIENR*/
#define SSI_EN ((uint8_t)(1 << 0))
/*SPI_CTRLR0*/
#define CTRLR0_TRANS_TYPE_TT0 (0x00 << 0) //Instruction and Address STD mode
#define CTRLR0_TRANS_TYPE_TT1 ( (uint32_t)1 << 0) //Instruction STD mode and Address CTRLR0.SPI_FRF mode
#define CTRLR0_TRANS_TYPE_TT2 (0x02 << 0) //Instruction and Address CTRLR0.SPI_FRF mode
#define CTRLR0_ADDR_L_VALUE(x) (x << 2)
#define CTRLR0_INST_L_VALUE(x) (x << 8)
#define CTRLR0_WAIT_CYCLES_VALUE(x) (x << 11)
#define CTRLR0_CLK_STRETCH_EN_MASK (1 << 30)
#endif

#define __TRNG__
#ifdef __TRNG__
/*** TRNG **********************************************/
#define TRNG_CLK_SEL (((uint32_t)1 << 31)) /**< TRNGʱ��ѡ��     */
#define TRNG_ANA_VALUE_MASK               ((uint32_t)0x8FFFFFFFF))
#define TRNG_ANA_VALUE_SHIFT_MASK ((uint32_t)(28))
#define TRNG_RST_ANA_MASK ((uint32_t)(0xFF0FFFFF))
#define TRNG_RST_ANA_SHIFT_MASK ((uint32_t)(20))
#define TRNG_EN_ANA_MASK ((uint32_t)(0xFFF0FFFF))
#define TRNG_EN_ANA_SHIFT_MASK (((uint32_t)16))
#define TRNG_SM3_EN (((uint32_t)1 << 15))          /**<          */
#define TRNG_SM3_SM3_RD_DONE (((uint32_t)1 << 14)) /**<          */
#define TRNG_IT_MASK (((uint32_t)1 << 11))              /**< TRNG�жϱ�־λ   */
#define TRNG_CLR_IT (((uint32_t)1 << 10))          /**< TNRG����жϼ�λ */
#define TRNG_EN_IT (((uint32_t)1 << 9))            /**< TRNG�ж�ʹ��     */
#define TRNG_EN (((uint32_t)1 << 8))               /**< TRNGʹ��         */

#define TRNG_CLK_DIV_MASK ((uint32_t)0xFFFFFF00)
#define TRNG_CLK_DIV_SHIFT_MASK ((uint32_t)(0))

#endif /* end __TRNG__ */

#define __TC__
#ifdef __TC__
#define TC_WAIT ((uint8_t)(1 << 11))
#define TC_DOZE ((uint8_t)(1 << 10))
#define TC_STOP ((uint8_t)(1 << 9))
#define TC_DEBUG ((uint8_t)(1 << 8))

#define TC_IF_MODE_MASK ((uint8_t)(1 << 3)) /**< TC��ʱ���жϱ�־    */
#define TC_IE_MODE_MASK ((uint8_t)(1 << 2)) /**< TC��ʱ���ж�ʹ��    */
#define TC_CU_MODE_MASK ((uint8_t)(1 << 1)) /**< TC��ʱ���޸ĸ���    */
#define TC_RN_MODE_MASK ((uint8_t)(1 << 0)) /**< TC��ʱ����λ����ʹ��  */

#endif

#define __UART__
#ifdef __UART__

/*** UART **********************************************/
/*UARTCR1*/
#define UART_WOMS_SHIFT_MASK (6)
#define UART_PARITY_ODD ((uint8_t)(1 << 0))             /**<*/
#define UART_PARITY_EVEN ((uint8_t)(0xFE))              /**<*/
#define UART_PARITY_ENABLE ((uint8_t)(1 << 1))          /**<*/
#define UART_PARITY_DISABLE ((uint8_t)(0xFD))           /**<*/
#define UART_IDLE_LINE_AFTER_STOP ((uint8_t)(1 << 2))   /**<*/
#define UART_IDLE_LINE_AFTER_START ((uint8_t)(0xFB))    /**<*/
#define UART_WAKEUP_MODE_ADDRESS ((uint8_t)(1 << 3))    /**<*/
#define UART_WAKEUP_IDLE_LINE ((uint8_t)(0xF7))         /**<*/
#define UART_DATA_FORMAT_MODE_9BITS ((uint8_t)(1 << 4)) /**<*/
#define UART_DATA_FORMAT_MODE_8BITS ((uint8_t)(0xEF))   /**<*/
#define UART_RSCR_TO_TXD ((uint8_t)(1 << 5))            /**<*/
#define UART_RSCR_TRANSMITTER_OUTPUT ((uint8_t)(0xDF))  /**<*/
#define UART_OPEN_DRAIN_MODE ((uint8_t)(1 << 6))        /**<*/
#define UART_CMOS_MODE ((uint8_t)(0xBF))                /**<*/
#define UART_LOOPS_MODE ((uint8_t)(1 << 7))             /**<*/
#define UART_LOOPS_NORMAL_MODE ((uint8_t)(0x7F))        /**<*/
/*UARTCR2*/
#define UART_SBK ((uint8_t)(1 << 0))           /**<*/
#define UART_IT_RWU_ASLEEP ((uint8_t)(1 << 1)) /**<*/
#define UART_RE ((uint8_t)(1 << 2))            /**<*/
#define UART_TE ((uint8_t)(1 << 3))            /**<*/
#define UART_IT_IDLE ((uint8_t)(1 << 4))       /**<*/
#define UART_IT_RIE ((uint8_t)(1 << 5))        /**<*/
#define UART_IT_TCIE ((uint8_t)(1 << 6))       /**<*/
#define UART_IT_TIE ((uint8_t)(1 << 7))        /**<*/
/*UARTSR1*/
#define UART_IT_FLAG_PF ((uint8_t)(1 << 0))   /**<*/
#define UART_IT_FLAG_FE ((uint8_t)(1 << 1))   /**<*/
#define UART_IT_FLAG_NF ((uint8_t)(1 << 2))   /**<*/
#define UART_IT_FLAG_OR ((uint8_t)(1 << 3))   /**<*/
#define UART_IT_FLAG_IDLE ((uint8_t)(1 << 4)) /**<*/
#define UART_IT_FLAG_RDRF ((uint8_t)(1 << 5)) /**<*/
#define UART_IT_FLAG_TC ((uint8_t)(1 << 6))   /**<*/
#define UART_IT_FLAG_TDRE ((uint8_t)(1 << 7)) /**<*/
/*UARTSR2*/
#define UART_IT_FLAG_RAF ((uint8_t)(1 << 0)) /**<*/
/*UARTPUD*/
#define UART_PU_SHIFT_MASK (0)                 /**<*/
#define UART_PULLUP_EN ((uint8_t)(1 << 0))     /**<*/
#define UART_PULLUP_DIS ((uint8_t)(0xFE))      /**<*/
#define UART_REDUCE_DRIVE ((uint8_t)(1 << 4))  /**<*/
#define UART_FULL_DRIVE ((uint8_t)(0xEF))      /**<*/
#define UART_DOZE_MODE_DIS ((uint8_t)(1 << 7)) /**<*/
#define UART_DOZE_MODE_EN ((uint8_t)(0x7F))    /**<*/
/*UARTDDR:UART data direction register*/
#define UART_RXD_OUT ((uint8_t)(1 << 0)) /**<*/
#define UART_TXD_OUT ((uint8_t)(1 << 1)) /**<*/
/*UARTIRCR:UART infrared control register*/
#define UART_IR_EN ((uint8_t)(1 << 0))            /**<*/
#define UART_IRSC_SYS_CLK ((uint8_t)(1 << 1))     /**<*/
#define UART_RINV_ACTIVE_HIGH ((uint8_t)(1 << 2)) /**<*/
#define UART_TINV_ACTIVE_HIGH ((uint8_t)(1 << 3)) /**<*/
#define UART_RNUM_MASK ((uint8_t)(0xCF))          /**<*/
#define UART_RNUM_SHIFT_MASK ((uint8_t)(4))       /**<*/
#define UART_RNUM_BITS_MASK ((uint8_t)(0x30))     /**<*/
#define UART_TNUM_MASK ((uint8_t)(0x3F))          /**<*/
#define UART_TNUM_SHIFT_MASK ((uint8_t)(6))       /**<*/
#define UART_TNUM_BITS_MASK ((uint8_t)(0xC0))     /**<*/
/*UARTFCR:UART fifo control register*/
#define UART_TF_EN ((uint8_t)(1 << 6))            /**<*/
#define UART_RF_EN ((uint8_t)(1 << 7))            /**<*/
#define UART_RX_FLSEL_MASK ((uint8_t)(0x38))      /**<*/
#define UART_RX_FLSEL_SHIFT_MASK ((uint8_t)(3))   /**<*/
#define UART_RX_FLSEL_BITS_MASK ((uint8_t)(0xC7)) /**<*/
#define UART_TX_FLSEL_MASK ((uint8_t)(0x07))      /**<*/
#define UART_TX_FLSEL_SHIFT_MASK ((uint8_t)(0))   /**<*/
#define UART_TX_FLSEL_BITS_MASK ((uint8_t)(0xF8)) /**<*/
/*UARTFSR:UART FIFO status register*/
#define UART_FIFO_FLAG_R_EMPTY ((uint8_t)(1 << 0)) /**<*/
#define UART_FIFO_FLAG_R_FULL ((uint8_t)(1 << 1))  /**<*/
#define UART_FIFO_FLAG_T_EMPTY ((uint8_t)(1 << 2)) /**<*/
#define UART_FIFO_FLAG_T_FULL ((uint8_t)(1 << 3))  /**<*/
#define UART_FIFO_FLAG_RTOS ((uint8_t)(1 << 4))    /**<*/
#define UART_FIFO_FLAG_RFTS ((uint8_t)(1 << 5))    /**<*/
#define UART_FIFO_FLAG_FTC ((uint8_t)(1 << 6))     /**<*/
#define UART_FIFO_FLAG_TFTS ((uint8_t)(1 << 7))    /**< */
/*UARTDCR:UART DMA control register*/
#define UART_RX_DMA_EN ((uint8_t)(1 << 0)) /**/
#define UART_TX_DMA_EN ((uint8_t)(1 << 1)) /**/
/*UARTFCR2:UART fifo control register 2*/
#define UART_FIFO_RXF_CLR ((uint8_t)(1 << 0))   /**<*/
#define UART_FIFO_TXF_CLR ((uint8_t)(1 << 1))   /**<*/
#define UART_FIFO_RXF_TO_EN ((uint8_t)(1 << 2)) /**<*/
#define UART_FIFO_RXFTO_IE ((uint8_t)(1 << 3))  /**<*/
#define UART_FIFO_RXFOR_IE ((uint8_t)(1 << 4))  /**<*/
#define UART_FIFO_RXF_IE ((uint8_t)(1 << 5))    /**<*/
#define UART_FIFO_TXFC_IE ((uint8_t)(1 << 6))   /**<*/
#define UART_FIFO_TXF_IE ((uint8_t)(1 << 7))    /**<*/
/*UARTFSR2:UART FIFO status register 2*/
#define UART_FXPF ((uint8_t)(1 << 0)) /**<*/
#define UART_FXFE ((uint8_t)(1 << 1)) /**<*/
#define UART_FXNF ((uint8_t)(1 << 2)) /**<*/
#define UART_FXOR ((uint8_t)(1 << 3))

#endif /* end __UART__ */

#define __USI__
#ifdef __USI__

/*** USI **********************************************/
/*** USIBDR ************/
#define USI_BAUDRATE_744 ((uint8_t)( (uint32_t)1))     /**< USI BAUDATE 744                            */
#define USI_BAUDRATE_372 ((uint8_t)(0x02))     /**< USI BAUDATE 372                            */
#define USI_BAUDRATE_186 ((uint8_t)(0x03))     /**< USI BAUDATE 186                            */
#define USI_BAUDRATE_93 ((uint8_t)(0x04))      /**< USI BAUDATE 93                             */
#define USI_BAUDRATE_46DOT5 ((uint8_t)(0x05))  /**< USI BAUDATE 46.5                           */
#define USI_BAUDRATE_23DOT25 ((uint8_t)(0x06)) /**< USI BAUDATE 23.5                           */
#define USI_BAUDRATE_12 ((uint8_t)(0x07))      /**< USI BAUDATE 12                             */
#define USI_BAUDRATE_31 ((uint8_t)(0x08))      /**< USI BAUDATE 31                             */
#define USI_BAUDRATE_512 ((uint8_t)(0x09))     /**< USI BAUDATE 512                            */
#define USI_BAUDRATE_256 ((uint8_t)(0x0A))     /**< USI BAUDATE 256                            */
#define USI_BAUDRATE_128 ((uint8_t)(0x0B))     /**< USI BAUDATE 128                            */
#define USI_BAUDRATE_64 ((uint8_t)(0x0C))      /**< USI BAUDATE 64                             */
#define USI_BAUDRATE_32 ((uint8_t)(0x0D))      /**< USI BAUDATE 32                             */
#define USI_BAUDRATE_16 ((uint8_t)(0x0E))      /**< USI BAUDATE 16                             */
#define USI_BAUDRATE_8 ((uint8_t)(0x0F))       /**< USI BAUDATE 8                              */

/*** USICR1 ************/
#define USI_EN_START_BIT ((uint8_t)(1 << 0x07))           /**<SB��־λ��Ч                                               */
#define USI_EN_DELAY_REQUEST ((uint8_t)(1 << 0x06))       /**< USIģ�� DELAY�ж�ʹ��                     */
#define USI_CONVENTION_INVERSE ((uint8_t)(1 << 0x05))     /**< USIģ�� ������                                      */
#define USI_EN_UART ((uint8_t)(1 << 0x04))                /**< USIģ�� UARTʹ��                                 */
#define USI_TMOD_1 ((uint8_t)(1 << 0x03))                 /**< USIģ�� ģʽT1            */
#define USI_EN_GUARD_TIMER_COUNTER ((uint8_t)(1 << 0x02)) /**< USIģ�� GUARD TIME����ʹ��      */
#define USI_EN_WAIT_TIMER_COUNTER ((uint8_t)(1 << 0x01))  /**< USIģ�� WAIT TIME����ʹ��          */
#define USI_PARITY_ODD ((uint8_t)(1 << 0x00))             /**< USIģ�� У�鷽ʽ ��У��                           */

/*** USICR2 ************/
#define USI_EN_AUTO_REC_ERROR_GEN ((uint8_t)(1 << 0x07)) /**< USIģ�� �Զ����մ�������ʹ��                 */
#define USI_EN_AUTO_CHAR_REP ((uint8_t)(1 << 0x03))      /**< USIģ�� �Զ��ط�ʹ��                                 */
#define USI_REC_CHAR_REP_MASK (~(uint8_t)(0x07 << 0x04))
#define USI_TRAN_CHAR_REP_MASK (~(uint8_t)(0x07))

/*** USISR ************/
#define USI_FLAG_TDRE ((uint8_t)(1 << 0x07))  /**< USIģ��: TDRE��־                          */
#define USI_FLAG_TC ((uint8_t)(1 << 0x06))    /**< USIģ��: TC��־                                */
#define USI_FLAG_RDRF ((uint8_t)(1 << 0x05))  /**< USIģ��: TDRF��־                          */
#define USI_FLAG_OR ((uint8_t)(1 << 0x04))    /**< USIģ��: OR��־                                 */
#define USI_FLAG_ERROR ((uint8_t)(1 << 0x03)) /**< USIģ��: ERR0R��־                        */
#define USI_FLAG_ATR ((uint8_t)(1 << 0x02))   /**< USIģ��: ATR��־                               */
#define USI_FLAG_WTO ((uint8_t)(1 << 0x01))   /**< USIģ��: WTO��־                               */
#define USI_FLAG_SB ((uint8_t)(1 << 0x00))    /**< USIģ��: SB��־                                  */

/*** USIIER ************/
#define USI_EN_TDRE_IT ((uint8_t)(1 << 0x07))  /**< USII�ж�ʹ��: TDRE                         */
#define USI_EN_TC_IT ((uint8_t)(1 << 0x06))    /**< USII�ж�ʹ��: TC                           */
#define USI_EN_RD_IT ((uint8_t)(1 << 0x05))    /**< USII�ж�ʹ��: RD                           */
#define USI_EN_OR_IT ((uint8_t)(1 << 0x04))    /**< USII�ж�ʹ��: OR                           */
#define USI_EN_ERROR_IT ((uint8_t)(1 << 0x03)) /**< USII�ж�ʹ��: ERROR                        */
#define USI_EN_ATR_IT ((uint8_t)(1 << 0x02))   /**< USII�ж�ʹ��: ATR                          */
#define USI_EN_WTO_IT ((uint8_t)(1 << 0x01))   /**< USII�ж�ʹ��: WTO                          */
#define USI_EN_SB_IT ((uint8_t)(1 << 0x00))    /**< USII�ж�ʹ��: SB                           */

/*** USICSR ************/
#define USI_EN_CARD_CLK ((uint8_t)(1 << 0x07))          /**< USI ��ʱ��ʹ��RC                            */
#define USI_EN_CARD_CLK_STOP_LOW ((uint8_t)(1 << 0x06)) /**< USI ��ʱ�ӵ͵�ƽֹͣʹ��RC                      */

/*** USIPCR ************/
#define USI_DAT_PIN_MASK ((uint8_t)(5B))        /**< USI DAT�ܽ�PCR����                                                                                      */
#define USI_CLK_PIN_MASK ((uint8_t)(0xAF))      /**< USI CLK�ܽ�PCR����                                                                                       */
#define USI_RST_PIN_MASK ((uint8_t)(0xF6))      /**< USI RST�ܽ�PCR����                                                                                       */
#define USI_DAT_PIN_GPIO ((uint8_t)(1 << 0x07)) /**< USI DAT�ܽ�����GPIO                         */
#define USI_CLK_PIN_GPIO ((uint8_t)(1 << 0x06)) /**< USI CLK�ܽ�����GPIO                         */

#define USI_PUP_SHIFT_MASK ((uint8_t)(0x00))
#define USI_WOM_SHIFT_MASK ((uint8_t)(0x03))
#define USI_PA_SHIFT_MASK ((uint8_t)(0x06))

#define USI_DAT_PIN_OPEN_DRAIN_MODE ((uint8_t)(1 << 0x05)) /**< USI DAT�ܽſ�©ģʽ   */
#define USI_CLK_PIN_OPEN_DRAIN_MODE ((uint8_t)(1 << 0x04)) /**< USI CLK�ܽſ�©ģʽ  */
#define USI_RST_PIN_OPEN_DRAIN_MODE ((uint8_t)(1 << 0x03)) /**< USI RST�ܽſ�©ģʽ  */
#define USI_EN_DAT_PIN_PULLUP ((uint8_t)(1 << 0x02))       /**< USI DAT�ܽ�����ʹ��  */
#define USI_EN_CLK_PIN_PULLUP ((uint8_t)(1 << 0x01))       /**< USI CLK�ܽ�����ʹ��  */
#define USI_EN_RST_PIN_PULLUP ((uint8_t)(1 << 0x00))       /**< USI RST�ܽ�����ʹ��  */

/*** USIPDR USIDDR ************/
#define USI_PIN_RST ((uint8_t)(1 << 0x00))
#define USI_PIN_CLK ((uint8_t)(1 << 0x01))
#define USI_PIN_DAT ((uint8_t)(1 << 0x02))

/*** USIFIFOINTCON ************/
#define USI_EN_CRC ((uint8_t)(1 << 0x06))           /**< USI CRC����ʹ��  */
#define USI_EN_RX_PARITY_CHK ((uint8_t)(1 << 0x05)) /**< USI CRC���ܽ�ֹ   */
#define USI_FIFO_FULL_1 ((uint8_t)(1 << 0x01))      /**< USI FIFO��С: 1 */
#define USI_FIFO_FULL_2 ((uint8_t)(1 << 0x02))      /**< USI FIFO��С: 2 */
#define USI_FIFO_FULL_3 ((uint8_t)(1 << 0x03))      /**< USI FIFO��С: 3 */
#define USI_FIFO_FULL_4 ((uint8_t)(1 << 0x04))      /**< USI FIFO��С: 4 */
#define USI_FIFO_FULL_5 ((uint8_t)(1 << 0x05))      /**< USI FIFO��С: 5 */

#define USI_BEGIN_ERR_CNT_SHIFT_MASK ((uint8_t)(0x04)) /**< USI�ӿ�ʼ��������żУ�����Ĵ���   */
#define USI_END_ERR_CNT_SHIFT_MASK ((uint8_t)(0x00))   /**< USI�ӳ�����żУ����󵽽����Ĵ��� */

#endif /* end __USI__ */

#define __WDT__
#ifdef __WDT__
#define WDT_EN (1 << 0)
#define WDT_DEBUG (1 << 1)
#define WDT_DOZE (1 << 2)
#define WDT_WAIT (1 << 3)

#endif /* end __WDT__ */

#define __USB__
#ifdef __USB__
#define USB_POWER_ENAB_SUSP (1 << 0)
#define USB_POWER_SUSP_MODE (1 << 1)
#define USB_POWER_RESUME (1 << 2)
#define USB_POWER_RESET (1 << 3)
#define USB_POWER_HS_MODE (1 << 4)
#define USB_POWER_HS_ENAB (1 << 5)
#define USB_POWER_SOFT_CONN (1 << 6)
#define USB_POWER_ISO_UPDATE (1 << 7)

//usb common interrupt number
#define USB_INTERRUPT_SUSPEND (1 << 0)
#define USB_INTERRUPT_RESUME (1 << 1)
#define USB_INTERRUPT_RESET (1 << 2)
#define USB_INTERRUPT_SOF (1 << 3)
#define USB_INTERRUPT_CONNECT (1 << 4)
#define USB_INTERRUPT_DISCON (1 << 5)
#define USB_INTERRUPT_SESSREQ (1 << 6)
#define USB_INTERRUPT_VBUSERR (1 << 7)

#define USB_TESTMODE_SE0NAK (1 << 0)
#define USB_TESTMODE_TESTJ (1 << 1)
#define USB_TESTMODE_TESTK (1 << 2)
#define USB_TESTMODE_TESTPACKET (1 << 3)

//usb tx interrupt number
#define USB_INTERRUPT_EP0 (1 << 0)
#define USB_TX_INTERRUPT_EP1 (1 << 1)
#define USB_TX_INTERRUPT_EP2 (1 << 2)
#define USB_TX_INTERRUPT_EP3 (1 << 3)
#define USB_TX_INTERRUPT_EP4 (1 << 4)
#define USB_TX_INTERRUPT_EP5 (1 << 5)
#define USB_TX_INTERRUPT_EP6 (1 << 6)
#define USB_TX_INTERRUPT_EP7 (1 << 7)

//Usb Rx Interrupt Number
#define USB_RX_INTERRUPT_EP0 (1 << 0)
#define USB_RX_INTERRUPT_EP1 (1 << 1)
#define USB_RX_INTERRUPT_EP2 (1 << 2)
#define USB_RX_INTERRUPT_EP3 (1 << 3)
#define USB_RX_INTERRUPT_EP4 (1 << 4)
#define USB_RX_INTERRUPT_EP5 (1 << 5)
#define USB_RX_INTERRUPT_EP6 (1 << 6)
#define USB_RX_INTERRUPT_EP7 (1 << 7)
//Device CSR0 Bit Define
#define DEV_CSR0_RXPKTRDY (1 << 0)
#define DEV_CSR0_TXPKTRDY (1 << 1)
#define DEV_CSR0_SENTSTALL (1 << 2)
#define DEV_CSR0_DATAEND (1 << 3)
#define DEV_CSR0_SETUPEND (1 << 4)
#define DEV_CSR0_SENDSTALL (1 << 5)
#define DEV_CSR0_SERVICE_RXPKTRDY (1 << 6)
#define DEV_CSR0_SERVICE_SETUPEND (1 << 7)

//TX Register Bit Low as Device
#define DEV_TXCSR_TXPKTRDY (1 << 0)
#define DEV_TXCSR_FIFO_NOT_EMPTY (1 << 1)
#define DEV_TXCSR_UNDER_RUN (1 << 2)
#define DEV_TXCSR_FLUSH_FIFO (1 << 3)
#define DEV_TXCSR_SEND_STALL (1 << 4)
#define DEV_TXCSR_SENT_SATLL (1 << 5)
#define DEV_TXCSR_CLR_DATA_TOG (1 << 6)
#define DEV_TXCSR_INCOMP_TX (1 << 7)

//TX Register Bit High as Device
#define DEV_TXCSR_DMAMODE (1 << 2)
#define DEV_TXCSR_FRC_DATA_TOG (1 << 3)
#define DEV_TXCSR_DMA_ENAB (1 << 4)
#define DEV_TXCSR_TXMODE (1 << 5)
#define DEV_TXCSR_ISO (1 << 6)
#define DEV_TXCSR_AUTO_SET (1 << 7)

//RX Register Bit Low as Device
#define DEV_RXCSR_RXPKTRDY (1 << 0)
#define DEV_RXCSR_FIFOFULL (1 << 1)
#define DEV_RXCSR_FLUSH_FIFO (1 << 4)
#define DEV_RXCSR_SEND_STALL (1 << 5)
#define DEV_RXCSR_SENT_STALL (1 << 6)
#define DEV_RXCSR_CLR_DATA_TOG (1 << 7)

//RX Register Bit High as Device
#define DEV_RXCSR_INCOMP_RX (1 << 0)
#define DEV_RXCSR_DMAMODE (1 << 3)
#define DEV_RXCSR_DISNYET (1 << 4)
#define DEV_RXCSR_DMA_ENAB (1 << 5)
#define DEV_RXCSR_ISO (1 << 6)
#define DEV_RXCSR_AUTOCLEAR (1 << 7)

#define DEV_INTR_CHANNEL(n) (1 << (n - 1))

//dma cntl
#define DEV_CNTL_DMAEN (1 << 0)
#define DEV_CNTL_DIRECTION_READ (1 << 1)
#define DEV_CNTL_DMAMODE (1 << 2)
#define DEV_CNTL_INTERE (1 << 3)
#define DEV_CNTL_EP(x) ((x & 0x07) << 4)
#define DEV_CNTL_BUSERROR (1 << 8)
#define DEV_CNTL_BURSTMODE(x) ((x & 0x03) << 9)

#endif /* end __USB__ */

#define __PWMT__
#ifdef __PWMT__
/*****************  Bit definition for PWMT register  *****************/
/*
#define PWM_PPR_DZ1_SHIFT                 24
#define PWM_PPR_DZ0_SHIFT                 16
#define PWM_PPR_CP1_SHIFT                 8
#define PWM_PPR_CP0_SHIFT                 0

#define PWM_PCSR_CSR7_SHIFT               28
#define PWM_PCSR_CSR6_SHIFT               24
#define PWM_PCSR_CSR5_SHIFT               20
#define PWM_PCSR_CSR4_SHIFT               16
#define PWM_PCSR_CSR3_SHIFT               12
#define PWM_PCSR_CSR2_SHIFT               8
#define PWM_PCSR_CSR1_SHIFT               4
#define PWM_PCSR_CSR0_SHIFT               0

#define PWM_PCR_CH0EN                     (1<<0)
#define PWM_PCR_CH0INV                    (1<<2)
#define PWM_PCR_CH0MOD                    (1<<3)
#define PWM_PCR_DZ0EN                     (1<<4)
#define PWM_PCR_DZ1EN                     (1<<5)
#define PWM_PCR_CH1EN                     (1<<8)
#define PWM_PCR_CH1INV                    (1<<10)
#define PWM_PCR_CH1MOD                    (1<<11)
#define PWM_PCR_CH2EN                     (1<<16)
#define PWM_PCR_CH2INV                    (1<<18)
#define PWM_PCR_CH2MOD                    (1<<19)
#define PWM_PCR_CH3EN                     (1<<24)
#define PWM_PCR_CH3INV                    (1<<26)
#define PWM_PCR_CH3MOD                    (1<<27)
#define PWM_PCR_CH4EN                     (1<<1)
#define PWM_PCR_CH5EN                     (1<<9)
#define PWM_PCR_CH6EN                     (1<<17)
#define PWM_PCR_CH7EN                     (1<<25)
*/

#define PWMT_CR1_CKD_00 (00 << 8)
#define PWMT_CR1_CKD_01 (01 << 8)
#define PWMT_CR1_CKD_10 (10 << 8)
#define PWMT_CR1_ARPE (1 << 7)
#define PWMT_CR1_CMS_EALIGN (0 << 5)
#define PWMT_CR1_CMS_CALIGN1 (1 << 5)
#define PWMT_CR1_CMS_CALIGN2 (2 << 5)
#define PWMT_CR1_CMS_CALIGN3 (3 << 5)
#define PWMT_CR1_DIR_UP (0 << 4)
#define PWMT_CR1_DIR_DOWN (1 << 4)
#define PWMT_CR1_OPM (1 << 3)
#define PWMT_CR1_URS (1 << 2)
#define PWMT_CR1_UDIS (1 << 1)
#define PWMT_CR1_CEN (1 << 0)

#define PWMT_CR2_OIS4N (1 << 15)
#define PWMT_CR2_OIS4 (1 << 14)
#define PWMT_CR2_OIS3N (1 << 13)
#define PWMT_CR2_OIS3 (1 << 12)
#define PWMT_CR2_OIS2N (1 << 11)
#define PWMT_CR2_OIS2 (1 << 10)
#define PWMT_CR2_OIS1N (1 << 9)
#define PWMT_CR2_OIS1 (1 << 8)
#define PWMT_CR2_TI1S (1 << 7)
#define PWMT_CR2_MMS_RESET (0 << 4)
#define PWMT_CR2_MMS_ENABLE (1 << 4)
#define PWMT_CR2_MMS_UPDATE (2 << 4)
#define PWMT_CR2_MMS_COMPP (3 << 4)
#define PWMT_CR2_MMS_COMP1TRGO (4 << 4)
#define PWMT_CR2_MMS_COMP2TRGO (5 << 4)
#define PWMT_CR2_MMS_COMP3TRGO (6 << 4)
#define PWMT_CR2_MMS_COMP4TRGO (7 << 4)
#define PWMT_CR2_CCDS (1 << 2)
#define PWMT_CR2_CCUS (1 << 1)
#define PWMT_CR2_CCPC (1 << 0)

#define PWMT_SMCR_ETP (1 << 15)
#define PWMT_SMCR_ECE (1 << 14)
#define PWMT_SMCR_ETPS_PRESCOFF (0 << 12)
#define PWMT_SMCR_ETPS_PRESCDIV2 (1 << 12)
#define PWMT_SMCR_ETPS_PRESCDIV4 (2 << 12)
#define PWMT_SMCR_ETPS_PRESCDIV8 (3 << 12)
#define PWMT_SMCR_ETF_D1_N1 (00 << 8)
#define PWMT_SMCR_ETF_D1_N2 (01 << 8)
#define PWMT_SMCR_ETF_D1_N4 (02 << 8)
#define PWMT_SMCR_ETF_D1_N8 (03 << 8)
#define PWMT_SMCR_ETF_D2_N6 (04 << 8)
#define PWMT_SMCR_ETF_D2_N8 (05 << 8)
#define PWMT_SMCR_ETF_D4_N6 (06 << 8)
#define PWMT_SMCR_ETF_D4_N8 (07 << 8)
#define PWMT_SMCR_ETF_D8_N6 (08 << 8)
#define PWMT_SMCR_ETF_D8_N8 (09 << 8)
#define PWMT_SMCR_ETF_D16_N5 (10 << 8)
#define PWMT_SMCR_ETF_D16_N6 (11 << 8)
#define PWMT_SMCR_ETF_D16_N8 (12 << 8)
#define PWMT_SMCR_ETF_D32_N5 (13 << 8)
#define PWMT_SMCR_ETF_D32_N6 (14 << 8)
#define PWMT_SMCR_ETF_D32_N8 (15 << 8)
#define PWMT_SMCR_MSM (1 << 7)
#define PWMT_SMCR_TS_TRGI0 (0 << 4)
#define PWMT_SMCR_TS_TRGI1 (1 << 4)
#define PWMT_SMCR_TS_TRGI2 (2 << 4)
#define PWMT_SMCR_TS_TRGI3 (3 << 4)
#define PWMT_SMCR_TS_TI1F_ED (4 << 4)
#define PWMT_SMCR_TS_TI1FP1 (5 << 4)
#define PWMT_SMCR_TS_TI2FP2 (6 << 4)
#define PWMT_SMCR_TS_ETRF (7 << 4)
#define PWMT_SMCR_SMS_SLV_DIS (0 << 0) //disable slave ģʽ
#define PWMT_SMCR_SMS_ENC_MODE1 (1 << 0)
#define PWMT_SMCR_SMS_ENC_MODE2 (2 << 0)
#define PWMT_SMCR_SMS_ENC_MODE3 (3 << 0)
#define PWMT_SMCR_SMS_RESET (4 << 0)   //��λģʽ
#define PWMT_SMCR_SMS_GATED (5 << 0)   //�ſ�ģʽ
#define PWMT_SMCR_SMS_TRIGGER (6 << 0) //����ģʽ
#define PWMT_SMCR_SMS_EXTCLK (7 << 0)

#define PWMT_DIER_TDE (1 << 14)
#define PWMT_DIER_COMDE (1 << 13)
#define PWMT_DIER_CC4DE (1 << 12)
#define PWMT_DIER_CC3DE (1 << 11)
#define PWMT_DIER_CC2DE (1 << 10)
#define PWMT_DIER_CC1DE (1 << 9)
#define PWMT_DIER_UDE (1 << 8)
#define PWMT_DIER_BIE (1 << 7)
#define PWMT_DIER_TIE (1 << 6)
#define PWMT_DIER_COMIE (1 << 5)
#define PWMT_DIER_CC4IE (1 << 4)
#define PWMT_DIER_CC3IE (1 << 3)
#define PWMT_DIER_CC2IE (1 << 2)
#define PWMT_DIER_CC1IE (1 << 1)
#define PWMT_DIER_UIE (1 << 0)

#define PWMT_SR_CC4OF (1 << 12)
#define PWMT_SR_CC3OF (1 << 11)
#define PWMT_SR_CC2OF (1 << 10)
#define PWMT_SR_CC1OF (1 << 9)
#define PWMT_SR_BIF (1 << 7)
#define PWMT_SR_TIF (1 << 6)
#define PWMT_SR_COMIF (1 << 5)
#define PWMT_SR_CC4IF (1 << 4)
#define PWMT_SR_CC3IF (1 << 3)
#define PWMT_SR_CC2IF (1 << 2)
#define PWMT_SR_CC1IF (1 << 1)
#define PWMT_SR_UIF (1 << 0)

#define PWMT_EGR_BG (1 << 7)
#define PWMT_EGR_TG (1 << 6)
#define PWMT_EGR_COMG (1 << 5)
#define PWMT_EGR_CC4G (1 << 4)
#define PWMT_EGR_CC3G (1 << 3)
#define PWMT_EGR_CC2G (1 << 2)
#define PWMT_EGR_CC1G (1 << 1)
#define PWMT_EGR_UG (1 << 0)

#define PWMT_CCMR1_OC2CE (1 << 15)
#define PWMT_CCMR1_OC2M_FROZEN (0 << 12)
#define PWMT_CCMR1_OC2M_ACT_MATCH (1 << 12)
#define PWMT_CCMR1_OC2M_INACT_MATCH (2 << 12)
#define PWMT_CCMR1_OC2M_TOGGLE (3 << 12)
#define PWMT_CCMR1_OC2M_FORCE_ACT_LVL (4 << 12)
#define PWMT_CCMR1_OC2M_FORCE_INACT_LVL (5 << 12)
#define PWMT_CCMR1_OC2M_PWM_MODE1 (6 << 12)
#define PWMT_CCMR1_OC2M_PWM_MODE2 (7 << 12)
#define PWMT_CCMR1_OC2PE (1 << 11)
#define PWMT_CCMR1_OC2FE (1 << 10)
#define PWMT_CCMR1_CC2S_OUT (0 << 8)
#define PWMT_CCMR1_CC2S_IN_IC2_TI2 (1 << 8)
#define PWMT_CCMR1_CC2S_IN_IC2_TI1 (2 << 8)
#define PWMT_CCMR1_CC2S_IN_IC2_TRC (3 << 8)
#define PWMT_CCMR1_OC1CE (1 << 7)
#define PWMT_CCMR1_OC1M_FROZEN (0 << 4)
#define PWMT_CCMR1_OC1M_ACT_MATCH (1 << 4)
#define PWMT_CCMR1_OC1M_INACT_MATCH (2 << 4)
#define PWMT_CCMR1_OC1M_TOGGLE (3 << 4)
#define PWMT_CCMR1_OC1M_FORCE_ACT_LVL (4 << 4)
#define PWMT_CCMR1_OC1M_FORCE_INACT_LVL (5 << 4)
#define PWMT_CCMR1_OC1M_PWM_MODE1 (6 << 4)
#define PWMT_CCMR1_OC1M_PWM_MODE2 (7 << 4)
#define PWMT_CCMR1_OC1PE (1 << 3)
#define PWMT_CCMR1_OC1FE (1 << 2)
#define PWMT_CCMR1_CC1S_OUT (0 << 0)
#define PWMT_CCMR1_CC1S_IN_IC1_TI1 (1 << 0)
#define PWMT_CCMR1_CC1S_IN_IC1_TI2 (2 << 0)
#define PWMT_CCMR1_CC1S_IN_IC1_TRC (3 << 0)
#define PWMT_CCMR1_IC2F_D1_N1 (00 << 12)
#define PWMT_CCMR1_IC2F_D1_N2 (01 << 12)
#define PWMT_CCMR1_IC2F_D1_N4 (02 << 12)
#define PWMT_CCMR1_IC2F_D1_N8 (03 << 12)
#define PWMT_CCMR1_IC2F_D2_N6 (04 << 12)
#define PWMT_CCMR1_IC2F_D2_N8 (05 << 12)
#define PWMT_CCMR1_IC2F_D4_N6 (06 << 12)
#define PWMT_CCMR1_IC2F_D4_N8 (07 << 12)
#define PWMT_CCMR1_IC2F_D8_N6 (08 << 12)
#define PWMT_CCMR1_IC2F_D8_N8 (09 << 12)
#define PWMT_CCMR1_IC2F_D16_N5 (10 << 12)
#define PWMT_CCMR1_IC2F_D16_N6 (11 << 12)
#define PWMT_CCMR1_IC2F_D16_N8 (12 << 12)
#define PWMT_CCMR1_IC2F_D32_N5 (13 << 12)
#define PWMT_CCMR1_IC2F_D32_N6 (14 << 12)
#define PWMT_CCMR1_IC2F_D32_N8 (15 << 12)
#define PWMT_CCMR1_IC2PSC_D1 (0 << 10)
#define PWMT_CCMR1_IC2PSC_D2 (1 << 10)
#define PWMT_CCMR1_IC2PSC_D4 (2 << 10)
#define PWMT_CCMR1_IC2PSC_D8 (3 << 10)
#define PWMT_CCMR1_IC1F_D1_N1 (00 << 4)
#define PWMT_CCMR1_IC1F_D1_N2 (01 << 4)
#define PWMT_CCMR1_IC1F_D1_N4 (02 << 4)
#define PWMT_CCMR1_IC1F_D1_N8 (03 << 4)
#define PWMT_CCMR1_IC1F_D2_N6 (04 << 4)
#define PWMT_CCMR1_IC1F_D2_N8 (05 << 4)
#define PWMT_CCMR1_IC1F_D4_N6 (06 << 4)
#define PWMT_CCMR1_IC1F_D4_N8 (07 << 4)
#define PWMT_CCMR1_IC1F_D8_N6 (08 << 4)
#define PWMT_CCMR1_IC1F_D8_N8 (09 << 4)
#define PWMT_CCMR1_IC1F_D16_N5 (10 << 4)
#define PWMT_CCMR1_IC1F_D16_N6 (11 << 4)
#define PWMT_CCMR1_IC1F_D16_N8 (12 << 4)
#define PWMT_CCMR1_IC1F_D32_N5 (13 << 4)
#define PWMT_CCMR1_IC1F_D32_N6 (14 << 4)
#define PWMT_CCMR1_IC1F_D32_N8 (15 << 4)
#define PWMT_CCMR1_IC1PSC_D1 (0 << 2)
#define PWMT_CCMR1_IC1PSC_D2 (1 << 2)
#define PWMT_CCMR1_IC1PSC_D4 (2 << 2)
#define PWMT_CCMR1_IC1PSC_D8 (3 << 2)

#define PWMT_CCMR2_OC4CE (1 << 15)
#define PWMT_CCMR2_OC4M_FROZEN (0 << 12)
#define PWMT_CCMR2_OC4M_ACT_MATCH (1 << 12)
#define PWMT_CCMR2_OC4M_INACT_MATCH (2 << 12)
#define PWMT_CCMR2_OC4M_TOGGLE (3 << 12)
#define PWMT_CCMR2_OC4M_FORCE_ACT_LVL (4 << 12)
#define PWMT_CCMR2_OC4M_FORCE_INACT_LVL (5 << 12)
#define PWMT_CCMR2_OC4M_PWM_MODE1 (6 << 12)
#define PWMT_CCMR2_OC4M_PWM_MODE2 (7 << 12)
#define PWMT_CCMR2_OC4PE (1 << 11)
#define PWMT_CCMR2_OC4FE (1 << 10)
#define PWMT_CCMR2_CC4S_OUT (0 << 8)
#define PWMT_CCMR2_CC4S_IN_IC4_TI4 (1 << 8)
#define PWMT_CCMR2_CC4S_IN_IC4_TI3 (2 << 8)
#define PWMT_CCMR2_CC4S_IN_IC4_TRC (3 << 8)
#define PWMT_CCMR2_OC3CE (1 << 7)
#define PWMT_CCMR2_OC3M_FROZEN (0 << 4)
#define PWMT_CCMR2_OC3M_ACT_MATCH (1 << 4)
#define PWMT_CCMR2_OC3M_INACT_MATCH (2 << 4)
#define PWMT_CCMR2_OC3M_TOGGLE (3 << 4)
#define PWMT_CCMR2_OC3M_FORCE_ACT_LVL (4 << 4)
#define PWMT_CCMR2_OC3M_FORCE_INACT_LVL (5 << 4)
#define PWMT_CCMR2_OC3M_PWM_MODE1 (6 << 4)
#define PWMT_CCMR2_OC3M_PWM_MODE2 (7 << 4)
#define PWMT_CCMR2_OC3PE (1 << 3)
#define PWMT_CCMR2_OC3FE (1 << 2)
#define PWMT_CCMR2_CC3S_OUT (0 << 0)
#define PWMT_CCMR2_CC3S_IN_IC3_TI3 (1 << 0)
#define PWMT_CCMR2_CC3S_IN_IC3_TI4 (2 << 0)
#define PWMT_CCMR2_CC3S_IN_IC3_TRC (3 << 0)
#define PWMT_CCMR2_IC4F_D1_N1 (00 << 12)
#define PWMT_CCMR2_IC4F_D1_N2 (01 << 12)
#define PWMT_CCMR2_IC4F_D1_N4 (02 << 12)
#define PWMT_CCMR2_IC4F_D1_N8 (03 << 12)
#define PWMT_CCMR2_IC4F_D2_N6 (04 << 12)
#define PWMT_CCMR2_IC4F_D2_N8 (05 << 12)
#define PWMT_CCMR2_IC4F_D4_N6 (06 << 12)
#define PWMT_CCMR2_IC4F_D4_N8 (07 << 12)
#define PWMT_CCMR2_IC4F_D8_N6 (08 << 12)
#define PWMT_CCMR2_IC4F_D8_N8 (09 << 12)
#define PWMT_CCMR2_IC4F_D16_N5 (10 << 12)
#define PWMT_CCMR2_IC4F_D16_N6 (11 << 12)
#define PWMT_CCMR2_IC4F_D16_N8 (12 << 12)
#define PWMT_CCMR2_IC4F_D32_N5 (13 << 12)
#define PWMT_CCMR2_IC4F_D32_N6 (14 << 12)
#define PWMT_CCMR2_IC4F_D32_N8 (15 << 12)
#define PWMT_CCMR2_IC4PSC_D1 (0 << 10)
#define PWMT_CCMR2_IC4PSC_D2 (1 << 10)
#define PWMT_CCMR2_IC4PSC_D4 (2 << 10)
#define PWMT_CCMR2_IC4PSC_D8 (3 << 10)
#define PWMT_CCMR2_IC3F_D1_N1 (00 << 4)
#define PWMT_CCMR2_IC3F_D1_N2 (01 << 4)
#define PWMT_CCMR2_IC3F_D1_N4 (02 << 4)
#define PWMT_CCMR2_IC3F_D1_N8 (03 << 4)
#define PWMT_CCMR2_IC3F_D2_N6 (04 << 4)
#define PWMT_CCMR2_IC3F_D2_N8 (05 << 4)
#define PWMT_CCMR2_IC3F_D4_N6 (06 << 4)
#define PWMT_CCMR2_IC3F_D4_N8 (07 << 4)
#define PWMT_CCMR2_IC3F_D8_N6 (08 << 4)
#define PWMT_CCMR2_IC3F_D8_N8 (09 << 4)
#define PWMT_CCMR2_IC3F_D16_N5 (10 << 4)
#define PWMT_CCMR2_IC3F_D16_N6 (11 << 4)
#define PWMT_CCMR2_IC3F_D16_N8 (12 << 4)
#define PWMT_CCMR2_IC3F_D32_N5 (13 << 4)
#define PWMT_CCMR2_IC3F_D32_N6 (14 << 4)
#define PWMT_CCMR2_IC3F_D32_N8 (15 << 4)
#define PWMT_CCMR2_IC3PSC_D1 (0 << 2)
#define PWMT_CCMR2_IC3PSC_D2 (1 << 2)
#define PWMT_CCMR2_IC3PSC_D4 (2 << 2)
#define PWMT_CCMR2_IC3PSC_D8 (3 << 2)

#define PWMT_CCER_CC4NP (1 << 15)
#define PWMT_CCER_CC4NE (1 << 14)
#define PWMT_CCER_CC4P (1 << 13)
#define PWMT_CCER_CC4E (1 << 12)
#define PWMT_CCER_CC3NP (1 << 11)
#define PWMT_CCER_CC3NE (1 << 10)
#define PWMT_CCER_CC3P (1 << 9)
#define PWMT_CCER_CC3E (1 << 8)
#define PWMT_CCER_CC2NP (1 << 7)
#define PWMT_CCER_CC2NE (1 << 6)
#define PWMT_CCER_CC2P (1 << 5)
#define PWMT_CCER_CC2E (1 << 4)
#define PWMT_CCER_CC1NP (1 << 3)
#define PWMT_CCER_CC1NE (1 << 2)
#define PWMT_CCER_CC1P (1 << 1)
#define PWMT_CCER_CC1E (1 << 0)

#define PWMT_BDTR_MOE (1 << 15)
#define PWMT_BDTR_AOE (1 << 14)
#define PWMT_BDTR_BKP (1 << 13)
#define PWMT_BDTR_BKE (1 << 12)
#define PWMT_BDTR_OSSR (1 << 11)
#define PWMT_BDTR_OSSI (1 << 10)
#define PWMT_BDTR_LOCK_OFF (0 << 8)
#define PWMT_BDTR_LOCK_LEVEL1 (1 << 8)
#define PWMT_BDTR_LOCK_LEVEL2 (2 << 8)
#define PWMT_BDTR_LOCK_LEVEL3 (3 << 8)

#define PWMT_PMCR1_EN (1 << 0)
#define PWMT_PMCR1_RELA_EN (1 << 1)
#define PWMT_PMCR1N_RELA_EN (1 << 2)
#define PWMT_PMCR2_EN (1 << 3)
#define PWMT_PMCR2_RELA_EN (1 << 4)
#define PWMT_PMCR2N_RELA_EN (1 << 5)
#define PWMT_PMCR3_EN (1 << 6)
#define PWMT_PMCR3_RELA_EN (1 << 7)
#define PWMT_PMCR3N_RELA_EN (1 << 8)
#define PWMT_PMCR4_EN (1 << 9)
#define PWMT_PMCR4_RELA_EN (1 << 10)
#define PWMT_PMCR4N_RELA_EN (1 << 11)

#define BIT_CKD (8)
#define BIT_ARPE (7)
#define BIT_CMS (5)
#define BIT_DIR (4)
#define BIT_DIR (4)
#define BIT_OPM (3)
#define BIT_URS (2)
#define BIT_UDIS (1)
#define BIT_CEN (0)

#define BIT_OIS4N (15)
#define BIT_OIS4 (14)
#define BIT_OIS3N (13)
#define BIT_OIS3 (12)
#define BIT_OIS2N (11)
#define BIT_OIS2 (10)
#define BIT_OIS1N (9)
#define BIT_OIS1 (8)
#define BIT_TI1S (7)
#define BIT_MMS (4)
#define BIT_CCDS (3)
#define BIT_CCUS (2)
#define BIT_CCPC (0)

#define BIT_ETP (15)
#define BIT_ECE (14)
#define BIT_ETPS (12)
#define BIT_ETF (8)
#define BIT_MSM (7)
#define BIT_TS (4)
#define BIT_SMS (0)

#define BIT_TDE (14)
#define BIT_COMDE (13)
#define BIT_CC4DE (12)
#define BIT_CC3DE (11)
#define BIT_CC2DE (10)
#define BIT_CC1DE (9)
#define BIT_UDE (8)
#define BIT_BIE (7)
#define BIT_TIE (6)
#define BIT_COMIE (5)
#define BIT_CC4IE (4)
#define BIT_CC3IE (3)
#define BIT_CC2IE (2)
#define BIT_CC1IE (1)
#define BIT_UIE (0)

#define BIT_CC4OF (12)
#define BIT_CC3OF (11)
#define BIT_CC2OF (10)
#define BIT_CC1OF (9)
#define BIT_BIF (7)
#define BIT_TIF (6)
#define BIT_COMIF (5)
#define BIT_CC4IF (4)
#define BIT_CC3IF (3)
#define BIT_CC2IF (2)
#define BIT_CC1IF (1)
#define BIT_UIF (0)

#define BIT_BG (7)
#define BIT_TG (6)
#define BIT_COMG (5)
#define BIT_CC4G (4)
#define BIT_CC3G (3)
#define BIT_CC2G (2)
#define BIT_CC1G (1)
#define BIT_UG (0)

#define BIT_OC2CE (15)
#define BIT_OC2M (12)
#define BIT_OC2PE (11)
#define BIT_OC2FE (10)
#define BIT_CC2S (8)
#define BIT_OC1CE (7)
#define BIT_OC1M (4)
#define BIT_OC1PE (3)
#define BIT_OC1FE (2)
#define BIT_CC1S (0)
#define BIT_IC2F (12)
#define BIT_IC2PSC (10)
#define BIT_IC1F (4)
#define BIT_IC1PSC (2)

#define BIT_OC4CE (15)
#define BIT_OC4M (12)
#define BIT_OC4PE (11)
#define BIT_OC4FE (10)
#define BIT_CC4S (8)
#define BIT_OC3CE (7)
#define BIT_OC3M (4)
#define BIT_OC3PE (3)
#define BIT_OC3FE (2)
#define BIT_CC3S (0)
#define BIT_IC4F (12)
#define BIT_IC4PSC (10)
#define BIT_IC3F (4)
#define BIT_IC3PSC (2)

#define BIT_CC4NP (15)
#define BIT_CC4NE (14)
#define BIT_CC4P (13)
#define BIT_CC4E (12)
#define BIT_CC3NP (11)
#define BIT_CC3NE (10)
#define BIT_CC3P (9)
#define BIT_CC3E (8)
#define BIT_CC2NP (7)
#define BIT_CC2NE (6)
#define BIT_CC2P (5)
#define BIT_CC2E (4)
#define BIT_CC1NP (3)
#define BIT_CC1NE (2)
#define BIT_CC1P (1)
#define BIT_CC1E (0)

#define CR1_CKD_00 (0)
#define CR1_CKD_01 (1)
#define CR1_CKD_10 (10)
#define CR1_ARPE (1)
#define CR1_CMS_EALIGN (0)
#define CR1_CMS_CALIGN1 (1)
#define CR1_CMS_CALIGN2 (2)
#define CR1_CMS_CALIGN3 (3)
#define CR1_DIR_UP (0)
#define CR1_DIR_DOWN (1)
#define CR1_OPM (1)
#define CR1_URS (1)
#define CR1_UDIS (1)
#define CR1_CEN (1)

#define CR2_OIS4N (1)
#define CR2_OIS4 (1)
#define CR2_OIS3N (1)
#define CR2_OIS3 (1)
#define CR2_OIS2N (1)
#define CR2_OIS2 (1)
#define CR2_OIS1N (1)
#define CR2_OIS1 (1)
#define CR2_TI1S (1)
#define CR2_MMS_RESET (0)
#define CR2_MMS_ENABLE (1)
#define CR2_MMS_UPDATE (2)
#define CR2_MMS_COMPP (3)
#define CR2_MMS_COMP1TRGO (4)
#define CR2_MMS_COMP2TRGO (5)
#define CR2_MMS_COMP3TRGO (6)
#define CR2_MMS_COMP4TRGO (7)
#define CR2_CCDS (1)
#define CR2_CCUS (1)
#define CR2_CCPC (1)

#define SMCR_ETP (1)
#define SMCR_ECE (1)
#define SMCR_ETPS_PRESCOFF (0)
#define SMCR_ETPS_PRESCDIV2 (1)
#define SMCR_ETPS_PRESCDIV4 (2)
#define SMCR_ETPS_PRESCDIV8 (3)
#define SMCR_ETF_D1_N1 (0)
#define SMCR_ETF_D1_N2 (1)
#define SMCR_ETF_D1_N4 (2)
#define SMCR_ETF_D1_N8 (3)
#define SMCR_ETF_D2_N6 (4)
#define SMCR_ETF_D2_N8 (5)
#define SMCR_ETF_D4_N6 (6)
#define SMCR_ETF_D4_N8 (7)
#define SMCR_ETF_D8_N6 (8)
#define SMCR_ETF_D8_N8 (9)
#define SMCR_ETF_D16_N5 (10)
#define SMCR_ETF_D16_N6 (11)
#define SMCR_ETF_D16_N8 (12)
#define SMCR_ETF_D32_N5 (13)
#define SMCR_ETF_D32_N6 (14)
#define SMCR_ETF_D32_N8 (15)
#define SMCR_MSM (1)
#define SMCR_TS_TRGI0 (0)
#define SMCR_TS_TRGI1 (1)
#define SMCR_TS_TRGI2 (2)
#define SMCR_TS_TRGI3 (3)
#define SMCR_TS_TI1F_ED (4)
#define SMCR_TS_TI1FP1 (5)
#define SMCR_TS_TI2FP2 (6)
#define SMCR_TS_ETRF (7)
#define SMCR_SMS_SLV_DIS (0)
#define SMCR_SMS_ENC_MODE1 (1)
#define SMCR_SMS_ENC_MODE2 (2)
#define SMCR_SMS_ENC_MODE3 (3)
#define SMCR_SMS_RESET (4)
#define SMCR_SMS_GATED (5)
#define SMCR_SMS_TRIGGER (6)
#define SMCR_SMS_EXTCLK (7)

#define DIER_TDE (1)
#define DIER_COMDE (1)
#define DIER_CC4DE (1)
#define DIER_CC3DE (1)
#define DIER_CC2DE (1)
#define DIER_CC1DE (1)
#define DIER_UDE (1)
#define DIER_BIE (1)
#define DIER_TIE (1)
#define DIER_COMIE (1)
#define DIER_CC4IE (1)
#define DIER_CC3IE (1)
#define DIER_CC2IE (1)
#define DIER_CC1IE (1)
#define DIER_UIE (1)

#define SR_CC4OF (1)
#define SR_CC3OF (1)
#define SR_CC2OF (1)
#define SR_CC1OF (1)
#define SR_BIF (1)
#define SR_TIF (1)
#define SR_COMIF (1)
#define SR_CC4IF (1)
#define SR_CC3IF (1)
#define SR_CC2IF (1)
#define SR_CC1IF (1)
#define SR_UIF (1)

#define EGR_BG (1)
#define EGR_TG (1)
#define EGR_COMG (1)
#define EGR_CC4G (1)
#define EGR_CC3G (1)
#define EGR_CC2G (1)
#define EGR_CC1G (1)
#define EGR_UG (1)

#define CCMR1_OC2CE (1)
#define CCMR1_OC2M_FROZEN (0)
#define CCMR1_OC2M_ACT_MATCH (1)
#define CCMR1_OC2M_INACT_MATCH (2)
#define CCMR1_OC2M_TOGGLE (3)
#define CCMR1_OC2M_FORCE_ACT_LVL (4)
#define CCMR1_OC2M_FORCE_INACT_LVL (5)
#define CCMR1_OC2M_PWM_MODE1 (6)
#define CCMR1_OC2M_PWM_MODE2 (7)
#define CCMR1_OC2PE (1)
#define CCMR1_OC2FE (1)
#define CCMR1_CC2S_OUT (0)
#define CCMR1_CC2S_IN_IC2_TI2 (1)
#define CCMR1_CC2S_IN_IC2_TI1 (10)
#define CCMR1_CC2S_IN_IC2_TRC (11)
#define CCMR1_OC1CE (1)
#define CCMR1_OC1M_FROZEN (0)
#define CCMR1_OC1M_ACT_MATCH (1)
#define CCMR1_OC1M_INACT_MATCH (2)
#define CCMR1_OC1M_TOGGLE (3)
#define CCMR1_OC1M_FORCE_ACT_LVL (4)
#define CCMR1_OC1M_FORCE_INACT_LVL (5)
#define CCMR1_OC1M_PWM_MODE1 (6)
#define CCMR1_OC1M_PWM_MODE2 (7)
#define CCMR1_OC1PE (1)
#define CCMR1_OC1FE (1)
#define CCMR1_CC1S_OUT (0)
#define CCMR1_CC1S_IN_IC1_TI1 (1)
#define CCMR1_CC1S_IN_IC1_TI2 (10)
#define CCMR1_CC1S_IN_IC1_TRC (11)
#define CCMR1_IC2F_D1_N1 (0)
#define CCMR1_IC2F_D1_N2 (1)
#define CCMR1_IC2F_D1_N4 (2)
#define CCMR1_IC2F_D1_N8 (3)
#define CCMR1_IC2F_D2_N6 (4)
#define CCMR1_IC2F_D2_N8 (5)
#define CCMR1_IC2F_D4_N6 (6)
#define CCMR1_IC2F_D4_N8 (7)
#define CCMR1_IC2F_D8_N6 (8)
#define CCMR1_IC2F_D8_N8 (9)
#define CCMR1_IC2F_D16_N5 (10)
#define CCMR1_IC2F_D16_N6 (11)
#define CCMR1_IC2F_D16_N8 (12)
#define CCMR1_IC2F_D32_N5 (13)
#define CCMR1_IC2F_D32_N6 (14)
#define CCMR1_IC2F_D32_N8 (15)
#define CCMR1_IC2PSC_D1 (0)
#define CCMR1_IC2PSC_D2 (1)
#define CCMR1_IC2PSC_D4 (10)
#define CCMR1_IC2PSC_D8 (11)
#define CCMR1_IC1F_D1_N1 (0)
#define CCMR1_IC1F_D1_N2 (1)
#define CCMR1_IC1F_D1_N4 (2)
#define CCMR1_IC1F_D1_N8 (3)
#define CCMR1_IC1F_D2_N6 (4)
#define CCMR1_IC1F_D2_N8 (5)
#define CCMR1_IC1F_D4_N6 (6)
#define CCMR1_IC1F_D4_N8 (7)
#define CCMR1_IC1F_D8_N6 (8)
#define CCMR1_IC1F_D8_N8 (9)
#define CCMR1_IC1F_D16_N5 (10)
#define CCMR1_IC1F_D16_N6 (11)
#define CCMR1_IC1F_D16_N8 (12)
#define CCMR1_IC1F_D32_N5 (13)
#define CCMR1_IC1F_D32_N6 (14)
#define CCMR1_IC1F_D32_N8 (15)
#define CCMR1_IC1PSC_D1 (0)
#define CCMR1_IC1PSC_D2 (1)
#define CCMR1_IC1PSC_D4 (10)
#define CCMR1_IC1PSC_D8 (11)

#define CCMR2_OC4CE (1)
#define CCMR2_OC4M_FROZEN (0)
#define CCMR2_OC4M_ACT_MATCH (1)
#define CCMR2_OC4M_INACT_MATCH (2)
#define CCMR2_OC4M_TOGGLE (3)
#define CCMR2_OC4M_FORCE_ACT_LVL (4)
#define CCMR2_OC4M_FORCE_INACT_LVL (5)
#define CCMR2_OC4M_PWM_MODE1 (6)
#define CCMR2_OC4M_PWM_MODE2 (7)
#define CCMR2_OC4PE (1)
#define CCMR2_OC4FE (1)
#define CCMR2_CC4S_OUT (0)
#define CCMR2_CC4S_IN_IC4_TI4 (1)
#define CCMR2_CC4S_IN_IC4_TI3 (10)
#define CCMR2_CC4S_IN_IC4_TRC (11)
#define CCMR2_OC3CE (1)
#define CCMR2_OC3M_FROZEN (0)
#define CCMR2_OC3M_ACT_MATCH (1)
#define CCMR2_OC3M_INACT_MATCH (2)
#define CCMR2_OC3M_TOGGLE (3)
#define CCMR2_OC3M_FORCE_ACT_LVL (4)
#define CCMR2_OC3M_FORCE_INACT_LVL (5)
#define CCMR2_OC3M_PWM_MODE1 (6)
#define CCMR2_OC3M_PWM_MODE2 (7)
#define CCMR2_OC3PE (1)
#define CCMR2_OC3FE (1)
#define CCMR2_CC3S_OUT (0)
#define CCMR2_CC3S_IN_IC3_TI3 (1)
#define CCMR2_CC3S_IN_IC3_TI4 (10)
#define CCMR2_CC3S_IN_IC3_TRC (11)
#define CCMR2_IC4F_D1_N1 (0)
#define CCMR2_IC4F_D1_N2 (1)
#define CCMR2_IC4F_D1_N4 (2)
#define CCMR2_IC4F_D1_N8 (3)
#define CCMR2_IC4F_D2_N6 (4)
#define CCMR2_IC4F_D2_N8 (5)
#define CCMR2_IC4F_D4_N6 (6)
#define CCMR2_IC4F_D4_N8 (7)
#define CCMR2_IC4F_D8_N6 (8)
#define CCMR2_IC4F_D8_N8 (9)
#define CCMR2_IC4F_D16_N5 (10)
#define CCMR2_IC4F_D16_N6 (11)
#define CCMR2_IC4F_D16_N8 (12)
#define CCMR2_IC4F_D32_N5 (13)
#define CCMR2_IC4F_D32_N6 (14)
#define CCMR2_IC4F_D32_N8 (15)
#define CCMR2_IC4PSC_D1 (0)
#define CCMR2_IC4PSC_D2 (1)
#define CCMR2_IC4PSC_D4 (10)
#define CCMR2_IC4PSC_D8 (11)
#define CCMR2_IC3F_D1_N1 (0)
#define CCMR2_IC3F_D1_N2 (1)
#define CCMR2_IC3F_D1_N4 (2)
#define CCMR2_IC3F_D1_N8 (3)
#define CCMR2_IC3F_D2_N6 (4)
#define CCMR2_IC3F_D2_N8 (5)
#define CCMR2_IC3F_D4_N6 (6)
#define CCMR2_IC3F_D4_N8 (7)
#define CCMR2_IC3F_D8_N6 (8)
#define CCMR2_IC3F_D8_N8 (9)
#define CCMR2_IC3F_D16_N5 (10)
#define CCMR2_IC3F_D16_N6 (11)
#define CCMR2_IC3F_D16_N8 (12)
#define CCMR2_IC3F_D32_N5 (13)
#define CCMR2_IC3F_D32_N6 (14)
#define CCMR2_IC3F_D32_N8 (15)
#define CCMR2_IC3PSC_D1 (00)
#define CCMR2_IC3PSC_D2 (01)
#define CCMR2_IC3PSC_D4 (10)
#define CCMR2_IC3PSC_D8 (11)

#define CCER_CC4NP (1)
#define CCER_CC4NE (1)
#define CCER_CC4P (1)
#define CCER_CC4E (1)
#define CCER_CC3NP (1)
#define CCER_CC3NE (1)
#define CCER_CC3P (1)
#define CCER_CC3E (1)
#define CCER_CC2NP (1)
#define CCER_CC2NE (1)
#define CCER_CC2P (1)
#define CCER_CC2E (1)
#define CCER_CC1NP (1)
#define CCER_CC1NE (1)
#define CCER_CC1P (1)
#define CCER_CC1E (1)

#define BDTR_MOE (1)
#define BDTR_AOE (1)
#define BDTR_BKP (1)
#define BDTR_BKE (1)
#define BDTR_OSSR (1)
#define BDTR_OSSI (1)
#define BDTR_LOCK_OFF (0)
#define BDTR_LOCK_LEVEL1 (1)
#define BDTR_LOCK_LEVEL2 (10)
#define BDTR_LOCK_LEVEL3 (11)

#define PMCR1_EN (1)
#define PMCR1_RELA_EN (1)
#define PMCR1N_RELA_EN (1)
#define PMCR2_EN (1)
#define PMCR2_RELA_EN (1)
#define PMCR2N_RELA_EN (1)
#define PMCR3_EN (1)
#define PMCR3_RELA_EN (1)
#define PMCR3N_RELA_EN (1)
#define PMCR4_EN (1)
#define PMCR4_RELA_EN (1)
#define PMCR4N_RELA_EN (1)

#define PWMT_PUE_CHO1 (1 << 0)
#define PWMT_PUE_CHO2 (1 << 1)
#define PWMT_PUE_CHO3 (1 << 2)
#define PWMT_PUE_CHO4 (1 << 3)
#define PWMT_PUE_CHO1N (1 << 4)
#define PWMT_PUE_CHO2N (1 << 5)
#define PWMT_PUE_CHO3N (1 << 6)
#define PWMT_PUE_CHO4N (1 << 7)

#endif /* end __PWMT__ */

#endif /* end __MODULE_BIT__ */

/*** �ṹ�塢ö�ٱ������� ********************************************************/

/**
* @brief ADC
*/
typedef struct
{
    __IO uint32_t ADC_ISR;   /**< 00 ADC interrupt and status register                */
    __IO uint32_t ADC_IER;   /**< 04 ADC interrupt enable register                    */
    __IO uint32_t ADC_CR;    /**< 08 ADC control register                             */
    __IO uint32_t ADC_CFGR1; /**< 0C ADC configuration register 1                     */

    __IO uint32_t ADC_CFGR2; /**< 10 ADC configuration register 2                     */
    __IO uint32_t ADC_SMPR;  /**< 14 ADC sampling time register                       */
    __IO uint32_t ADC_WDG;   /**< 18 ADC watch dog register                           */
    __IO uint32_t ADC_TR;    /**< 1C ADC watch dog threshold register                 */

    __IO uint32_t RESERVED1[3]; /**< 20 24 28                                            */
    __IO uint32_t ADC_CHSELR1;  /**< 2C ADC channel selection register 1                 */

    __IO uint32_t ADC_CHSELR2;  /**< 30 ADC channel selection register 2                 */
    __IO uint32_t RESERVED2[6]; /**< 40                                                  */

    __IO uint32_t ADC_FIFOR; /**< 4C ADC FIFO access register                         */

    __IO uint32_t RESERVED3; /**< 50                                                  */
    __IO uint32_t ADC_ISR2;  /**< 54 ADC interrupt and status register 2              */
    __IO uint32_t ADC_DGATR; /**< 58 ADC data gather register                         */
    __IO uint32_t ADC_DBUFR; /**< 5C ADC data buffer register                         */

    __IO uint32_t ADC_FIFOTOR;  /**< 60 ADC FIFO timeout register                        */
    __IO uint32_t RESERVED4[7]; /**< 64                                                  */

    union
    {
        __IO uint32_t ADC_DET3; /**< 80 ADC data for test 3                              */
        struct
        {
            __IO uint16_t CHANEL6;
            __IO uint16_t CHANEL7;
        } DET3;
    };
    union
    {
        __IO uint32_t ADC_DET2; /**< 84 ADC data for test 2                              */
        struct
        {
            __IO uint16_t CHANEL4;
            __IO uint16_t CHANEL5;
        } DET2;
    };
    union
    {
        __IO uint32_t ADC_DET1; /**< 88 ADC data for test 1                              */
        struct
        {
            __IO uint16_t CHANEL2;
            __IO uint16_t CHANEL3;
        } DET1;
    };
    union
    {
        __IO uint32_t ADC_DET0; /**< 8C ADC data for test 0                              */
        struct
        {
            __IO uint16_t CHANEL0;
            __IO uint16_t CHANEL1;
        } DET0;
    };

    union
    {
        __IO uint32_t ADC_DET7; /**< 90 ADC data for test 7                              */
        struct
        {
            __IO uint16_t CHANEL14;
            __IO uint16_t CHANEL15;
        } DET7;
    };
    union
    {
        __IO uint32_t ADC_DET6; /**< 94 ADC data for test 6                              */
        struct
        {
            __IO uint16_t CHANEL12;
            __IO uint16_t CHANEL13;
        } DET6;
    };
    union
    {
        __IO uint32_t ADC_DET5; /**< 98 ADC data for test 5                              */
        struct
        {
            __IO uint16_t CHANEL10;
            __IO uint16_t CHANEL11;
        } DET5;
    };
    union
    {
        __IO uint32_t ADC_DET4; /**< 9C ADC data for test 4                              */
        struct
        {
            __IO uint16_t CHANEL8;
            __IO uint16_t CHANEL9;
        } DET4;
    };

    union
    {
        __IO uint32_t ADC_DET8; /**< A0 ADC data for test 8                              */
        struct
        {
            __IO uint16_t CHANEL16;
            __IO uint16_t RESERVED5;
        } DET8;
    };
    __IO uint32_t ADC_CHSELR3; /**< A4 ADC channel selection register 3                 */
} ADC_TypeDef;

/**
* @brief  CACHEģ��Ĵ�������
*/

/* CACHE ģ��Ĵ��� */
typedef struct
{
    __IO uint32_t CACHE_CCR;    /**< 0x00 ���ƼĴ��� */
    __IO uint32_t CACHE_CLCR;   /**< 0x04 �п��ƼĴ��� */
    __IO uint32_t CACHE_CSAR;   /**< 0x08 ��ѯ��ַ�Ĵ��� */
    __IO uint32_t CACHE_CCVR;   /**< 0x0C ��/д��ֵ�Ĵ���  */
    __IO uint32_t RESERVED1[4]; /**< 0x10~0x1C */
    __IO uint32_t CACHE_CACR;   /**< 0x20 ����ַ�δ�ȡȨ�޼Ĵ��� */
    __IO uint32_t CACHE_CSACR;  /**< 0x24 �ӵ�ַ�δ�ȡȨ�޼Ĵ��� */
    __IO uint32_t RESERVED2[6]; /**< 0x28~0x3C */

    __IO uint32_t CACHE_CSPI1S0HA; /**< 0x40 ��SPI1������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S1HA; /**< 0x44 ��SPI1������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S2HA; /**< 0x48 ��SPI1������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S3HA; /**< 0x4C ��SPI1������3��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S0LA; /**< 0x50 ��SPI1������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S1LA; /**< 0x54 ��SPI1������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S2LA; /**< 0x58 ��SPI1������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI1S3LA; /**< 0x5C ��SPI1������3��ַ���޼Ĵ��� */

    __IO uint32_t CACHE_CSPI2S0HA; /**< 0x60 ��SPI2������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S1HA; /**< 0x64 ��SPI2������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S2HA; /**< 0x68 ��SPI2������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S3HA; /**< 0x6C ��SPI2������3��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S0LA; /**< 0x70 ��SPI2������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S1LA; /**< 0x74 ��SPI2������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S2LA; /**< 0x78 ��SPI2������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI2S3LA; /**< 0x7C ��SPI2������3��ַ���޼Ĵ��� */

    __IO uint32_t CACHE_CSPI3S0HA; /**< 0x80 ��SPI3������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S1HA; /**< 0x84 ��SPI3������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S2HA; /**< 0x88 ��SPI3������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S3HA; /**< 0x8C ��SPI3������3��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S0LA; /**< 0x90 ��SPI3������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S1LA; /**< 0x94 ��SPI3������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S2LA; /**< 0x98 ��SPI3������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CSPI3S3LA; /**< 0x9C ��SPI3������3��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS0HA; /**< 0xA0 ��ROMR������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS1HA; /**< 0xA4 ��ROMR������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS2HA; /**< 0xA8 ��ROMR������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS3HA; /**< 0xAC ��ROMR������3��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS0LA; /**< 0xB0 ��ROMR������0��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS1LA; /**< 0xB4 ��ROMR������1��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS2LA; /**< 0xB8 ��ROMR������2��ַ���޼Ĵ��� */
    __IO uint32_t CACHE_CROMRS3LA; /**< 0xBC ��ROMR������3��ַ���޼Ĵ��� */

    __IO uint32_t RESERVED3[48]; /**< 0xC0~0x17C */

    __IO uint32_t CACHE_CPEA; /**< 0x180 ҳ�����ַ�Ĵ��� */
    __IO uint32_t CACHE_CPES; /**< 0x184 ҳ�����С�Ĵ��� */
    __IO uint32_t CACHE_CCG;  /**< 0x188 ʱ���ſؼĴ��� */
} reg_cache_t;

/**
* @brief  CAN��Ϣ������
*/
    typedef struct
    {
        __IO uint32_t MB_CS;     // Message Buffer control & time stamp word
        __IO uint32_t MB_ID;     // Message Buffer priority & id word
        union{
          struct {
            __IO uint32_t    MB_WORD0;
            __IO uint32_t    MB_WORD1;
          };
           __IO uint8_t MB_DATA[8]; // Message Buffer data byte0~8
        };
       

    } CAN_MessageBuffer_TypeDef;
/**
* @brief  CAN��Ϣ������
*/

/**
* @brief  CAN rx individual mask registers
*/
typedef struct
{
    __IO uint32_t CAN_RXIMR[64]; // CAN rx individual mask register0~63

} CAN_RxIndividualMask_TypeDef;
/**
* @brief  CAN rx individual mask registers
*/

/**
* @brief  CAN rx fifo registers
*/
typedef struct
{
    __IO uint32_t ID_TABLE[8]; // CAN rx individual mask register0~63

} CAN_RxFifoIDTable_TypeDef;
/**
* @brief  CAN rx individual mask registers
*/

/**
* @brief  CANģ��Ĵ�������
*/
typedef struct
{

    __IO uint32_t CAN_MCR;                /**< 0x00 ģ�����üĴ��� */
    __IO uint32_t CAN_CR;                 /**< 0x04 ���ƼĴ��� */
    __IO uint32_t CAN_FRT;                /**< 0x08 �������ж�ʱ���Ĵ��� */
    __IO uint32_t RESERVED0;              /**< 0x0C ���� */
    __IO uint32_t CAN_RXGM;               /**< 0x10 RXȫ������Ĵ��� */
    __IO uint32_t CAN_RX14M;              /**< 0x14 RX��������Ĵ���14 */
    __IO uint32_t CAN_RX15M;              /**< 0x18 RX��������Ĵ���15 */
    __IO uint32_t CAN_ECR;                /**< 0x1C ��������Ĵ��� */
    __IO uint32_t CAN_ESR;                /**< 0x20 ����״̬�Ĵ��� */
    __IO uint32_t CAN_IM2R;               /**< 0x24 �ж�����Ĵ���2 */
    __IO uint32_t CAN_IM1R;               /**< 0x28 �ж�����Ĵ���1 */
    __IO uint32_t CAN_IF2R;               /**< 0x2C �жϱ�־�Ĵ���2 */
    __IO uint32_t CAN_IF1R;               /**< 0x30 �жϱ�־�Ĵ���1 */
    __IO uint32_t RESERVED1[19];          /**< 0x34~0x7f ���� */
    CAN_MessageBuffer_TypeDef CAN_MB[64]; /**< 0x80~0x47F ��Ϣ������*/

} CAN_TypeDef;
/**
* @brief  CANģ��Ĵ�������
*/

/**
* @brief  CCMģ��Ĵ�������
*/
typedef struct
{
    __IO uint16_t RESERVED0; //0x00  FD configuration register
    __IO uint16_t CCR;       //0x02   chip configuration register
    __IO uint16_t CIR;       //0x04   chip identification register
    __IO uint16_t PHYPA;     //0x06   PHY parameter configurationregister
    __IO uint16_t RESERVED1; //0x08
    __IO uint16_t CTR;       //0x0a chip test register
    __IO uint32_t RESERVED2; //0x0C

    __IO uint32_t PCFG12;   //0x10
    __IO uint32_t PCFG3;    //0x14
    __IO uint32_t RTCCFG12; //0x18
    __IO uint32_t RSTCLKCFG;  //0x1C

    __IO uint32_t RTCSR;        //0x20
    __IO uint32_t RESERVED3;    //0x24
    __IO uint32_t OTG_PHY_CTRL; //0x28
    __IO uint32_t RESERVED4[4]; //0x2C~0x38
    __IO uint32_t SSICFGR;      //0x3C
} reg_ccm_t;

/**
* @brief  CRCģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t CR;                  /**<CRC control register */
    __IO uint32_t RES;                 /**<CRC result */
    __IO uint32_t INIT_DATA;           /**<CRC initial data */
    __IO uint32_t DATA_IN;             /**<CRC data in */
    __IO uint32_t DMAC_DATA_IN;        /**<DMAC data in */
    __IO uint32_t EDMAC_CRC_OK;        /**<EDMAC CRC OK */
    __IO uint32_t EDMAC_CRC_FIRST_ERR; /**<EDMAC first CRC error number */
    __IO uint32_t EDMAC_CRC_COUNT;     /**<EDMAC CRC counter */
} CRC_TypeDef;

/**
* @brief CLOCK and POWER
*/
typedef struct
{
    __IO uint32_t SLPCFGR; /**< 00 sleep configuration register                     */
    __IO uint32_t SLPCR;   /**< 04 sleep control register                           */
    __IO uint32_t SCDIVR;  /**< 08 system clock divider register                    */
    __IO uint32_t PCDIVR1; /**< 0C speripheral clock divider register 1             */

    __IO uint32_t PCDIVR2;  /**< 10 speripheral clock divider register 2             */
    __IO uint32_t RESERVED; /**< 14 speripheral clock divider register 3             */
    __IO uint32_t CDIVUPDR; /**< 18 clock divider update register                    */
    __IO uint32_t CDIVENR;  /**< 1C clock divider enable register                    */

    __IO uint32_t OCSR;     /**< 20 oscillator control and status register           */
    __IO uint32_t CSWCFGR;  /**< 24 clock switch config register                     */
    __IO uint32_t CTICKR;   /**< 28 core tick timer register                         */
    __IO uint32_t CHIPCFGR; /**< 2C chip config register                             */

    __IO uint32_t PWRCR;      /**< 30 power control register                            */
    __IO uint32_t SLPCNTR;    /**< 34 sleep counter register                            */
    __IO uint32_t WKPCNTR;    /**< 38 wake up counter register                          */
    __IO uint32_t MULTICGTCR; /**< 3C multiple clock gate control register              */

    __IO uint32_t SYSCGTCR;   /**< 40 system clock gate control register                */
    __IO uint32_t AHB3CGTCR;  /**< 44 ahb3 clock gate control registe                   */
    __IO uint32_t ARITHCGTCR; /**< 48 arith clock gate control registe                  */
    __IO uint32_t IPSCGTCR;   /**< 4C ips clock gate control registe                    */

    __IO uint32_t VCCGTRIMR; /**< 50 vcc general trim register                         */
    __IO uint32_t VCCLTRIMR; /**< 54 vcc lv detect trim register                       */
    __IO uint32_t VCCVTRIMR; /**< 58 vcc vref trim register                            */
    __IO uint32_t VCCCTMR;   /**< 5C vcc core test mode register                       */

    __IO uint32_t O8MTRIMR;   /**< 60 osc8mhz trim register                             */
    __IO uint32_t RESERVED1;  /**< 64                                                   */
    __IO uint32_t O400MTRIMR; /**< 68 osc320mhz trim register                           */
    __IO uint32_t CARDTRIMR;  /**< 6C card ldo trim register                            */

    __IO uint32_t OSCLSTIMER; /**< 70 oscl stable time register                         */
    __IO uint32_t OSCHSTIMER; /**< 74 osch stable time register                         */
    __IO uint32_t OSCESTIMER; /**< 78 osce stable time register                         */
    __IO uint32_t PWRSR;      /**< 7C power status register                             */

    __IO uint32_t EPORTSLPCFGR; /**< 80                                             */
    __IO uint32_t EPORTCGTR;    /**< 84                                             */
    __IO uint32_t EPORTRSTCR;   /**< 88                                             */
    __IO uint32_t RTCTRIMR;     /**< 8C rtc trim register                                 */

    __IO uint32_t PADWKINTCR;  /**< 90 pad wakeup interrupt control register             */
    __IO uint32_t WKPFILTCNTR; /**< 94 wakeup filter counter register                    */
    __IO uint32_t CARDPOCR;    /**< 98 card power on counter register                    */
    __IO uint32_t RTCSTIMER;   /**< 9C rtc 32k stable time register                      */

    __IO uint32_t MPDSLPCR;     /**< A0 memory power down sleep control register          */
    __IO uint32_t RESERVED2[2]; /**< A4 A8                                                   */
    __IO uint32_t MULTIRSTCR;   /**< AC multiple reset control register                   */

    __IO uint32_t SYSRSTCR;    /**< B0 system reset control register                     */
    __IO uint32_t AHB3RSTCR;   /**< B4 ahb3 reset control register                       */
    __IO uint32_t ARITHRSTTCR; /**< B8 arith reset control register                      */
    __IO uint32_t IPRSTCR;     /**< BC ips reset control register                        */

    __IO uint32_t SLPCFGR2;     /**< C0 sleep config register 2                           */
    __IO uint32_t RESERVED3[3]; /**< C4 C8 CC                                             */

    __IO uint32_t PDNCNTR;      /**< D0 power down counter register                       */
    __IO uint32_t PONCNTR;      /**< D4 power on counter register                         */
    __IO uint32_t PCDIVR4;      /**< D8                           */
    __IO uint32_t RESERVED4;    /**< DC wake up source control register                   */
    __IO uint32_t PLLNFCCFGR;   /**< E0  NFC PLL config  register                             */
    __IO uint32_t PLLNFCSTIMER; /**< E4 wake up source control register                   */

} reg_cpm_t;

/**
* @brief DMA ͨ���Ĵ�������
*
*/
typedef struct
{
    __IO uint32_t SRCADDR; /**< 0000 DMA Channel Source Address Register */
    __IO uint32_t RESERVED0;
    __IO uint32_t DSTADDR; /**< 0008 DMA Channel Destination Address Register */
    __IO uint32_t RESERVED1;
    __IO uint32_t LLI; /**< 0010 DMA Channel Linked List Item Register */
    __IO uint32_t RESERVED2;
    __IO uint32_t CTRL;        /**< 0018 DMA Channel Control Register */
    __IO uint32_t CTRL_HIGH;   /**< 001C DMA Channel Control Register */
    __I uint32_t RESERVED3[8]; /**  20 24 28 2C
                                             30 34 38 3C*/
    __IO uint32_t CONFIG;      /**< 0040 DMA Channel Configuration Register */
    __IO uint32_t CONFIG_HIGH; /**< 0044 DMA Channel Configuration Register */
    __I uint32_t RESERVED4[4]; /**  48 4C  50 54 */
} dmac_channel_t;

/**
* @brief DMA MIN ADDR�Ĵ�������
*
*/
typedef struct
{
    __IO uint32_t SARADDR;
    __IO uint32_t DSTADDR;
} dmac_minaddr_t;

/**
* @brief DMACģ��Ĵ�������
*
*/
typedef struct
{
    dmac_channel_t CH[4]; /**< 0x0000---> 0x015C */

    __IO uint32_t RESERVED0[88]; /**< 0x0160---> 0x02BC */
    __IO uint32_t RAWTFR;        /**< 0x02C0 raw status for intTfr interrupt */
    __IO uint32_t RESERVED1;
    __IO uint32_t RAWBLOCK; /**< 0x02C8 raw status for intBlock interrupt */
    __IO uint32_t RESERVED2;
    __IO uint32_t RAWSRCTRAN; /**< 0x02D0 raw status for intScTran interrupt */
    __IO uint32_t RESERVED3;
    __IO uint32_t RAWDETTRAN; /**< 0x02D8 raw status for intDestTran interrupt */
    __IO uint32_t RESERVED4;
    __IO uint32_t RAWERR; /**< 0x02EO raw status for intErr interrupt */
    __IO uint32_t RESERVED5;
    __IO uint32_t STATTFR; /**< 0x02E8  status for intTfr interrupt */
    __IO uint32_t RESERVED6;
    __IO uint32_t STATBLOCK; /**< 0x02F0  status for intBlock interrupt */
    __IO uint32_t RESERVED7;
    __IO uint32_t STATSRC; /**< 0x02F8  status for intScTran interrupt */
    __IO uint32_t RESERVED8;
    __IO uint32_t STATDST; /**< 0x0300  status for intDestTran interrupt */
    __IO uint32_t RESERVED9;
    __IO uint32_t ERR; /**< 0x0308  status for intErr interrupt */
    __IO uint32_t RESERVED10;
    __IO uint32_t MASKTFR; /**< 0x0310 mask for intTfr interrupt */
    __IO uint32_t RESERVED11;
    __IO uint32_t MASKBLOCK; /**< 0x0318 mask for intBlock interrupt */
    __IO uint32_t RESERVED12;
    __IO uint32_t MASKSRC; /**< 0x0320 mask for intScTran interrupt */
    __IO uint32_t RESERVED13;
    __IO uint32_t MASKDST; /**< 0x0328 mask for intDestTran interrupt */
    __IO uint32_t RESERVED14;
    __IO uint32_t MASKERR; /**< 0x0330 mask for intErr interrupt */
    __IO uint32_t RESERVED15;
    __IO uint32_t CLRTFR; /**< 0x0338 clear for intTfr interrupt */
    __IO uint32_t RESERVED16;
    __IO uint32_t CLRBLOCK; /**< 0x0340 clear for intBlock interrupt */
    __IO uint32_t RESERVED17;
    __IO uint32_t CLRSRC; /**< 0x0348 clear for intScTran interrupt */
    __IO uint32_t RESERVED18;
    __IO uint32_t CLRDST; /**< 0x0350 clear for intDestTran interrupt */
    __IO uint32_t RESERVED19;
    __IO uint32_t CLRERR; /**< 0x0358 clear for intErr interrupt */
    __IO uint32_t RESERVED20;
    __IO uint32_t STATUSINT; /**< 0x0360 status for each interrupt type */
    __IO uint32_t RESERVED21;
    __IO uint32_t SRCREQ; /**< 0x0368 transacion request */
    __IO uint32_t RESERVED22;
    __IO uint32_t DESTREQ; /**< 0x0370 transacion request */
    __IO uint32_t RESERVED23;
    __IO uint32_t SINGLESRC; /**< 0x0378 transacion request */
    __IO uint32_t RESERVED24;
    __IO uint32_t SINGLEDST; /**< 0x0380 transacion request */
    __IO uint32_t RESERVED25;
    __IO uint32_t LASTSRC; /**< 0x0388 transacion request */
    __IO uint32_t RESERVED26;
    __IO uint32_t LASTDST; /**< 0x0390 transacion request */
    __IO uint32_t RESERVED27;
    __IO uint32_t CONFIG; /**< 0x0398 confuration  */
    __IO uint32_t RESERVED28;
    __IO uint32_t CHEN;          /**< 0x03A0 cannel enable  */
    __IO uint32_t RESERVED29[7]; /**< 0x03A4---> 0x03BC */
    __IO uint32_t RAWMIN;        /**< 0x03C0 raw status for intMIN interrupt */
    __IO uint32_t RESERVED30;
    __IO uint32_t MASKMIN; /**< 0x03C8 mask status for intMIN interrupt */
    __IO uint32_t RESERVED31;
    __IO uint32_t CLRMIN; /**< 0x03D0 clear status for intMIN interrupt */
    __IO uint32_t RESERVED32;

    dmac_minaddr_t MIN_CH[4]; /**< 0x03D8---> 0x03F4 */
} DMAC_TypeDef;


typedef struct _DMA_CONTROL_REG
{
    __IO unsigned int DMA_RAWTFR;//0x00//0x2c0
    __IO unsigned int RESERVED1;//0x04//0x2c4
    __IO unsigned int DMA_RAWBLOCK;//0x08////0x2c8
    __IO unsigned int RESERVED2;//0x0c////0x2cc
    __IO unsigned int DMA_RAWSRCTRAN;//0x10//0x2d0
    __IO unsigned int RESERVED3;//0x14//0x2d4
    __IO unsigned int DMA_RAWDSTTRAN;//0x18//0x2d8
    __IO unsigned int RESERVED4;//0x1c//0x2dc
    __IO unsigned int DMA_RAWERR;//0x20//0x2e0
    __IO unsigned int RESERVED5;//0x24//0x2e4
    __IO unsigned int DMA_STATTFR;//0x28//0x2e8
    __IO unsigned int RESERVED6;//0x2c//0x2ec
    __IO unsigned int DMA_STATBLOCK;//0x30//0x2f0
    __IO unsigned int RESERVED7;//0x34//0x2f4
    __IO unsigned int DMA_STATSRC;//0x38//0x2f8
    __IO unsigned int RESERVED8;//0x3c //0x2fc

    __IO unsigned int DMA_STATDST;//0x40//0x300
    __IO unsigned int RESERVED9;//0x44//0x304
    __IO unsigned int DMA_STATERR;//0x48//0x308
    __IO unsigned int RESERVED10;//0x4c//0x30c

    __IO unsigned int DMA_MASKTFR;//0x50//0x310
    __IO unsigned int RESERVED11;//0x54//0x314
    __IO unsigned int DMA_MASKBLOCK;//0x58//0x318
    __IO unsigned int RESERVED12;//0x5c//0x31c

    __IO unsigned int DMA_MASKSRC;//0x60//0x320
    __IO unsigned int RESERVED13;//0x64//0x324
    __IO unsigned int DMA_MASKDST;//0x68//0x328
    __IO unsigned int RESERVED14;//0x6c//0x32c

    __IO unsigned int DMA_MASKERR;//0x70//0x330
    __IO unsigned int RESERVED15;//0x74//0x334
    __IO unsigned int DMA_CLRTFR;//0x78//0x338
    __IO unsigned int RESERVED16;//0x7c//0x33c

    __IO unsigned int DMA_CLRBLOCK;//0x80//0x340
    __IO unsigned int RESERVED17;//0x84//0x344
    __IO unsigned int DMA_CLRSRC;//0x88//0x348
    __IO unsigned int RESERVED18;//0x8c//0x34c

    __IO unsigned int DMA_CLRDST;//0x90//0x350
    __IO unsigned int RESERVED19;//0x94//0x354
    __IO unsigned int DMA_CLRERR;//0x98//0x358
    __IO unsigned int RESERVED20;//0x9c//0x35c

    __IO unsigned int DMA_STATUSINT;//0x100//0x360
    __IO unsigned int RESERVED21;//0x104//0x364
    __IO unsigned int DMA_SRCREQ;//0x108//0x368
    __IO unsigned int RESERVED22;//0x10c//0x36c

    __IO unsigned int DMA_DSTREQ;//0x110//0x370
    __IO unsigned int RESERVED23;//0x114//0x374
    __IO unsigned int DMA_SINGLESRC;//0x118//0x378
    __IO unsigned int RESERVED24;//0x11c//0x37c

    __IO unsigned int DMA_SINGLEDST;//0x120//0x380
    __IO unsigned int RESERVED25;//0x124//0x384
    __IO unsigned int DMA_LASTSRC;//0x128//0x388
    __IO unsigned int RESERVED26;//0x12c//0x38c

    __IO unsigned int DMA_LASTDST;//0x130//0x390
    __IO unsigned int RESERVED27;//0x134//0x394
    __IO unsigned int DMA_CONFIG;//0x138//0x398
    __IO unsigned int RESERVED28;//0x13c//0x39c

    __IO unsigned int DMA_CHEN;//0x140//0x3a0

} DMA_CONTROL_REG;
/**
* @brief EMDAC ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t CR;          /**< */
    __IO uint32_t CSR;         /**< */
    __IO uint32_t RBAR;        /**< */
    __IO uint32_t WBAR;        /**< */
    __IO uint32_t MINSUMR;     /**< */
    __IO uint32_t MINCNTR;     /**< */
    __IO uint32_t MAJSUMR;     /**< */
    __IO uint32_t MAJCNTR;     /**< */
    __IO uint32_t SPAR;        /**< */
    __IO uint32_t WBARSTEP;    /**< */
    __IO uint32_t LASTMINSUMR; /**< */
} EDMAC_TypeDef;

/**
* @brief EFALSH ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t EFCR;           /**< 00 */
    __IO uint32_t EFAPR;          /**< 04 */
    __IO uint32_t EFSTAT;         /**< 08 */
    __IO uint32_t EFINTM;         /**< 0C */
    __IO uint32_t EFCMD;          /**< 10 */
    __IO uint32_t EECCECNT;       /**< 14 */
    __IO uint32_t ETIMBASE;       /**< 18 */
    __IO uint32_t ETIMCFG;        /**< 1C */
    __IO uint32_t EFPETIMER;      /**< 20 */
    __IO uint32_t SMWOP0;         /**< 24 */
    __IO uint32_t SMWOP1;         /**< 28 */
    __IO uint32_t SMWOP2;         /**< 2C */
    __IO uint32_t SMWOP3;         /**< 30 */
    __IO uint32_t SMPWHVOP0;      /**< 34 */
    __IO uint32_t SMPWHVOP1;      /**< 38 */
    __IO uint32_t SMEWHVOP0;      /**< 3C */
    __IO uint32_t SMEWHVOP1;      /**< 40 */
    __IO uint32_t SMWINFO0;       /**< 44 */
    __IO uint32_t RESERVED0;      /**< 48 */
    __IO uint32_t EFORDN0STAT;    /**< 4C */
    __IO uint32_t EFORDN1STAT;    /**< 50 */
    __IO uint32_t EFORDN2STAT;    /**< 54 */
    __IO uint32_t EFORDN3STAT;    /**< 58 */
    __IO uint32_t EFORDN4STAT;    /**< 5C */
    __IO uint32_t EFORDN5STAT;    /**< 60 */
    __IO uint32_t EFORDN6STAT;    /**< 64 */
    __IO uint32_t EFORDN7STAT;    /**< 68 */
    __IO uint32_t RESERVEDS[8];   /**< 6C 70 74 78 7C 80 84 88 */
    __IO uint32_t ERRADDR0;       /**< 8C */
    __IO uint32_t RESERVED1;      /**< 90 */
    __IO uint32_t EFDIRCTRLEN;    /**< 94 */
    __IO uint32_t DIRCARDDR;      /**< 98 */
    __IO uint32_t DIRCWDATAL;     /**< 9C */
    __IO uint32_t DIRCWDATAH;     /**< A0 */
    __IO uint32_t DIRCRDATAL;     /**< A4 */
    __IO uint32_t DIRCRDATAH;     /**< A8 */
    __IO uint32_t DIRCFPINCTL;    /**< AC */
    __IO uint32_t TRIMCODE0L;     /**< B0 */
    __IO uint32_t TRIMCODE0H;     /**< B4 */
    __IO uint32_t TRIMCODE1L;     /**< B8 */
    __IO uint32_t TRIMCODE1H;     /**< BC */
    __IO uint32_t RESERVEDS1[11]; /**< C0--->E8 */
    __IO uint32_t EFUSEEN;        /**< F0 */
    __IO uint32_t EFUSECTRL;      /**< F4 */
    __IO uint32_t EFUSEDATA;      /**< F8 */
    __IO uint32_t EFUSEVDDQEN;    /**< FC */
} EFLASH_TypeDef;

/**
* @brief  EPORT ģ��Ĵ�������
*/
typedef struct
{
    union
    {
        __IO uint16_t EPPAR; /**< 0x00 */
        struct
        {
            __IO uint8_t EPPAR_L;
            __IO uint8_t EPPAR_H;
        } EPPARHL;
    };

    __IO uint8_t EPIER;  /**< 0x02 */
    __IO uint8_t EPDDR;  /**< 0x03 */
    __IO uint8_t EPPDR;  /**< 0x04 */
    __IO uint8_t EPDR;   /**< 0x05 */
    __IO uint8_t EPPUER; /**< 0x06 */
    __IO uint8_t EPFR;   /**< 0x07 */
    __IO uint8_t EPODER; /**< 0x08 */
    __IO uint8_t EPLPR;  /**< 0x09 */
} EPORT_TypeDef;

/**
* @brief EFALSH ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t OTPCR;      /**< 00 */
    __IO uint32_t OTPAPR;     /**< 04 */
    __IO uint32_t OTPSTAT;    /**< 08 */
    __IO uint32_t OTPINTM;    /**< 0C */
    __IO uint32_t OTPCMD;     /**< 10 */
    __IO uint32_t OTPTIMBASE; /**< 14 */
    __IO uint32_t OTPTIMCFG;  /**< 18 */
    __IO uint32_t OTPPTIMER;  /**< 1C */
} OTP_TypeDef;

/**
* @brief I2C ģ��Ĵ�������
*/
typedef struct
{
    __IO uint8_t SARH;      /**< 0--1*/
    __IO uint8_t SARL;      /**< 0--1*/
    //    __IO uint16_t SAR;          /**< 0--1*/
    __IO uint8_t CCR;       /**< 2*/
    __IO uint8_t PR;        /**< 3*/
    __IO uint8_t SR;        /**< 4*/
    __IO uint8_t DR;        /**< 5*/
    __IO uint8_t SHTR;      /**< 6*/
    __IO uint8_t SHIR;      /**< 7*/
    __IO uint8_t PCR;       /**< 8*/
    __IO uint8_t PDR;       /**< 9*/
    __IO uint8_t DDR;       /**< a*/
    __IO uint8_t FCTR;      /**< b*/
    __IO uint8_t NSFTVR_10; /**< c*/
    __IO uint8_t NSFTVR_50; /**< d*/
} I2C_TypeDef;

/**
* @brief  IO ����ģ��Ĵ�������
*/
typedef struct
{
    volatile uint32_t SPICR;     /**< 0x00  */
    volatile uint32_t USICR;     /**< 0x04  */
    volatile uint32_t I2CCR;     /**< 0x08  */
    volatile uint32_t UARTCR;    /**< 0x0C  */
    volatile uint32_t EPORT0CR;   /**< 0x10  */
    volatile uint32_t EPORT1CR;   /**< 0x14  */
    volatile uint32_t RESERVED;  /**< 0x18  */
    volatile uint32_t SWAPCR;    /**< 0x1C  */
    volatile uint32_t SPIM1CR;   /**< 0x20  */
    volatile uint32_t SPIM2CR;   /**< 0x24  */
    volatile uint32_t SPIM3CR;   /**< 0x28  */
    volatile uint32_t RESERVED2; /**< 0x2C  */
    volatile uint32_t RESERVED3; /**< 0x30  */
    volatile uint32_t RESERVED4; /**< 0x34  */
    volatile uint32_t GMACWKCR; /**< 0x38  */
    volatile uint32_t RESERVED5; /**< 0x3C  */
    volatile uint32_t RESERVED6; /**< 0x40  */
    volatile uint32_t RESERVED7; /**< 0x44  */
    volatile uint32_t PSRAMCR1;  /**< 0x48  */
    volatile uint32_t PSRAMCR2;  /**< 0x4C  */
    volatile uint32_t PSRAMCR3;  /**< 0x50  */
    volatile uint32_t EPORT2CR;  /**< 0x54  */
    volatile uint32_t EPORT3CR;  /**< 0x58  */
    volatile uint32_t EPORT4CR;  /**< 0x5C  */
    volatile uint32_t EPORT5CR;  /**< 0x60  */
    volatile uint32_t EPORT6CR;  /**< 0x64  */
    volatile uint32_t EPORT7CR;  /**< 0x68  */
    volatile uint32_t SWAPCR2;   /**< 0x6C  */
    volatile uint32_t SWAPCR3;   /**< 0x70  */
    volatile uint32_t SWAPCR4;   /**< 0x74  */
    volatile uint32_t SWAPCR5;   /**< 0x78  */
    volatile uint32_t I2SIOCR;   /**< 0x7C  */
    volatile uint32_t SSISLVCR;  /**< 0x80  */
    volatile uint32_t PWMTCR;    /**< 0x84  */
    volatile uint32_t CANCR;     /**< 0x88  */
    volatile uint32_t SPI1CR;    /**< 0x8C  */
    volatile uint32_t SPI2CR;    /**< 0x90  */
    volatile uint32_t SPI3CR;    /**< 0x94  */
} reg_ioctrl_t;

/**
* @brief  LED ģ��Ĵ�������
*/
typedef struct
{
    volatile uint8_t PIER;
    volatile uint8_t WDR;
    volatile uint8_t FDR;
    volatile uint8_t PER;
} LED_TypeDef;


/**
* @brief PIT ģ��Ĵ�������
*/
typedef struct
{
    __IO uint16_t PCSR;  /**< PIT���ƺ�״̬�Ĵ���, ƫ�Ƶ�ַ: 0x0000 */
    __IO uint16_t PMR;   /**< PIT����load�Ĵ���, ƫ�Ƶ�ַ: 0x0002 */
    __IO uint16_t PCNTR; /**< PIT��ǰ�����Ĵ���, ƫ�Ƶ�ַ: 0x0004 */
} PIT_TypeDef;

/**
* @brief PIT32 ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t PCSR;  /**< PIT32���ƺ�״̬�Ĵ���, ƫ�Ƶ�ַ: 0x0000 */
    __IO uint32_t PMR;   /**< PIT32����load�Ĵ���, ƫ�Ƶ�ַ: 0x0004 */
    __IO uint32_t PCNTR; /**< PIT32��ǰ�����Ĵ���, ƫ�Ƶ�ַ: 0x0008 */
} PIT32_TypeDef;

/**
* @brief PWM Registers
*/
typedef struct
{
    __IO uint32_t PPR;    /**< 0x00 PWM Pre-scale Register               */
    __IO uint32_t PDZR1;  /**< 0x04 PWM DZ Register                      */
    __IO uint32_t PCSR;   /**< 0x08 PWM Clock Select Register            */
    __IO uint32_t PCR;    /**< 0x0C PWM Control Register                 */
    __IO uint32_t PCR1;   /**< 0x10 PWM Control Register 1               */
    __IO uint32_t PCNR0;  /**< 0x14 PWM Counter Register0                */
    __IO uint32_t PCMR0;  /**< 0x18 PWM Comparator Register0             */
    __IO uint32_t PTR0;   /**< 0x1C PWM Timer Register0                  */
    __IO uint32_t PCNR1;  /**< 0x20 PWM Counter Register1                */
    __IO uint32_t PCMR1;  /**< 0x24 PWM Comparator Register1             */
    __IO uint32_t PTR1;   /**< 0x28 PWM Timer Register1                  */
    __IO uint32_t PCNR2;  /**< 0x2C PWM Counter Register2                */
    __IO uint32_t PCMR2;  /**< 0x30 PWM Comparator Register2             */
    __IO uint32_t PTR2;   /**< 0x34 PWM Timer Register2                  */
    __IO uint32_t PCNR3;  /**< 0x38 PWM Counter Register3                */
    __IO uint32_t PCMR3;  /**< 0x3C PWM Comparator Register3             */
    __IO uint32_t PTR3;   /**< 0x40 PWM Timer Register3                  */
    __IO uint32_t PIER;   /**< 0x44 PWM Interrupt Enable Register        */
    __IO uint32_t PIFR;   /**< 0x48 PWM Interrupt FlagRegister           */
    __IO uint32_t PCCR0;  /**< 0x4C PWM Capture Control Register0        */
    __IO uint32_t PCCR1;  /**< 0x50 PWM Capture Control Register1        */
    __IO uint32_t PCCR2;  /**< 0x54 PWM Capture Control Register2        */
    __IO uint32_t PCCR3;  /**< 0x58 PWM Capture Control Register3        */
    __IO uint32_t PCRLR0; /**< 0x5C PWM Capture Rising Latch Register0   */
    __IO uint32_t PCFLR0; /**< 0x60 PWM Capture Falling Latch Register0  */
    __IO uint32_t PCRLR1; /**< 0x64 PWM Capture Rising Latch Register1   */
    __IO uint32_t PCFLR1; /**< 0x68 PWM Capture Falling Latch Register1  */
    __IO uint32_t PCRLR2; /**< 0x6C PWM Capture Rising Latch Register2   */
    __IO uint32_t PCFLR2; /**< 0x70 PWM Capture Falling Latch Register2  */
    __IO uint32_t PCRLR3; /**< 0x74 PWM Capture Rising Latch Register3   */
    __IO uint32_t PCFLR3; /**< 0x78 PWM Capture Falling Latch Register3  */
    __IO uint32_t PPCR;   /**< 0x7C PWM Port Control Register            */
    __IO uint32_t RSVD1;  /**< 0x80 reserved                             */
    __IO uint32_t RSVD2;  /**< 0x84 reserved                             */
    __IO uint32_t PDCR0;  /**< 0x88 PWM Delay Count Register0            */
    __IO uint32_t PDCR1;  /**< 0x8C PWM Delay Count Register1            */
    __IO uint32_t PDCR2;  /**< 0x90 PWM Delay Count Register2            */
    __IO uint32_t PDCR3;  /**< 0x94 PWM Delay Count Register3            */
    __IO uint32_t PDCR4;  /**< 0x98 PWM Delay Count Register4            */
    __IO uint32_t PDCR5;  /**< 0x9C PWM Delay Count Register5            */
    __IO uint32_t PDCR6;  /**< 0xA0 PWM Delay Count Register6            */
    __IO uint32_t PDCR7;  /**< 0xA4 PWM Delay Count Register7            */
    __IO uint32_t PDER;   /**< 0xA8 PWM Delay Enable Register            */
    __IO uint32_t RSVD3;  /**< 0xAC reserved                             */
    __IO uint32_t RSVD4;  /**< 0xB0 reserved                             */
    __IO uint32_t RSVD5;  /**< 0xB4 reserved                             */
    __IO uint32_t RSVD6;  /**< 0xB8 reserved                             */
    __IO uint32_t RSVD7;  /**< 0xBC reserved                             */
    __IO uint32_t PFPN0;  /**< 0xC0 PWM Fixed Pulse number Register0     */
    __IO uint32_t PFPN1;  /**< 0xC4 PWM Fixed Pulse number Register1     */
    __IO uint32_t PFPN2;  /**< 0xC8 PWM Fixed Pulse number Register2     */
    __IO uint32_t PFPN3;  /**< 0xCC PWM Fixed Pulse number Register3     */
    __IO uint32_t PFPN4;  /**< 0xD0 PWM Fixed Pulse number Register4     */
    __IO uint32_t PFPN5;  /**< 0xD4 PWM Fixed Pulse number Register5     */
    __IO uint32_t PFPN6;  /**< 0xD8 PWM Fixed Pulse number Register6     */
    __IO uint32_t PFPN7;  /**< 0xDC PWM Fixed Pulse number Register7     */
    __IO uint32_t PFPM;   /**< 0xE0 PWM Fixed pulse number mode Register */

} PWM_TypeDef;

/**
* @brief PWM Registers
*/
typedef struct
{
    __IO uint32_t CR1;    /**< 0x00 PWM_TIMER control register 1               */
    __IO uint32_t CR2;    /**< 0x04 PWM_TIMER control register 2               */
    __IO uint32_t SMCR;   /**< 0x08 PWM_TIMER slave mode ontrol register       */
    __IO uint32_t DIER;   /**< 0x0C PWM_TIMER DMA/interrupt enable register    */
    __IO uint32_t SR;     /**< 0x10 PWM_TIMER status register                  */
    __IO uint32_t EGR;    /**< 0x14 PWM_TIMER event generation register        */
    __IO uint32_t CCMR1;  /**< 0x18 PWM_TIMER capture/compare mode register 1  */
    __IO uint32_t CCMR2;  /**< 0x1C PWM_TIMER capture/compare mode register 2  */
    __IO uint32_t CCER;   /**< 0x20 PWM_TIMER capture/compare enable register  */
    __IO uint32_t CNT;    /**< 0x24 PWM_TIMER counter register                 */
    __IO uint32_t PSC;    /**< 0x28 PWM_TIMER prescaler register               */
    __IO uint32_t ARR;    /**< 0x2C PWM_TIMER Auto-reload value register       */
    __IO uint32_t RCR;    /**< 0x30 PWM_TIMER repetition counter register      */
    __IO uint32_t CCR1;   /**< 0x34 PWM_TIMER capture/compare register 1       */
    __IO uint32_t CCR2;   /**< 0x38 PWM_TIMER capture/compare register 2       */
    __IO uint32_t CCR3;   /**< 0x3C PWM_TIMER capture/compare register 3       */
    __IO uint32_t CCR4;   /**< 0x40 PWM_TIMER capture/compare register 4       */
    __IO uint32_t BDTR;   /**< 0x44 PWM_TIMER break and dead-time register     */
    __IO uint32_t DCR;    /**< 0x48 reserved                                   */
    __IO uint32_t DMAR;   /**< 0x4C reserved                                   */
    __IO uint32_t PMCR1;  /**< 0x50 PWM_TIMER PWM mode ceil register 1         */
    __IO uint32_t PMCR2;  /**< 0x54 PWM_TIMER PWM mode ceil register 2         */
    __IO uint32_t PMCR3;  /**< 0x58 PWM_TIMER PWM mode ceil register 3         */
    __IO uint32_t PMCR4;  /**< 0x5C PWM_TIMER PWM mode ceil register 4         */
    __IO uint32_t PMCREN; /**< 0x60 PWM_TIMER PMCR enable register             */
    __IO uint32_t PUE;    /**< 0x64 PWM_TIMER pull enable register             */
} PWMT_TypeDef;

/**
* @brief  RESET ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t RCR;  //0x00
    __IO uint8_t LVDCR; //0x04
    __IO uint8_t HVDCR; //0x05
    __IO uint8_t RTR;   //0x06
    __IO uint8_t RSR;   //0x07
} reg_reset_t;

/**
* @brief  RTC ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t PRT1R; //0x00
    __IO uint32_t PRT2R; //0x04
    __IO uint32_t PRA1R; //0x08
    __IO uint32_t PRA2R; //0x0c

    __IO uint32_t PRTCR;  //0x10
    __IO uint32_t PRCSR;  //0x14
    __IO uint32_t PRENR;  //0x18
    __IO uint32_t PRKEYR; //0x1c
} RTC_TypeDef;

/**
* @brief  SECURE DETECT ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t TS1CR;   //0x00
    __IO uint32_t TS1SR;   //0x04
    __IO uint32_t MSCR;    //0x08
    __IO uint32_t OBTCR1;  //0x0c
    __IO uint32_t OBTCR2;  //0x10
    __IO uint32_t OBTCR;   //0x14
    __IO uint32_t OBTSR;   //0x18
    __IO uint32_t LFTR;    //0x1c
    __IO uint32_t HFTR;    //0x20
    __IO uint32_t OBTDR;   //0x24
    __IO uint32_t OBTCNTR; //0x28
} SECDET_TypeDef;

/**
* @brief SPI ģ��Ĵ�������
*/
typedef struct
{
    __IO uint8_t BR;        /**< 0*/
    __IO uint8_t FR;        /**< 1*/
    __IO uint8_t CR1;       /**< 2*/
    __IO uint8_t CR2;       /**< 3*/
    __IO uint8_t RXFTOCTR;  /**< 4*/
    __IO uint8_t TXFTOCTR;  /**< 5*/
    __IO uint8_t RXFCR;     /**< 6*/
    __IO uint8_t TXFCR;     /**< 7*/
    __IO uint8_t ASCDR;     /**< 8*/
    __IO uint8_t BSCDR;     /**< 9*/
    __IO uint8_t DDR;       /**< a*/
    __IO uint8_t PURD;      /**< b*/
    __IO uint8_t TCNTM;     /**< c*/
    __IO uint8_t TCNTH;     /**< d*/
    __IO uint8_t PORT;      /**< e*/
    __IO uint8_t TCNTL;     /**< f*/
    __IO uint8_t IRSP;      /**< 10*/
    __IO uint8_t RESERVED0; /**< 11*/
    __IO uint8_t DR;        /**< 12*/
    __IO uint8_t DRH;       /**< 13*/
    __IO uint8_t RXFSR;     /**< 14*/
    __IO uint8_t TXFSR;     /**< 15*/
    __IO uint8_t SR;        /**< 16*/
    __IO uint8_t SRH;       /**< 17*/
    __IO uint8_t FDCR;      /**< 18*/
    __IO uint8_t ICR;       /**< 19*/
    __IO uint8_t DMACR;     /**< 1a*/
    __IO uint8_t DMATHR;    /**< 1b*/
    __IO uint8_t RXFDBGR;   /**< 1c*/
    __IO uint8_t RESERVED1; /**< 1d*/
    __IO uint8_t TXFDBGR;   /**< 1e*/
} SPI_TypeDef;

/**
* @brief SSI
*/
typedef struct
{
    __IO uint32_t CTRLR0;         //0x00
    __IO uint32_t CTRLR1;         //0x04
    __IO uint32_t SSIENR;         //0x08
    __IO uint32_t MWCR;           //0x0c
    __IO uint32_t SER;            //0x10
    __IO uint32_t BAUDR;          //0x14
    __IO uint32_t TXFTLR;         //0x18
    __IO uint32_t RXFTLR;         //0x1c
    __IO uint32_t TXFLR;          //0x20
    __IO uint32_t RXFLR;          //0x24
    __IO uint32_t SR;             //0x28
    __IO uint32_t IMR;            //0x2c
    __IO uint32_t ISR;            //0x30
    __IO uint32_t RISR;           //0x34
    __IO uint32_t TXOICR;         //0x38
    __IO uint32_t RXOICR;         //0x3c
    __IO uint32_t RXUICR;         //0x40
    __IO uint32_t reserve_44;     //0x44
    __IO uint32_t ICR;            //0x48
    __IO uint32_t DMACR;          //0x4c
    __IO uint32_t DMATDLR;        //0x50
    __IO uint32_t DMARDLR;        //0x54
    __IO uint32_t reserve_58;     //0x58
    __IO uint32_t reserve_5c;     //0x5c
    __IO uint32_t DR;             //0x60
    __IO uint32_t RESERVERED[35]; //0x64~0xec
    __IO uint32_t RXSDR;          //0xf0
    __IO uint32_t SPICTRLR0;      //0xf4
    __IO uint32_t reserve_f8;     //0xf8
    __IO uint32_t XIPMBR;         //0xfc
    __IO uint32_t XIPIIR;         //0x100
    __IO uint32_t XIPWIR;         //0x104
    __IO uint32_t XIPCR;          //0x108
    __IO uint32_t XIPSER;         //0x10C
    __IO uint32_t XRXIOCR;        //0x110
    __IO uint32_t reserve_114;    //0x114
} reg_ssi_t;

/**
* @brief  TC ģ��Ĵ�������
*/
typedef struct
{
    __IO uint16_t CR;
    __IO uint16_t MR;
    __IO uint16_t CNTR;
    __IO uint16_t SR;
} TC_TypeDef;

/**
* @brief  TRNG ģ��Ĵ�������
*/
typedef struct
{
    __IO uint32_t CTRL;          /**< 00*/
    __IO uint32_t DR;            /**< 04*/
    __IO uint32_t TMCTRL;        /**< 08*/
    __IO uint32_t STSCR;         /**< 0C*/
    __IO uint32_t OSCR_Mx[4];    /**< 10 14 18 1C*/
    __IO uint32_t RESERVED0[10]; /**< 20 24 28 2C 30 24 38 3C 40 44*/
    __IO uint32_t SM3DRx[8];     /**< 48 4C 50 54 58 5C 60 64 */
    __IO uint32_t OSCTRIMR1;     /**< 68*/
    __IO uint32_t OSCTRIMR2;     /**< 6C*/
    __IO uint32_t OSCCTR;        /**< 70*/
    __IO uint32_t OSCDIVR;       /**< 74*/
} reg_trng_t;

/**
* @brief UART ģ��Ĵ�������
*/
typedef struct
{
    __IO uint8_t BDL;       //0x00
    __IO uint8_t BDH;       //0x01
    __IO uint8_t CR2;       //0x02
    __IO uint8_t CR1;       //0x03
    __IO uint8_t SR2;       //0x04
    __IO uint8_t SR1;       //0x05
    __IO uint8_t DRL;       //0x06
    __IO uint8_t DRH;       //0x07
    __IO uint8_t PORT;      //0x08
    __IO uint8_t PURD;      //0x09
    __IO uint8_t BRDF;      //0x0a
    __IO uint8_t DDR;       //0x0b
    __IO uint8_t IRCR;      //0x0c
    __IO uint8_t TR;        //0x0d
    __IO uint8_t FCR;       //0x0e
    __IO uint8_t IRDR;      //0x0f
    __IO uint8_t DCR;       //0x10
    __IO uint8_t FSR;       //0x11
    __IO uint8_t RXTOCTR;   //0x12
    __IO uint8_t FCR2;      //0x13
    __IO uint8_t FCTRL;     //0x14
    __IO uint8_t FSR2;      //0x15

} uart_typedef_t;

/**
* @brief I2S ģ��Ĵ�������
*/
typedef struct
{

    __IO uint32_t CR;    /**< 0--1*/
    __IO uint32_t SR;    /**< 2*/
    __IO uint32_t ESR;   /**< 3*/
    __IO uint32_t CDR;   /**< 4*/
    __IO uint32_t TXDR;  /**< 5*/
    __IO uint32_t RXDR;  /**< 6*/
    __IO uint32_t DMACR; /**< 7*/
    __IO uint32_t ITCR;  /**< 8*/
    __IO uint32_t ITIR;  /**< 9*/
    __IO uint32_t ITOR;  /**< a*/

} reg_i2s_typeDef;

/**
* @brief USB Common Registers
*/

typedef struct
{
    __IO uint8_t FADDRR; /**<Function address register*/
    __IO uint8_t UCSR;   /**<USB control and status register*/

    __IO uint8_t INTRTX_L; /**<Low byte of Interrupt register for Endpoint0 and Tx Endpoint*/
    __IO uint8_t INTRTX_H; /**<High byte of Interrupt register for Endpoint0 and Tx Endpoint*/

    __IO uint8_t INTRRX_L; /**<Low byte of Interrupt register for Rx Endpoint*/
    __IO uint8_t INTRRX_H; /**<High byte of Interrupt register for Rx Endpoint*/

    __IO uint8_t INTRTXE_L; /**<Low byte of Interrupt enable register for IntrTx*/
    __IO uint8_t INTRTXE_H; /**<High byte of Interrupt enable register for IntrTx*/

    __IO uint8_t INTRRXE_L; /**<Low byte of Interrupt enable register for IntrRx*/
    __IO uint8_t INTRRXE_H; /**<High byte of Interrupt enable register for IntrRx*/

    __IO uint8_t INTRUSB;  /**<Interrupt register for common USB interrupts*/
    __IO uint8_t INTRUSBE; /**<Interrupt enable register for IntrUSB*/

    __IO uint8_t FNUMR_L; /**<Low byte of Frame number*/
    __IO uint8_t FNUMR_H; /**<High byte of Frame number*/

    __IO uint8_t EINDEX;  /**<Index register for selecting the endpoint status and control register*/
    __IO uint8_t TSTMODE; /**<Enables the USB test modes*/
} usbccommon_t;

/**
* @brief USB Indexed Registers
*/
typedef struct
{
    __IO uint8_t TXMAXP_L; /**<Low byte of Maximum packet size for peripheral Tx endpoint*/
    __IO uint8_t TXMAXP_H; /**<High byte of Maximum packet size for peripheral Tx endpoint*/
    union
    {
        __IO uint8_t E0CSR_L; /**<Low byte of Control Status register for Endpoint0*/
        __IO uint8_t TXCSR_L; /**<Low byte of Control Status register for peripheral Tx endpoint*/
    };
    union
    {
        __IO uint8_t E0CSR_H; /**<High byte of Control Status register for Endpoint0*/
        __IO uint8_t TXCSR_H; /**<High byte of Control Status register for peripheral Tx endpoint*/
    };
    __IO uint8_t RXMAXP_L; /**<Low byte of Maximum packet size for peripheral Rx endpoint*/
    __IO uint8_t RXMAXP_H; /**<High byte of Maximum packet size for peripheral Rx endpoint*/

    __IO uint8_t RXCSR_L; /**<Low byte of Control Status register for peripheral Rx endpoint*/
    __IO uint8_t RXCSR_H; /**<High byte of Control Status register for peripheral Rx endpoint*/
    union
    {
        __IO uint8_t E0COUNTR_L; /**<Low byte of Number of received bytes in Endpoint0 FIFO*/
        __IO uint8_t RXCOUNTR_L; /**<Low byte of Number of bytes in peripheral Rx endpoint FIFO*/
    };
    union
    {
        __IO uint8_t E0COUNTR_H; /**<High byte of Number of received bytes in Endpoint0 FIFO*/
        __IO uint8_t RXCOUNTR_H; /**<High byte of Number of bytes in peripheral Rx endpoint FIFO*/
    };
    __IO uint8_t TXTYPE;
    union
    {
        __IO uint8_t NAKLIMIT0;
        __IO uint8_t TXINTERVAL;
    };
    __IO uint8_t RXTYPE;     /*0x1C  *< */
    __IO uint8_t RXINTERVAL; /*0x1D  *< */
} usbcindexed_t;

/**
* @brief USB FIFO Config Registers
*/
typedef struct
{
    __IO uint8_t OTGCTRL;
    __IO uint8_t RESERVED;
    __IO uint8_t TXFIFOSZ;     /**<Tx Endpoint FIFO size,double buffer only set in one register(TX_fifosz/RX_fifosz)*/
    __IO uint8_t RXFIFOSZ;     /**<Rx Endpoint FIFO size,MAX FIFO size is 1024byte*/
    __IO uint8_t TX_fifoadd_L; /**<Tx Endpoint FIFO address(Low 8bit)*/
    __IO uint8_t TX_fifoadd_H; /**<Tx Endpoint FIFO address(High 8bit)*/
    __IO uint8_t RX_fifoadd_L; /**<Rx Endpoint FIFO address(Low 8bit)*/
    __IO uint8_t RX_fifoadd_H; /**<Rx Endpoint FIFO address(High 8bit)*/
} usbcfifocfg_t;

/**
* @brief USBC FIFO Registers
*/
typedef struct
{
    __IO uint32_t FIFO_ENDPOINTx[15];
} reg_usbcfifo_t;

/**
* @brief USBC DMA Registers
*/
typedef struct
{
    __IO uint32_t DMA_CNTL;
    __IO uint32_t DMA_ADDR;
    __IO uint32_t DMA_COUNT;
    __IO uint32_t RESERVED;
} reg_usbdma_t;

/**
* @brief USBC DMA Channel Registers
*/
typedef struct
{
    __IO uint32_t DMA_INTR;
    reg_usbdma_t USB_DMAReg[7];
} usbcdmacfg_t;

/**
* @brief USBC PHY Registers
*/
typedef struct
{
    __IO uint32_t PHY_ADDR;
    __IO uint32_t PHY_WDATA;
    __IO uint32_t PHY_WREN;
    __IO uint32_t PHY_RDEN;
    __IO uint32_t PHY_RDATA;
} reg_usbcphy_t;

/**
* @brief USI ģ��Ĵ�������
*/
typedef struct
{
    __IO uint8_t BDR;        /**< 00*/
    __IO uint8_t CR1;        /**< 01*/
    __IO uint8_t CR2;        /**< 02*/
    __IO uint8_t SR;         /**< 03*/
    __IO uint8_t IER;        /**< 04*/
    __IO uint8_t DR;         /**< 05*/
    __IO uint8_t WTRH;       /**< 06*/
    __IO uint8_t WTRM;       /**< 07*/
    __IO uint8_t WTRL;       /**< 08*/
    __IO uint8_t GTRH;       /**< 09*/
    __IO uint8_t GTRL;       /**< 0A*/
    __IO uint8_t CSR;        /**< 0B*/
    __IO uint8_t PCR;        /**< 0C*/
    __IO uint8_t PDR;        /**< 0D*/
    __IO uint8_t DDR;        /**< 0E*/
    __IO uint8_t FIFOINTCON; /**< 0F*/
    __IO uint8_t CRCH;       /**< 10*/
    __IO uint8_t CRCL;       /**< 11*/
    __IO uint8_t CDCR;       /**< 12*/
    __IO uint8_t EBLCR;      /**< 13*/
} USI_TypeDef;

/**
* @brief WDT ģ��Ĵ�������
*/
typedef struct
{
    __IO uint16_t WCR;
    __IO uint16_t WMR;
    __IO uint16_t WCNTR;
    __IO uint16_t WSR;
} WDT_TypeDef;

#ifdef __cplusplus
}
#endif

#endif /* __CCM4202S_REG_H */

/************************ (C) COPYRIGHT C*Core *****END OF FILE*************/
